// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: htmlmessages.proto

#if _MSC_VER >= 1300
#ifndef _PS3
#pragma warning(disable : 4530)	// warning C4530: C++ exception handler used, but unwind semantics are not enabled. Specify /EHsc (disabled due to std headers having exception syntax)
#pragma warning(disable : 4512)	// warning C4512: assignment operator could not be generated
#pragma warning(disable : 4244)	// warning C4244:  warning C4244: '=' : conversion from '__w64 int' to 'int', possible loss of data
#pragma warning(disable : 4267)	// warning C4267: 'argument' : conversion from 'size_t' to 'int', possible loss of data
#pragma warning(disable : 4125)	// warning C4125: decimal digit terminates octal escape sequence
#pragma warning(disable : 4127)	// warning C4127: conditional expression is constant
#pragma warning(disable : 4100)	// warning C4100: 'op' : unreferenced formal parameter
#endif // _PS3
#endif // _MSC_VER

#ifndef PROTOBUF_htmlmessages_2eproto__INCLUDED
#define PROTOBUF_htmlmessages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_htmlmessages_2eproto();
void protobuf_AssignDesc_htmlmessages_2eproto();
void protobuf_ShutdownFile_htmlmessages_2eproto();

class CMsgKeyUp;
class CMsgKeyDown;
class CMsgKeyChar;
class CMsgMouseDown;
class CMsgMouseUp;
class CMsgMouseDblClick;
class CMsgMouseWheel;
class CMsgMouseMove;
class CMsgMouseLeave;
class CMsgBrowserCreate;
class CMsgBrowserCreateResponse;
class CMsgBrowserRemove;
class CMsgBrowserErrorStrings;
class CMsgBrowserSize;
class CMsgBrowserPosition;
class CMsgPostURL;
class CMsgAddHeader;
class CMsgStopLoad;
class CMsgReload;
class CMsgGoForward;
class CMsgGoBack;
class CMsgCopy;
class CMsgPaste;
class CMsgExecuteJavaScript;
class CMsgSetFocus;
class CMsgHorizontalScrollBarSize;
class CMsgHorizontalScrollBarSizeResponse;
class CMsgVerticalScrollBarSize;
class CMsgVerticalScrollBarSizeResponse;
class CMsgFind;
class CMsgStopFind;
class CMsgSetHorizontalScroll;
class CMsgSetVerticalScroll;
class CMsgSetZoomLevel;
class CMsgViewSource;
class CMsgBrowserReady;
class CMsgURLChanged;
class CHTMLHeader;
class CHTMLPageSecurityInfo;
class CMsgFinishedRequest;
class CMsgStartRequest;
class CMsgStartRequestResponse;
class CMsgShowPopup;
class CMsgHidePopup;
class CMsgSizePopup;
class CMsgOpenNewTab;
class CMsgOpenNewTabResponse;
class CMsgPopupHTMLWindow;
class CMsgPopupHTMLWindowResponse;
class CMsgSetHTMLTitle;
class CMsgLoadingResource;
class CMsgStatusText;
class CMsgSetCursor;
class CMsgFileLoadDialog;
class CMsgFileLoadDialogResponse;
class CMsgShowToolTip;
class CMsgUpdateToolTip;
class CMsgHideToolTip;
class CMsgSearchResults;
class CMsgClose;
class CMsgNeedsPaint;
class CMsgNeedsPaintResponse;
class CMsgGetZoom;
class CMsgGetZoomResponse;
class CMsgLinkAtPosition;
class CMsgLinkAtPositionResponse;
class CMsgZoomToElementAtPosition;
class CMsgZoomToElementAtPositionResponse;
class CMsgScalePageToValue;
class CMsgScalePageToValueResponse;
class CMsgSavePageToJPEG;
class CMsgSavePageToJPEGResponse;
class CMsgJSAlert;
class CMsgJSConfirm;
class CMsgJSDialogResponse;
class CMsgCanGoBackAndForward;
class CMsgOpenSteamURL;
class CMsgSetCookie;
class CMsgSetTargetFrameRate;
class CMsgFullRepaint;
class CMsgRequestFullScreen;
class CMsgRequestFullScreenResponse;
class CMsgExitFullScreen;
class CMsgGetCookiesForURL;
class CCookie;
class CMsgGetCookiesForURLResponse;
class CMsgNodeHasFocus;
class CMsgZoomToFocusedElement;
class CMsgCloseFullScreenFlashIfOpen;
class CMsgPauseFullScreenFlashMovieIfOpen;
class CMsgFocusedNodeText;
class CMsgFocusedNodeTextResponse;

// ===================================================================

class CMsgKeyUp : public ::google::protobuf::Message {
 public:
  CMsgKeyUp();
  virtual ~CMsgKeyUp();

  CMsgKeyUp(const CMsgKeyUp& from);

  inline CMsgKeyUp& operator=(const CMsgKeyUp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgKeyUp& default_instance();

  void Swap(CMsgKeyUp* other);

  // implements Message ----------------------------------------------

  CMsgKeyUp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgKeyUp& from);
  void MergeFrom(const CMsgKeyUp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // optional uint32 keyCode = 2;
  inline bool has_keycode() const;
  inline void clear_keycode();
  static const int kKeyCodeFieldNumber = 2;
  inline ::google::protobuf::uint32 keycode() const;
  inline void set_keycode(::google::protobuf::uint32 value);

  // optional uint32 modifiers = 3;
  inline bool has_modifiers() const;
  inline void clear_modifiers();
  static const int kModifiersFieldNumber = 3;
  inline ::google::protobuf::uint32 modifiers() const;
  inline void set_modifiers(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgKeyUp)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  ::google::protobuf::uint32 keycode_;
  ::google::protobuf::uint32 modifiers_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgKeyUp* default_instance_;
};
// -------------------------------------------------------------------

class CMsgKeyDown : public ::google::protobuf::Message {
 public:
  CMsgKeyDown();
  virtual ~CMsgKeyDown();

  CMsgKeyDown(const CMsgKeyDown& from);

  inline CMsgKeyDown& operator=(const CMsgKeyDown& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgKeyDown& default_instance();

  void Swap(CMsgKeyDown* other);

  // implements Message ----------------------------------------------

  CMsgKeyDown* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgKeyDown& from);
  void MergeFrom(const CMsgKeyDown& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // optional uint32 keyCode = 2;
  inline bool has_keycode() const;
  inline void clear_keycode();
  static const int kKeyCodeFieldNumber = 2;
  inline ::google::protobuf::uint32 keycode() const;
  inline void set_keycode(::google::protobuf::uint32 value);

  // optional uint32 modifiers = 3;
  inline bool has_modifiers() const;
  inline void clear_modifiers();
  static const int kModifiersFieldNumber = 3;
  inline ::google::protobuf::uint32 modifiers() const;
  inline void set_modifiers(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgKeyDown)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  ::google::protobuf::uint32 keycode_;
  ::google::protobuf::uint32 modifiers_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgKeyDown* default_instance_;
};
// -------------------------------------------------------------------

class CMsgKeyChar : public ::google::protobuf::Message {
 public:
  CMsgKeyChar();
  virtual ~CMsgKeyChar();

  CMsgKeyChar(const CMsgKeyChar& from);

  inline CMsgKeyChar& operator=(const CMsgKeyChar& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgKeyChar& default_instance();

  void Swap(CMsgKeyChar* other);

  // implements Message ----------------------------------------------

  CMsgKeyChar* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgKeyChar& from);
  void MergeFrom(const CMsgKeyChar& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // optional uint32 unichar = 2;
  inline bool has_unichar() const;
  inline void clear_unichar();
  static const int kUnicharFieldNumber = 2;
  inline ::google::protobuf::uint32 unichar() const;
  inline void set_unichar(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgKeyChar)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  ::google::protobuf::uint32 unichar_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgKeyChar* default_instance_;
};
// -------------------------------------------------------------------

class CMsgMouseDown : public ::google::protobuf::Message {
 public:
  CMsgMouseDown();
  virtual ~CMsgMouseDown();

  CMsgMouseDown(const CMsgMouseDown& from);

  inline CMsgMouseDown& operator=(const CMsgMouseDown& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgMouseDown& default_instance();

  void Swap(CMsgMouseDown* other);

  // implements Message ----------------------------------------------

  CMsgMouseDown* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgMouseDown& from);
  void MergeFrom(const CMsgMouseDown& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // optional uint32 mouse_button = 2;
  inline bool has_mouse_button() const;
  inline void clear_mouse_button();
  static const int kMouseButtonFieldNumber = 2;
  inline ::google::protobuf::uint32 mouse_button() const;
  inline void set_mouse_button(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgMouseDown)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  ::google::protobuf::uint32 mouse_button_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgMouseDown* default_instance_;
};
// -------------------------------------------------------------------

class CMsgMouseUp : public ::google::protobuf::Message {
 public:
  CMsgMouseUp();
  virtual ~CMsgMouseUp();

  CMsgMouseUp(const CMsgMouseUp& from);

  inline CMsgMouseUp& operator=(const CMsgMouseUp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgMouseUp& default_instance();

  void Swap(CMsgMouseUp* other);

  // implements Message ----------------------------------------------

  CMsgMouseUp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgMouseUp& from);
  void MergeFrom(const CMsgMouseUp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // optional uint32 mouse_button = 2;
  inline bool has_mouse_button() const;
  inline void clear_mouse_button();
  static const int kMouseButtonFieldNumber = 2;
  inline ::google::protobuf::uint32 mouse_button() const;
  inline void set_mouse_button(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgMouseUp)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  ::google::protobuf::uint32 mouse_button_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgMouseUp* default_instance_;
};
// -------------------------------------------------------------------

class CMsgMouseDblClick : public ::google::protobuf::Message {
 public:
  CMsgMouseDblClick();
  virtual ~CMsgMouseDblClick();

  CMsgMouseDblClick(const CMsgMouseDblClick& from);

  inline CMsgMouseDblClick& operator=(const CMsgMouseDblClick& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgMouseDblClick& default_instance();

  void Swap(CMsgMouseDblClick* other);

  // implements Message ----------------------------------------------

  CMsgMouseDblClick* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgMouseDblClick& from);
  void MergeFrom(const CMsgMouseDblClick& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // optional uint32 mouse_button = 2;
  inline bool has_mouse_button() const;
  inline void clear_mouse_button();
  static const int kMouseButtonFieldNumber = 2;
  inline ::google::protobuf::uint32 mouse_button() const;
  inline void set_mouse_button(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgMouseDblClick)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  ::google::protobuf::uint32 mouse_button_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgMouseDblClick* default_instance_;
};
// -------------------------------------------------------------------

class CMsgMouseWheel : public ::google::protobuf::Message {
 public:
  CMsgMouseWheel();
  virtual ~CMsgMouseWheel();

  CMsgMouseWheel(const CMsgMouseWheel& from);

  inline CMsgMouseWheel& operator=(const CMsgMouseWheel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgMouseWheel& default_instance();

  void Swap(CMsgMouseWheel* other);

  // implements Message ----------------------------------------------

  CMsgMouseWheel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgMouseWheel& from);
  void MergeFrom(const CMsgMouseWheel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // optional int32 delta = 2;
  inline bool has_delta() const;
  inline void clear_delta();
  static const int kDeltaFieldNumber = 2;
  inline ::google::protobuf::int32 delta() const;
  inline void set_delta(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CMsgMouseWheel)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  ::google::protobuf::int32 delta_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgMouseWheel* default_instance_;
};
// -------------------------------------------------------------------

class CMsgMouseMove : public ::google::protobuf::Message {
 public:
  CMsgMouseMove();
  virtual ~CMsgMouseMove();

  CMsgMouseMove(const CMsgMouseMove& from);

  inline CMsgMouseMove& operator=(const CMsgMouseMove& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgMouseMove& default_instance();

  void Swap(CMsgMouseMove* other);

  // implements Message ----------------------------------------------

  CMsgMouseMove* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgMouseMove& from);
  void MergeFrom(const CMsgMouseMove& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // optional int32 x = 2;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 2;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);

  // optional int32 y = 3;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 3;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CMsgMouseMove)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgMouseMove* default_instance_;
};
// -------------------------------------------------------------------

class CMsgMouseLeave : public ::google::protobuf::Message {
 public:
  CMsgMouseLeave();
  virtual ~CMsgMouseLeave();

  CMsgMouseLeave(const CMsgMouseLeave& from);

  inline CMsgMouseLeave& operator=(const CMsgMouseLeave& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgMouseLeave& default_instance();

  void Swap(CMsgMouseLeave* other);

  // implements Message ----------------------------------------------

  CMsgMouseLeave* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgMouseLeave& from);
  void MergeFrom(const CMsgMouseLeave& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgMouseLeave)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgMouseLeave* default_instance_;
};
// -------------------------------------------------------------------

class CMsgBrowserCreate : public ::google::protobuf::Message {
 public:
  CMsgBrowserCreate();
  virtual ~CMsgBrowserCreate();

  CMsgBrowserCreate(const CMsgBrowserCreate& from);

  inline CMsgBrowserCreate& operator=(const CMsgBrowserCreate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgBrowserCreate& default_instance();

  void Swap(CMsgBrowserCreate* other);

  // implements Message ----------------------------------------------

  CMsgBrowserCreate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgBrowserCreate& from);
  void MergeFrom(const CMsgBrowserCreate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 request_id = 1;
  inline bool has_request_id() const;
  inline void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  inline ::google::protobuf::uint32 request_id() const;
  inline void set_request_id(::google::protobuf::uint32 value);

  // optional bool popup = 2 [default = false];
  inline bool has_popup() const;
  inline void clear_popup();
  static const int kPopupFieldNumber = 2;
  inline bool popup() const;
  inline void set_popup(bool value);

  // optional string useragent = 3;
  inline bool has_useragent() const;
  inline void clear_useragent();
  static const int kUseragentFieldNumber = 3;
  inline const ::std::string& useragent() const;
  inline void set_useragent(const ::std::string& value);
  inline void set_useragent(const char* value);
  inline void set_useragent(const char* value, size_t size);
  inline ::std::string* mutable_useragent();

  // @@protoc_insertion_point(class_scope:CMsgBrowserCreate)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 request_id_;
  bool popup_;
  ::std::string* useragent_;
  static const ::std::string _default_useragent_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgBrowserCreate* default_instance_;
};
// -------------------------------------------------------------------

class CMsgBrowserCreateResponse : public ::google::protobuf::Message {
 public:
  CMsgBrowserCreateResponse();
  virtual ~CMsgBrowserCreateResponse();

  CMsgBrowserCreateResponse(const CMsgBrowserCreateResponse& from);

  inline CMsgBrowserCreateResponse& operator=(const CMsgBrowserCreateResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgBrowserCreateResponse& default_instance();

  void Swap(CMsgBrowserCreateResponse* other);

  // implements Message ----------------------------------------------

  CMsgBrowserCreateResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgBrowserCreateResponse& from);
  void MergeFrom(const CMsgBrowserCreateResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // optional uint32 request_id = 2;
  inline bool has_request_id() const;
  inline void clear_request_id();
  static const int kRequestIdFieldNumber = 2;
  inline ::google::protobuf::uint32 request_id() const;
  inline void set_request_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgBrowserCreateResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  ::google::protobuf::uint32 request_id_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgBrowserCreateResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgBrowserRemove : public ::google::protobuf::Message {
 public:
  CMsgBrowserRemove();
  virtual ~CMsgBrowserRemove();

  CMsgBrowserRemove(const CMsgBrowserRemove& from);

  inline CMsgBrowserRemove& operator=(const CMsgBrowserRemove& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgBrowserRemove& default_instance();

  void Swap(CMsgBrowserRemove* other);

  // implements Message ----------------------------------------------

  CMsgBrowserRemove* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgBrowserRemove& from);
  void MergeFrom(const CMsgBrowserRemove& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgBrowserRemove)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgBrowserRemove* default_instance_;
};
// -------------------------------------------------------------------

class CMsgBrowserErrorStrings : public ::google::protobuf::Message {
 public:
  CMsgBrowserErrorStrings();
  virtual ~CMsgBrowserErrorStrings();

  CMsgBrowserErrorStrings(const CMsgBrowserErrorStrings& from);

  inline CMsgBrowserErrorStrings& operator=(const CMsgBrowserErrorStrings& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgBrowserErrorStrings& default_instance();

  void Swap(CMsgBrowserErrorStrings* other);

  // implements Message ----------------------------------------------

  CMsgBrowserErrorStrings* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgBrowserErrorStrings& from);
  void MergeFrom(const CMsgBrowserErrorStrings& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // optional string title = 2;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 2;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();

  // optional string header = 3;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 3;
  inline const ::std::string& header() const;
  inline void set_header(const ::std::string& value);
  inline void set_header(const char* value);
  inline void set_header(const char* value, size_t size);
  inline ::std::string* mutable_header();

  // optional string cache_miss = 4;
  inline bool has_cache_miss() const;
  inline void clear_cache_miss();
  static const int kCacheMissFieldNumber = 4;
  inline const ::std::string& cache_miss() const;
  inline void set_cache_miss(const ::std::string& value);
  inline void set_cache_miss(const char* value);
  inline void set_cache_miss(const char* value, size_t size);
  inline ::std::string* mutable_cache_miss();

  // optional string bad_url = 5;
  inline bool has_bad_url() const;
  inline void clear_bad_url();
  static const int kBadUrlFieldNumber = 5;
  inline const ::std::string& bad_url() const;
  inline void set_bad_url(const ::std::string& value);
  inline void set_bad_url(const char* value);
  inline void set_bad_url(const char* value, size_t size);
  inline ::std::string* mutable_bad_url();

  // optional string connection_problem = 6;
  inline bool has_connection_problem() const;
  inline void clear_connection_problem();
  static const int kConnectionProblemFieldNumber = 6;
  inline const ::std::string& connection_problem() const;
  inline void set_connection_problem(const ::std::string& value);
  inline void set_connection_problem(const char* value);
  inline void set_connection_problem(const char* value, size_t size);
  inline ::std::string* mutable_connection_problem();

  // optional string proxy_problem = 7;
  inline bool has_proxy_problem() const;
  inline void clear_proxy_problem();
  static const int kProxyProblemFieldNumber = 7;
  inline const ::std::string& proxy_problem() const;
  inline void set_proxy_problem(const ::std::string& value);
  inline void set_proxy_problem(const char* value);
  inline void set_proxy_problem(const char* value, size_t size);
  inline ::std::string* mutable_proxy_problem();

  // optional string unknown = 8;
  inline bool has_unknown() const;
  inline void clear_unknown();
  static const int kUnknownFieldNumber = 8;
  inline const ::std::string& unknown() const;
  inline void set_unknown(const ::std::string& value);
  inline void set_unknown(const char* value);
  inline void set_unknown(const char* value, size_t size);
  inline ::std::string* mutable_unknown();

  // @@protoc_insertion_point(class_scope:CMsgBrowserErrorStrings)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  ::std::string* title_;
  static const ::std::string _default_title_;
  ::std::string* header_;
  static const ::std::string _default_header_;
  ::std::string* cache_miss_;
  static const ::std::string _default_cache_miss_;
  ::std::string* bad_url_;
  static const ::std::string _default_bad_url_;
  ::std::string* connection_problem_;
  static const ::std::string _default_connection_problem_;
  ::std::string* proxy_problem_;
  static const ::std::string _default_proxy_problem_;
  ::std::string* unknown_;
  static const ::std::string _default_unknown_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgBrowserErrorStrings* default_instance_;
};
// -------------------------------------------------------------------

class CMsgBrowserSize : public ::google::protobuf::Message {
 public:
  CMsgBrowserSize();
  virtual ~CMsgBrowserSize();

  CMsgBrowserSize(const CMsgBrowserSize& from);

  inline CMsgBrowserSize& operator=(const CMsgBrowserSize& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgBrowserSize& default_instance();

  void Swap(CMsgBrowserSize* other);

  // implements Message ----------------------------------------------

  CMsgBrowserSize* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgBrowserSize& from);
  void MergeFrom(const CMsgBrowserSize& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // optional uint32 width = 2;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 2;
  inline ::google::protobuf::uint32 width() const;
  inline void set_width(::google::protobuf::uint32 value);

  // optional uint32 height = 3;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 3;
  inline ::google::protobuf::uint32 height() const;
  inline void set_height(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgBrowserSize)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgBrowserSize* default_instance_;
};
// -------------------------------------------------------------------

class CMsgBrowserPosition : public ::google::protobuf::Message {
 public:
  CMsgBrowserPosition();
  virtual ~CMsgBrowserPosition();

  CMsgBrowserPosition(const CMsgBrowserPosition& from);

  inline CMsgBrowserPosition& operator=(const CMsgBrowserPosition& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgBrowserPosition& default_instance();

  void Swap(CMsgBrowserPosition* other);

  // implements Message ----------------------------------------------

  CMsgBrowserPosition* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgBrowserPosition& from);
  void MergeFrom(const CMsgBrowserPosition& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // optional uint32 x = 2;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 2;
  inline ::google::protobuf::uint32 x() const;
  inline void set_x(::google::protobuf::uint32 value);

  // optional uint32 y = 3;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 3;
  inline ::google::protobuf::uint32 y() const;
  inline void set_y(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgBrowserPosition)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  ::google::protobuf::uint32 x_;
  ::google::protobuf::uint32 y_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgBrowserPosition* default_instance_;
};
// -------------------------------------------------------------------

class CMsgPostURL : public ::google::protobuf::Message {
 public:
  CMsgPostURL();
  virtual ~CMsgPostURL();

  CMsgPostURL(const CMsgPostURL& from);

  inline CMsgPostURL& operator=(const CMsgPostURL& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgPostURL& default_instance();

  void Swap(CMsgPostURL* other);

  // implements Message ----------------------------------------------

  CMsgPostURL* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgPostURL& from);
  void MergeFrom(const CMsgPostURL& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // optional string url = 2;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 2;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();

  // optional string post = 3;
  inline bool has_post() const;
  inline void clear_post();
  static const int kPostFieldNumber = 3;
  inline const ::std::string& post() const;
  inline void set_post(const ::std::string& value);
  inline void set_post(const char* value);
  inline void set_post(const char* value, size_t size);
  inline ::std::string* mutable_post();

  // optional uint32 pageserial = 4;
  inline bool has_pageserial() const;
  inline void clear_pageserial();
  static const int kPageserialFieldNumber = 4;
  inline ::google::protobuf::uint32 pageserial() const;
  inline void set_pageserial(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgPostURL)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  ::std::string* url_;
  static const ::std::string _default_url_;
  ::std::string* post_;
  static const ::std::string _default_post_;
  ::google::protobuf::uint32 pageserial_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgPostURL* default_instance_;
};
// -------------------------------------------------------------------

class CMsgAddHeader : public ::google::protobuf::Message {
 public:
  CMsgAddHeader();
  virtual ~CMsgAddHeader();

  CMsgAddHeader(const CMsgAddHeader& from);

  inline CMsgAddHeader& operator=(const CMsgAddHeader& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgAddHeader& default_instance();

  void Swap(CMsgAddHeader* other);

  // implements Message ----------------------------------------------

  CMsgAddHeader* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgAddHeader& from);
  void MergeFrom(const CMsgAddHeader& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // optional string key = 2;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();

  // optional string value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();

  // @@protoc_insertion_point(class_scope:CMsgAddHeader)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  ::std::string* key_;
  static const ::std::string _default_key_;
  ::std::string* value_;
  static const ::std::string _default_value_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgAddHeader* default_instance_;
};
// -------------------------------------------------------------------

class CMsgStopLoad : public ::google::protobuf::Message {
 public:
  CMsgStopLoad();
  virtual ~CMsgStopLoad();

  CMsgStopLoad(const CMsgStopLoad& from);

  inline CMsgStopLoad& operator=(const CMsgStopLoad& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgStopLoad& default_instance();

  void Swap(CMsgStopLoad* other);

  // implements Message ----------------------------------------------

  CMsgStopLoad* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgStopLoad& from);
  void MergeFrom(const CMsgStopLoad& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgStopLoad)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgStopLoad* default_instance_;
};
// -------------------------------------------------------------------

class CMsgReload : public ::google::protobuf::Message {
 public:
  CMsgReload();
  virtual ~CMsgReload();

  CMsgReload(const CMsgReload& from);

  inline CMsgReload& operator=(const CMsgReload& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgReload& default_instance();

  void Swap(CMsgReload* other);

  // implements Message ----------------------------------------------

  CMsgReload* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgReload& from);
  void MergeFrom(const CMsgReload& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgReload)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgReload* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGoForward : public ::google::protobuf::Message {
 public:
  CMsgGoForward();
  virtual ~CMsgGoForward();

  CMsgGoForward(const CMsgGoForward& from);

  inline CMsgGoForward& operator=(const CMsgGoForward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGoForward& default_instance();

  void Swap(CMsgGoForward* other);

  // implements Message ----------------------------------------------

  CMsgGoForward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGoForward& from);
  void MergeFrom(const CMsgGoForward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgGoForward)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgGoForward* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGoBack : public ::google::protobuf::Message {
 public:
  CMsgGoBack();
  virtual ~CMsgGoBack();

  CMsgGoBack(const CMsgGoBack& from);

  inline CMsgGoBack& operator=(const CMsgGoBack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGoBack& default_instance();

  void Swap(CMsgGoBack* other);

  // implements Message ----------------------------------------------

  CMsgGoBack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGoBack& from);
  void MergeFrom(const CMsgGoBack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgGoBack)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgGoBack* default_instance_;
};
// -------------------------------------------------------------------

class CMsgCopy : public ::google::protobuf::Message {
 public:
  CMsgCopy();
  virtual ~CMsgCopy();

  CMsgCopy(const CMsgCopy& from);

  inline CMsgCopy& operator=(const CMsgCopy& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgCopy& default_instance();

  void Swap(CMsgCopy* other);

  // implements Message ----------------------------------------------

  CMsgCopy* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgCopy& from);
  void MergeFrom(const CMsgCopy& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgCopy)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgCopy* default_instance_;
};
// -------------------------------------------------------------------

class CMsgPaste : public ::google::protobuf::Message {
 public:
  CMsgPaste();
  virtual ~CMsgPaste();

  CMsgPaste(const CMsgPaste& from);

  inline CMsgPaste& operator=(const CMsgPaste& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgPaste& default_instance();

  void Swap(CMsgPaste* other);

  // implements Message ----------------------------------------------

  CMsgPaste* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgPaste& from);
  void MergeFrom(const CMsgPaste& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgPaste)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgPaste* default_instance_;
};
// -------------------------------------------------------------------

class CMsgExecuteJavaScript : public ::google::protobuf::Message {
 public:
  CMsgExecuteJavaScript();
  virtual ~CMsgExecuteJavaScript();

  CMsgExecuteJavaScript(const CMsgExecuteJavaScript& from);

  inline CMsgExecuteJavaScript& operator=(const CMsgExecuteJavaScript& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgExecuteJavaScript& default_instance();

  void Swap(CMsgExecuteJavaScript* other);

  // implements Message ----------------------------------------------

  CMsgExecuteJavaScript* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgExecuteJavaScript& from);
  void MergeFrom(const CMsgExecuteJavaScript& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // optional string script = 2;
  inline bool has_script() const;
  inline void clear_script();
  static const int kScriptFieldNumber = 2;
  inline const ::std::string& script() const;
  inline void set_script(const ::std::string& value);
  inline void set_script(const char* value);
  inline void set_script(const char* value, size_t size);
  inline ::std::string* mutable_script();

  // @@protoc_insertion_point(class_scope:CMsgExecuteJavaScript)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  ::std::string* script_;
  static const ::std::string _default_script_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgExecuteJavaScript* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSetFocus : public ::google::protobuf::Message {
 public:
  CMsgSetFocus();
  virtual ~CMsgSetFocus();

  CMsgSetFocus(const CMsgSetFocus& from);

  inline CMsgSetFocus& operator=(const CMsgSetFocus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSetFocus& default_instance();

  void Swap(CMsgSetFocus* other);

  // implements Message ----------------------------------------------

  CMsgSetFocus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSetFocus& from);
  void MergeFrom(const CMsgSetFocus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // optional bool focus = 2;
  inline bool has_focus() const;
  inline void clear_focus();
  static const int kFocusFieldNumber = 2;
  inline bool focus() const;
  inline void set_focus(bool value);

  // @@protoc_insertion_point(class_scope:CMsgSetFocus)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  bool focus_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgSetFocus* default_instance_;
};
// -------------------------------------------------------------------

class CMsgHorizontalScrollBarSize : public ::google::protobuf::Message {
 public:
  CMsgHorizontalScrollBarSize();
  virtual ~CMsgHorizontalScrollBarSize();

  CMsgHorizontalScrollBarSize(const CMsgHorizontalScrollBarSize& from);

  inline CMsgHorizontalScrollBarSize& operator=(const CMsgHorizontalScrollBarSize& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgHorizontalScrollBarSize& default_instance();

  void Swap(CMsgHorizontalScrollBarSize* other);

  // implements Message ----------------------------------------------

  CMsgHorizontalScrollBarSize* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgHorizontalScrollBarSize& from);
  void MergeFrom(const CMsgHorizontalScrollBarSize& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgHorizontalScrollBarSize)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgHorizontalScrollBarSize* default_instance_;
};
// -------------------------------------------------------------------

class CMsgHorizontalScrollBarSizeResponse : public ::google::protobuf::Message {
 public:
  CMsgHorizontalScrollBarSizeResponse();
  virtual ~CMsgHorizontalScrollBarSizeResponse();

  CMsgHorizontalScrollBarSizeResponse(const CMsgHorizontalScrollBarSizeResponse& from);

  inline CMsgHorizontalScrollBarSizeResponse& operator=(const CMsgHorizontalScrollBarSizeResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgHorizontalScrollBarSizeResponse& default_instance();

  void Swap(CMsgHorizontalScrollBarSizeResponse* other);

  // implements Message ----------------------------------------------

  CMsgHorizontalScrollBarSizeResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgHorizontalScrollBarSizeResponse& from);
  void MergeFrom(const CMsgHorizontalScrollBarSizeResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // optional uint32 x = 2;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 2;
  inline ::google::protobuf::uint32 x() const;
  inline void set_x(::google::protobuf::uint32 value);

  // optional uint32 y = 3;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 3;
  inline ::google::protobuf::uint32 y() const;
  inline void set_y(::google::protobuf::uint32 value);

  // optional uint32 wide = 4;
  inline bool has_wide() const;
  inline void clear_wide();
  static const int kWideFieldNumber = 4;
  inline ::google::protobuf::uint32 wide() const;
  inline void set_wide(::google::protobuf::uint32 value);

  // optional uint32 tall = 5;
  inline bool has_tall() const;
  inline void clear_tall();
  static const int kTallFieldNumber = 5;
  inline ::google::protobuf::uint32 tall() const;
  inline void set_tall(::google::protobuf::uint32 value);

  // optional uint32 scroll_max = 6;
  inline bool has_scroll_max() const;
  inline void clear_scroll_max();
  static const int kScrollMaxFieldNumber = 6;
  inline ::google::protobuf::uint32 scroll_max() const;
  inline void set_scroll_max(::google::protobuf::uint32 value);

  // optional uint32 scroll = 7;
  inline bool has_scroll() const;
  inline void clear_scroll();
  static const int kScrollFieldNumber = 7;
  inline ::google::protobuf::uint32 scroll() const;
  inline void set_scroll(::google::protobuf::uint32 value);

  // optional float zoom = 8;
  inline bool has_zoom() const;
  inline void clear_zoom();
  static const int kZoomFieldNumber = 8;
  inline float zoom() const;
  inline void set_zoom(float value);

  // optional bool visible = 9;
  inline bool has_visible() const;
  inline void clear_visible();
  static const int kVisibleFieldNumber = 9;
  inline bool visible() const;
  inline void set_visible(bool value);

  // @@protoc_insertion_point(class_scope:CMsgHorizontalScrollBarSizeResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  ::google::protobuf::uint32 x_;
  ::google::protobuf::uint32 y_;
  ::google::protobuf::uint32 wide_;
  ::google::protobuf::uint32 tall_;
  ::google::protobuf::uint32 scroll_max_;
  ::google::protobuf::uint32 scroll_;
  float zoom_;
  bool visible_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgHorizontalScrollBarSizeResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgVerticalScrollBarSize : public ::google::protobuf::Message {
 public:
  CMsgVerticalScrollBarSize();
  virtual ~CMsgVerticalScrollBarSize();

  CMsgVerticalScrollBarSize(const CMsgVerticalScrollBarSize& from);

  inline CMsgVerticalScrollBarSize& operator=(const CMsgVerticalScrollBarSize& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgVerticalScrollBarSize& default_instance();

  void Swap(CMsgVerticalScrollBarSize* other);

  // implements Message ----------------------------------------------

  CMsgVerticalScrollBarSize* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgVerticalScrollBarSize& from);
  void MergeFrom(const CMsgVerticalScrollBarSize& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgVerticalScrollBarSize)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgVerticalScrollBarSize* default_instance_;
};
// -------------------------------------------------------------------

class CMsgVerticalScrollBarSizeResponse : public ::google::protobuf::Message {
 public:
  CMsgVerticalScrollBarSizeResponse();
  virtual ~CMsgVerticalScrollBarSizeResponse();

  CMsgVerticalScrollBarSizeResponse(const CMsgVerticalScrollBarSizeResponse& from);

  inline CMsgVerticalScrollBarSizeResponse& operator=(const CMsgVerticalScrollBarSizeResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgVerticalScrollBarSizeResponse& default_instance();

  void Swap(CMsgVerticalScrollBarSizeResponse* other);

  // implements Message ----------------------------------------------

  CMsgVerticalScrollBarSizeResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgVerticalScrollBarSizeResponse& from);
  void MergeFrom(const CMsgVerticalScrollBarSizeResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // optional uint32 x = 2;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 2;
  inline ::google::protobuf::uint32 x() const;
  inline void set_x(::google::protobuf::uint32 value);

  // optional uint32 y = 3;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 3;
  inline ::google::protobuf::uint32 y() const;
  inline void set_y(::google::protobuf::uint32 value);

  // optional uint32 wide = 4;
  inline bool has_wide() const;
  inline void clear_wide();
  static const int kWideFieldNumber = 4;
  inline ::google::protobuf::uint32 wide() const;
  inline void set_wide(::google::protobuf::uint32 value);

  // optional uint32 tall = 5;
  inline bool has_tall() const;
  inline void clear_tall();
  static const int kTallFieldNumber = 5;
  inline ::google::protobuf::uint32 tall() const;
  inline void set_tall(::google::protobuf::uint32 value);

  // optional uint32 scroll_max = 6;
  inline bool has_scroll_max() const;
  inline void clear_scroll_max();
  static const int kScrollMaxFieldNumber = 6;
  inline ::google::protobuf::uint32 scroll_max() const;
  inline void set_scroll_max(::google::protobuf::uint32 value);

  // optional uint32 scroll = 7;
  inline bool has_scroll() const;
  inline void clear_scroll();
  static const int kScrollFieldNumber = 7;
  inline ::google::protobuf::uint32 scroll() const;
  inline void set_scroll(::google::protobuf::uint32 value);

  // optional float zoom = 8;
  inline bool has_zoom() const;
  inline void clear_zoom();
  static const int kZoomFieldNumber = 8;
  inline float zoom() const;
  inline void set_zoom(float value);

  // optional bool visible = 9;
  inline bool has_visible() const;
  inline void clear_visible();
  static const int kVisibleFieldNumber = 9;
  inline bool visible() const;
  inline void set_visible(bool value);

  // @@protoc_insertion_point(class_scope:CMsgVerticalScrollBarSizeResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  ::google::protobuf::uint32 x_;
  ::google::protobuf::uint32 y_;
  ::google::protobuf::uint32 wide_;
  ::google::protobuf::uint32 tall_;
  ::google::protobuf::uint32 scroll_max_;
  ::google::protobuf::uint32 scroll_;
  float zoom_;
  bool visible_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgVerticalScrollBarSizeResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgFind : public ::google::protobuf::Message {
 public:
  CMsgFind();
  virtual ~CMsgFind();

  CMsgFind(const CMsgFind& from);

  inline CMsgFind& operator=(const CMsgFind& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgFind& default_instance();

  void Swap(CMsgFind* other);

  // implements Message ----------------------------------------------

  CMsgFind* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgFind& from);
  void MergeFrom(const CMsgFind& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // optional string find = 2;
  inline bool has_find() const;
  inline void clear_find();
  static const int kFindFieldNumber = 2;
  inline const ::std::string& find() const;
  inline void set_find(const ::std::string& value);
  inline void set_find(const char* value);
  inline void set_find(const char* value, size_t size);
  inline ::std::string* mutable_find();

  // optional bool infind = 3;
  inline bool has_infind() const;
  inline void clear_infind();
  static const int kInfindFieldNumber = 3;
  inline bool infind() const;
  inline void set_infind(bool value);

  // optional bool reverse = 4 [default = false];
  inline bool has_reverse() const;
  inline void clear_reverse();
  static const int kReverseFieldNumber = 4;
  inline bool reverse() const;
  inline void set_reverse(bool value);

  // @@protoc_insertion_point(class_scope:CMsgFind)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  ::std::string* find_;
  static const ::std::string _default_find_;
  bool infind_;
  bool reverse_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgFind* default_instance_;
};
// -------------------------------------------------------------------

class CMsgStopFind : public ::google::protobuf::Message {
 public:
  CMsgStopFind();
  virtual ~CMsgStopFind();

  CMsgStopFind(const CMsgStopFind& from);

  inline CMsgStopFind& operator=(const CMsgStopFind& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgStopFind& default_instance();

  void Swap(CMsgStopFind* other);

  // implements Message ----------------------------------------------

  CMsgStopFind* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgStopFind& from);
  void MergeFrom(const CMsgStopFind& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgStopFind)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgStopFind* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSetHorizontalScroll : public ::google::protobuf::Message {
 public:
  CMsgSetHorizontalScroll();
  virtual ~CMsgSetHorizontalScroll();

  CMsgSetHorizontalScroll(const CMsgSetHorizontalScroll& from);

  inline CMsgSetHorizontalScroll& operator=(const CMsgSetHorizontalScroll& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSetHorizontalScroll& default_instance();

  void Swap(CMsgSetHorizontalScroll* other);

  // implements Message ----------------------------------------------

  CMsgSetHorizontalScroll* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSetHorizontalScroll& from);
  void MergeFrom(const CMsgSetHorizontalScroll& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // optional uint32 scroll = 2;
  inline bool has_scroll() const;
  inline void clear_scroll();
  static const int kScrollFieldNumber = 2;
  inline ::google::protobuf::uint32 scroll() const;
  inline void set_scroll(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgSetHorizontalScroll)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  ::google::protobuf::uint32 scroll_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgSetHorizontalScroll* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSetVerticalScroll : public ::google::protobuf::Message {
 public:
  CMsgSetVerticalScroll();
  virtual ~CMsgSetVerticalScroll();

  CMsgSetVerticalScroll(const CMsgSetVerticalScroll& from);

  inline CMsgSetVerticalScroll& operator=(const CMsgSetVerticalScroll& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSetVerticalScroll& default_instance();

  void Swap(CMsgSetVerticalScroll* other);

  // implements Message ----------------------------------------------

  CMsgSetVerticalScroll* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSetVerticalScroll& from);
  void MergeFrom(const CMsgSetVerticalScroll& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // optional uint32 scroll = 2;
  inline bool has_scroll() const;
  inline void clear_scroll();
  static const int kScrollFieldNumber = 2;
  inline ::google::protobuf::uint32 scroll() const;
  inline void set_scroll(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgSetVerticalScroll)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  ::google::protobuf::uint32 scroll_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgSetVerticalScroll* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSetZoomLevel : public ::google::protobuf::Message {
 public:
  CMsgSetZoomLevel();
  virtual ~CMsgSetZoomLevel();

  CMsgSetZoomLevel(const CMsgSetZoomLevel& from);

  inline CMsgSetZoomLevel& operator=(const CMsgSetZoomLevel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSetZoomLevel& default_instance();

  void Swap(CMsgSetZoomLevel* other);

  // implements Message ----------------------------------------------

  CMsgSetZoomLevel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSetZoomLevel& from);
  void MergeFrom(const CMsgSetZoomLevel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // optional uint32 zoom = 2;
  inline bool has_zoom() const;
  inline void clear_zoom();
  static const int kZoomFieldNumber = 2;
  inline ::google::protobuf::uint32 zoom() const;
  inline void set_zoom(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgSetZoomLevel)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  ::google::protobuf::uint32 zoom_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgSetZoomLevel* default_instance_;
};
// -------------------------------------------------------------------

class CMsgViewSource : public ::google::protobuf::Message {
 public:
  CMsgViewSource();
  virtual ~CMsgViewSource();

  CMsgViewSource(const CMsgViewSource& from);

  inline CMsgViewSource& operator=(const CMsgViewSource& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgViewSource& default_instance();

  void Swap(CMsgViewSource* other);

  // implements Message ----------------------------------------------

  CMsgViewSource* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgViewSource& from);
  void MergeFrom(const CMsgViewSource& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgViewSource)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgViewSource* default_instance_;
};
// -------------------------------------------------------------------

class CMsgBrowserReady : public ::google::protobuf::Message {
 public:
  CMsgBrowserReady();
  virtual ~CMsgBrowserReady();

  CMsgBrowserReady(const CMsgBrowserReady& from);

  inline CMsgBrowserReady& operator=(const CMsgBrowserReady& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgBrowserReady& default_instance();

  void Swap(CMsgBrowserReady* other);

  // implements Message ----------------------------------------------

  CMsgBrowserReady* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgBrowserReady& from);
  void MergeFrom(const CMsgBrowserReady& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgBrowserReady)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgBrowserReady* default_instance_;
};
// -------------------------------------------------------------------

class CMsgURLChanged : public ::google::protobuf::Message {
 public:
  CMsgURLChanged();
  virtual ~CMsgURLChanged();

  CMsgURLChanged(const CMsgURLChanged& from);

  inline CMsgURLChanged& operator=(const CMsgURLChanged& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgURLChanged& default_instance();

  void Swap(CMsgURLChanged* other);

  // implements Message ----------------------------------------------

  CMsgURLChanged* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgURLChanged& from);
  void MergeFrom(const CMsgURLChanged& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // optional string url = 2;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 2;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();

  // optional string postData = 3;
  inline bool has_postdata() const;
  inline void clear_postdata();
  static const int kPostDataFieldNumber = 3;
  inline const ::std::string& postdata() const;
  inline void set_postdata(const ::std::string& value);
  inline void set_postdata(const char* value);
  inline void set_postdata(const char* value, size_t size);
  inline ::std::string* mutable_postdata();

  // optional bool bIsRedirect = 4;
  inline bool has_bisredirect() const;
  inline void clear_bisredirect();
  static const int kBIsRedirectFieldNumber = 4;
  inline bool bisredirect() const;
  inline void set_bisredirect(bool value);

  // optional string pagetitle = 5;
  inline bool has_pagetitle() const;
  inline void clear_pagetitle();
  static const int kPagetitleFieldNumber = 5;
  inline const ::std::string& pagetitle() const;
  inline void set_pagetitle(const ::std::string& value);
  inline void set_pagetitle(const char* value);
  inline void set_pagetitle(const char* value, size_t size);
  inline ::std::string* mutable_pagetitle();

  // optional bool bNewNavigation = 6;
  inline bool has_bnewnavigation() const;
  inline void clear_bnewnavigation();
  static const int kBNewNavigationFieldNumber = 6;
  inline bool bnewnavigation() const;
  inline void set_bnewnavigation(bool value);

  // @@protoc_insertion_point(class_scope:CMsgURLChanged)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  ::std::string* url_;
  static const ::std::string _default_url_;
  ::std::string* postdata_;
  static const ::std::string _default_postdata_;
  bool bisredirect_;
  ::std::string* pagetitle_;
  static const ::std::string _default_pagetitle_;
  bool bnewnavigation_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgURLChanged* default_instance_;
};
// -------------------------------------------------------------------

class CHTMLHeader : public ::google::protobuf::Message {
 public:
  CHTMLHeader();
  virtual ~CHTMLHeader();

  CHTMLHeader(const CHTMLHeader& from);

  inline CHTMLHeader& operator=(const CHTMLHeader& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CHTMLHeader& default_instance();

  void Swap(CHTMLHeader* other);

  // implements Message ----------------------------------------------

  CHTMLHeader* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CHTMLHeader& from);
  void MergeFrom(const CHTMLHeader& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();

  // optional string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();

  // @@protoc_insertion_point(class_scope:CHTMLHeader)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::std::string* key_;
  static const ::std::string _default_key_;
  ::std::string* value_;
  static const ::std::string _default_value_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CHTMLHeader* default_instance_;
};
// -------------------------------------------------------------------

class CHTMLPageSecurityInfo : public ::google::protobuf::Message {
 public:
  CHTMLPageSecurityInfo();
  virtual ~CHTMLPageSecurityInfo();

  CHTMLPageSecurityInfo(const CHTMLPageSecurityInfo& from);

  inline CHTMLPageSecurityInfo& operator=(const CHTMLPageSecurityInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CHTMLPageSecurityInfo& default_instance();

  void Swap(CHTMLPageSecurityInfo* other);

  // implements Message ----------------------------------------------

  CHTMLPageSecurityInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CHTMLPageSecurityInfo& from);
  void MergeFrom(const CHTMLPageSecurityInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool bIsSecure = 1 [default = false];
  inline bool has_bissecure() const;
  inline void clear_bissecure();
  static const int kBIsSecureFieldNumber = 1;
  inline bool bissecure() const;
  inline void set_bissecure(bool value);

  // optional bool bHasCertError = 2 [default = false];
  inline bool has_bhascerterror() const;
  inline void clear_bhascerterror();
  static const int kBHasCertErrorFieldNumber = 2;
  inline bool bhascerterror() const;
  inline void set_bhascerterror(bool value);

  // optional string issuerName = 3 [default = ""];
  inline bool has_issuername() const;
  inline void clear_issuername();
  static const int kIssuerNameFieldNumber = 3;
  inline const ::std::string& issuername() const;
  inline void set_issuername(const ::std::string& value);
  inline void set_issuername(const char* value);
  inline void set_issuername(const char* value, size_t size);
  inline ::std::string* mutable_issuername();

  // optional string certName = 4 [default = ""];
  inline bool has_certname() const;
  inline void clear_certname();
  static const int kCertNameFieldNumber = 4;
  inline const ::std::string& certname() const;
  inline void set_certname(const ::std::string& value);
  inline void set_certname(const char* value);
  inline void set_certname(const char* value, size_t size);
  inline ::std::string* mutable_certname();

  // optional int32 certExpiry = 5 [default = 0];
  inline bool has_certexpiry() const;
  inline void clear_certexpiry();
  static const int kCertExpiryFieldNumber = 5;
  inline ::google::protobuf::int32 certexpiry() const;
  inline void set_certexpiry(::google::protobuf::int32 value);

  // optional int32 nCertBits = 6 [default = 0];
  inline bool has_ncertbits() const;
  inline void clear_ncertbits();
  static const int kNCertBitsFieldNumber = 6;
  inline ::google::protobuf::int32 ncertbits() const;
  inline void set_ncertbits(::google::protobuf::int32 value);

  // optional bool bIsEVCert = 7 [default = false];
  inline bool has_bisevcert() const;
  inline void clear_bisevcert();
  static const int kBIsEVCertFieldNumber = 7;
  inline bool bisevcert() const;
  inline void set_bisevcert(bool value);

  // @@protoc_insertion_point(class_scope:CHTMLPageSecurityInfo)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  bool bissecure_;
  bool bhascerterror_;
  ::std::string* issuername_;
  static const ::std::string _default_issuername_;
  ::std::string* certname_;
  static const ::std::string _default_certname_;
  ::google::protobuf::int32 certexpiry_;
  ::google::protobuf::int32 ncertbits_;
  bool bisevcert_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CHTMLPageSecurityInfo* default_instance_;
};
// -------------------------------------------------------------------

class CMsgFinishedRequest : public ::google::protobuf::Message {
 public:
  CMsgFinishedRequest();
  virtual ~CMsgFinishedRequest();

  CMsgFinishedRequest(const CMsgFinishedRequest& from);

  inline CMsgFinishedRequest& operator=(const CMsgFinishedRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgFinishedRequest& default_instance();

  void Swap(CMsgFinishedRequest* other);

  // implements Message ----------------------------------------------

  CMsgFinishedRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgFinishedRequest& from);
  void MergeFrom(const CMsgFinishedRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // optional string url = 2;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 2;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();

  // optional string pageTitle = 3;
  inline bool has_pagetitle() const;
  inline void clear_pagetitle();
  static const int kPageTitleFieldNumber = 3;
  inline const ::std::string& pagetitle() const;
  inline void set_pagetitle(const ::std::string& value);
  inline void set_pagetitle(const char* value);
  inline void set_pagetitle(const char* value, size_t size);
  inline ::std::string* mutable_pagetitle();

  // optional .CHTMLPageSecurityInfo security_info = 4;
  inline bool has_security_info() const;
  inline void clear_security_info();
  static const int kSecurityInfoFieldNumber = 4;
  inline const ::CHTMLPageSecurityInfo& security_info() const;
  inline ::CHTMLPageSecurityInfo* mutable_security_info();

  // repeated .CHTMLHeader headers = 5;
  inline int headers_size() const;
  inline void clear_headers();
  static const int kHeadersFieldNumber = 5;
  inline const ::CHTMLHeader& headers(int index) const;
  inline ::CHTMLHeader* mutable_headers(int index);
  inline ::CHTMLHeader* add_headers();
  inline const ::google::protobuf::RepeatedPtrField< ::CHTMLHeader >&
      headers() const;
  inline ::google::protobuf::RepeatedPtrField< ::CHTMLHeader >*
      mutable_headers();

  // @@protoc_insertion_point(class_scope:CMsgFinishedRequest)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  ::std::string* url_;
  static const ::std::string _default_url_;
  ::std::string* pagetitle_;
  static const ::std::string _default_pagetitle_;
  ::CHTMLPageSecurityInfo* security_info_;
  ::google::protobuf::RepeatedPtrField< ::CHTMLHeader > headers_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgFinishedRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMsgStartRequest : public ::google::protobuf::Message {
 public:
  CMsgStartRequest();
  virtual ~CMsgStartRequest();

  CMsgStartRequest(const CMsgStartRequest& from);

  inline CMsgStartRequest& operator=(const CMsgStartRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgStartRequest& default_instance();

  void Swap(CMsgStartRequest* other);

  // implements Message ----------------------------------------------

  CMsgStartRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgStartRequest& from);
  void MergeFrom(const CMsgStartRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // optional string url = 2;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 2;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();

  // optional string target = 3;
  inline bool has_target() const;
  inline void clear_target();
  static const int kTargetFieldNumber = 3;
  inline const ::std::string& target() const;
  inline void set_target(const ::std::string& value);
  inline void set_target(const char* value);
  inline void set_target(const char* value, size_t size);
  inline ::std::string* mutable_target();

  // optional string postData = 4;
  inline bool has_postdata() const;
  inline void clear_postdata();
  static const int kPostDataFieldNumber = 4;
  inline const ::std::string& postdata() const;
  inline void set_postdata(const ::std::string& value);
  inline void set_postdata(const char* value);
  inline void set_postdata(const char* value, size_t size);
  inline ::std::string* mutable_postdata();

  // optional bool bIsRedirect = 5;
  inline bool has_bisredirect() const;
  inline void clear_bisredirect();
  static const int kBIsRedirectFieldNumber = 5;
  inline bool bisredirect() const;
  inline void set_bisredirect(bool value);

  // @@protoc_insertion_point(class_scope:CMsgStartRequest)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  ::std::string* url_;
  static const ::std::string _default_url_;
  ::std::string* target_;
  static const ::std::string _default_target_;
  ::std::string* postdata_;
  static const ::std::string _default_postdata_;
  bool bisredirect_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgStartRequest* default_instance_;
};
// -------------------------------------------------------------------

class CMsgStartRequestResponse : public ::google::protobuf::Message {
 public:
  CMsgStartRequestResponse();
  virtual ~CMsgStartRequestResponse();

  CMsgStartRequestResponse(const CMsgStartRequestResponse& from);

  inline CMsgStartRequestResponse& operator=(const CMsgStartRequestResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgStartRequestResponse& default_instance();

  void Swap(CMsgStartRequestResponse* other);

  // implements Message ----------------------------------------------

  CMsgStartRequestResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgStartRequestResponse& from);
  void MergeFrom(const CMsgStartRequestResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // optional bool bAllow = 2;
  inline bool has_ballow() const;
  inline void clear_ballow();
  static const int kBAllowFieldNumber = 2;
  inline bool ballow() const;
  inline void set_ballow(bool value);

  // @@protoc_insertion_point(class_scope:CMsgStartRequestResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  bool ballow_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgStartRequestResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgShowPopup : public ::google::protobuf::Message {
 public:
  CMsgShowPopup();
  virtual ~CMsgShowPopup();

  CMsgShowPopup(const CMsgShowPopup& from);

  inline CMsgShowPopup& operator=(const CMsgShowPopup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgShowPopup& default_instance();

  void Swap(CMsgShowPopup* other);

  // implements Message ----------------------------------------------

  CMsgShowPopup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgShowPopup& from);
  void MergeFrom(const CMsgShowPopup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgShowPopup)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgShowPopup* default_instance_;
};
// -------------------------------------------------------------------

class CMsgHidePopup : public ::google::protobuf::Message {
 public:
  CMsgHidePopup();
  virtual ~CMsgHidePopup();

  CMsgHidePopup(const CMsgHidePopup& from);

  inline CMsgHidePopup& operator=(const CMsgHidePopup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgHidePopup& default_instance();

  void Swap(CMsgHidePopup* other);

  // implements Message ----------------------------------------------

  CMsgHidePopup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgHidePopup& from);
  void MergeFrom(const CMsgHidePopup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgHidePopup)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgHidePopup* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSizePopup : public ::google::protobuf::Message {
 public:
  CMsgSizePopup();
  virtual ~CMsgSizePopup();

  CMsgSizePopup(const CMsgSizePopup& from);

  inline CMsgSizePopup& operator=(const CMsgSizePopup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSizePopup& default_instance();

  void Swap(CMsgSizePopup* other);

  // implements Message ----------------------------------------------

  CMsgSizePopup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSizePopup& from);
  void MergeFrom(const CMsgSizePopup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // optional uint32 x = 2;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 2;
  inline ::google::protobuf::uint32 x() const;
  inline void set_x(::google::protobuf::uint32 value);

  // optional uint32 y = 3;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 3;
  inline ::google::protobuf::uint32 y() const;
  inline void set_y(::google::protobuf::uint32 value);

  // optional uint32 wide = 4;
  inline bool has_wide() const;
  inline void clear_wide();
  static const int kWideFieldNumber = 4;
  inline ::google::protobuf::uint32 wide() const;
  inline void set_wide(::google::protobuf::uint32 value);

  // optional uint32 tall = 5;
  inline bool has_tall() const;
  inline void clear_tall();
  static const int kTallFieldNumber = 5;
  inline ::google::protobuf::uint32 tall() const;
  inline void set_tall(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgSizePopup)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  ::google::protobuf::uint32 x_;
  ::google::protobuf::uint32 y_;
  ::google::protobuf::uint32 wide_;
  ::google::protobuf::uint32 tall_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgSizePopup* default_instance_;
};
// -------------------------------------------------------------------

class CMsgOpenNewTab : public ::google::protobuf::Message {
 public:
  CMsgOpenNewTab();
  virtual ~CMsgOpenNewTab();

  CMsgOpenNewTab(const CMsgOpenNewTab& from);

  inline CMsgOpenNewTab& operator=(const CMsgOpenNewTab& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgOpenNewTab& default_instance();

  void Swap(CMsgOpenNewTab* other);

  // implements Message ----------------------------------------------

  CMsgOpenNewTab* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgOpenNewTab& from);
  void MergeFrom(const CMsgOpenNewTab& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // optional string url = 2;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 2;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();

  // optional bool bForeground = 3;
  inline bool has_bforeground() const;
  inline void clear_bforeground();
  static const int kBForegroundFieldNumber = 3;
  inline bool bforeground() const;
  inline void set_bforeground(bool value);

  // @@protoc_insertion_point(class_scope:CMsgOpenNewTab)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  ::std::string* url_;
  static const ::std::string _default_url_;
  bool bforeground_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgOpenNewTab* default_instance_;
};
// -------------------------------------------------------------------

class CMsgOpenNewTabResponse : public ::google::protobuf::Message {
 public:
  CMsgOpenNewTabResponse();
  virtual ~CMsgOpenNewTabResponse();

  CMsgOpenNewTabResponse(const CMsgOpenNewTabResponse& from);

  inline CMsgOpenNewTabResponse& operator=(const CMsgOpenNewTabResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgOpenNewTabResponse& default_instance();

  void Swap(CMsgOpenNewTabResponse* other);

  // implements Message ----------------------------------------------

  CMsgOpenNewTabResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgOpenNewTabResponse& from);
  void MergeFrom(const CMsgOpenNewTabResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // optional bool bAllow = 2;
  inline bool has_ballow() const;
  inline void clear_ballow();
  static const int kBAllowFieldNumber = 2;
  inline bool ballow() const;
  inline void set_ballow(bool value);

  // @@protoc_insertion_point(class_scope:CMsgOpenNewTabResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  bool ballow_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgOpenNewTabResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgPopupHTMLWindow : public ::google::protobuf::Message {
 public:
  CMsgPopupHTMLWindow();
  virtual ~CMsgPopupHTMLWindow();

  CMsgPopupHTMLWindow(const CMsgPopupHTMLWindow& from);

  inline CMsgPopupHTMLWindow& operator=(const CMsgPopupHTMLWindow& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgPopupHTMLWindow& default_instance();

  void Swap(CMsgPopupHTMLWindow* other);

  // implements Message ----------------------------------------------

  CMsgPopupHTMLWindow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgPopupHTMLWindow& from);
  void MergeFrom(const CMsgPopupHTMLWindow& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // optional string url = 2;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 2;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();

  // optional uint32 x = 3;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 3;
  inline ::google::protobuf::uint32 x() const;
  inline void set_x(::google::protobuf::uint32 value);

  // optional uint32 y = 4;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 4;
  inline ::google::protobuf::uint32 y() const;
  inline void set_y(::google::protobuf::uint32 value);

  // optional uint32 wide = 5;
  inline bool has_wide() const;
  inline void clear_wide();
  static const int kWideFieldNumber = 5;
  inline ::google::protobuf::uint32 wide() const;
  inline void set_wide(::google::protobuf::uint32 value);

  // optional uint32 tall = 6;
  inline bool has_tall() const;
  inline void clear_tall();
  static const int kTallFieldNumber = 6;
  inline ::google::protobuf::uint32 tall() const;
  inline void set_tall(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgPopupHTMLWindow)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  ::std::string* url_;
  static const ::std::string _default_url_;
  ::google::protobuf::uint32 x_;
  ::google::protobuf::uint32 y_;
  ::google::protobuf::uint32 wide_;
  ::google::protobuf::uint32 tall_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgPopupHTMLWindow* default_instance_;
};
// -------------------------------------------------------------------

class CMsgPopupHTMLWindowResponse : public ::google::protobuf::Message {
 public:
  CMsgPopupHTMLWindowResponse();
  virtual ~CMsgPopupHTMLWindowResponse();

  CMsgPopupHTMLWindowResponse(const CMsgPopupHTMLWindowResponse& from);

  inline CMsgPopupHTMLWindowResponse& operator=(const CMsgPopupHTMLWindowResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgPopupHTMLWindowResponse& default_instance();

  void Swap(CMsgPopupHTMLWindowResponse* other);

  // implements Message ----------------------------------------------

  CMsgPopupHTMLWindowResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgPopupHTMLWindowResponse& from);
  void MergeFrom(const CMsgPopupHTMLWindowResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // optional bool bAllow = 2;
  inline bool has_ballow() const;
  inline void clear_ballow();
  static const int kBAllowFieldNumber = 2;
  inline bool ballow() const;
  inline void set_ballow(bool value);

  // @@protoc_insertion_point(class_scope:CMsgPopupHTMLWindowResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  bool ballow_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgPopupHTMLWindowResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSetHTMLTitle : public ::google::protobuf::Message {
 public:
  CMsgSetHTMLTitle();
  virtual ~CMsgSetHTMLTitle();

  CMsgSetHTMLTitle(const CMsgSetHTMLTitle& from);

  inline CMsgSetHTMLTitle& operator=(const CMsgSetHTMLTitle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSetHTMLTitle& default_instance();

  void Swap(CMsgSetHTMLTitle* other);

  // implements Message ----------------------------------------------

  CMsgSetHTMLTitle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSetHTMLTitle& from);
  void MergeFrom(const CMsgSetHTMLTitle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // optional string title = 2;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 2;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();

  // @@protoc_insertion_point(class_scope:CMsgSetHTMLTitle)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  ::std::string* title_;
  static const ::std::string _default_title_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgSetHTMLTitle* default_instance_;
};
// -------------------------------------------------------------------

class CMsgLoadingResource : public ::google::protobuf::Message {
 public:
  CMsgLoadingResource();
  virtual ~CMsgLoadingResource();

  CMsgLoadingResource(const CMsgLoadingResource& from);

  inline CMsgLoadingResource& operator=(const CMsgLoadingResource& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgLoadingResource& default_instance();

  void Swap(CMsgLoadingResource* other);

  // implements Message ----------------------------------------------

  CMsgLoadingResource* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgLoadingResource& from);
  void MergeFrom(const CMsgLoadingResource& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // optional string url = 2;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 2;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();

  // @@protoc_insertion_point(class_scope:CMsgLoadingResource)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  ::std::string* url_;
  static const ::std::string _default_url_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgLoadingResource* default_instance_;
};
// -------------------------------------------------------------------

class CMsgStatusText : public ::google::protobuf::Message {
 public:
  CMsgStatusText();
  virtual ~CMsgStatusText();

  CMsgStatusText(const CMsgStatusText& from);

  inline CMsgStatusText& operator=(const CMsgStatusText& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgStatusText& default_instance();

  void Swap(CMsgStatusText* other);

  // implements Message ----------------------------------------------

  CMsgStatusText* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgStatusText& from);
  void MergeFrom(const CMsgStatusText& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // optional string text = 2;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 2;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();

  // @@protoc_insertion_point(class_scope:CMsgStatusText)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  ::std::string* text_;
  static const ::std::string _default_text_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgStatusText* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSetCursor : public ::google::protobuf::Message {
 public:
  CMsgSetCursor();
  virtual ~CMsgSetCursor();

  CMsgSetCursor(const CMsgSetCursor& from);

  inline CMsgSetCursor& operator=(const CMsgSetCursor& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSetCursor& default_instance();

  void Swap(CMsgSetCursor* other);

  // implements Message ----------------------------------------------

  CMsgSetCursor* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSetCursor& from);
  void MergeFrom(const CMsgSetCursor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // optional uint32 cursor = 2;
  inline bool has_cursor() const;
  inline void clear_cursor();
  static const int kCursorFieldNumber = 2;
  inline ::google::protobuf::uint32 cursor() const;
  inline void set_cursor(::google::protobuf::uint32 value);

  // optional uint32 data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline ::google::protobuf::uint32 data() const;
  inline void set_data(::google::protobuf::uint32 value);

  // optional uint32 wide = 4;
  inline bool has_wide() const;
  inline void clear_wide();
  static const int kWideFieldNumber = 4;
  inline ::google::protobuf::uint32 wide() const;
  inline void set_wide(::google::protobuf::uint32 value);

  // optional uint32 tall = 5;
  inline bool has_tall() const;
  inline void clear_tall();
  static const int kTallFieldNumber = 5;
  inline ::google::protobuf::uint32 tall() const;
  inline void set_tall(::google::protobuf::uint32 value);

  // optional uint32 xhotspot = 6;
  inline bool has_xhotspot() const;
  inline void clear_xhotspot();
  static const int kXhotspotFieldNumber = 6;
  inline ::google::protobuf::uint32 xhotspot() const;
  inline void set_xhotspot(::google::protobuf::uint32 value);

  // optional uint32 yhotspot = 7;
  inline bool has_yhotspot() const;
  inline void clear_yhotspot();
  static const int kYhotspotFieldNumber = 7;
  inline ::google::protobuf::uint32 yhotspot() const;
  inline void set_yhotspot(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgSetCursor)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  ::google::protobuf::uint32 cursor_;
  ::google::protobuf::uint32 data_;
  ::google::protobuf::uint32 wide_;
  ::google::protobuf::uint32 tall_;
  ::google::protobuf::uint32 xhotspot_;
  ::google::protobuf::uint32 yhotspot_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgSetCursor* default_instance_;
};
// -------------------------------------------------------------------

class CMsgFileLoadDialog : public ::google::protobuf::Message {
 public:
  CMsgFileLoadDialog();
  virtual ~CMsgFileLoadDialog();

  CMsgFileLoadDialog(const CMsgFileLoadDialog& from);

  inline CMsgFileLoadDialog& operator=(const CMsgFileLoadDialog& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgFileLoadDialog& default_instance();

  void Swap(CMsgFileLoadDialog* other);

  // implements Message ----------------------------------------------

  CMsgFileLoadDialog* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgFileLoadDialog& from);
  void MergeFrom(const CMsgFileLoadDialog& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // optional string title = 2;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 2;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();

  // optional string initialFile = 3;
  inline bool has_initialfile() const;
  inline void clear_initialfile();
  static const int kInitialFileFieldNumber = 3;
  inline const ::std::string& initialfile() const;
  inline void set_initialfile(const ::std::string& value);
  inline void set_initialfile(const char* value);
  inline void set_initialfile(const char* value, size_t size);
  inline ::std::string* mutable_initialfile();

  // @@protoc_insertion_point(class_scope:CMsgFileLoadDialog)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  ::std::string* title_;
  static const ::std::string _default_title_;
  ::std::string* initialfile_;
  static const ::std::string _default_initialfile_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgFileLoadDialog* default_instance_;
};
// -------------------------------------------------------------------

class CMsgFileLoadDialogResponse : public ::google::protobuf::Message {
 public:
  CMsgFileLoadDialogResponse();
  virtual ~CMsgFileLoadDialogResponse();

  CMsgFileLoadDialogResponse(const CMsgFileLoadDialogResponse& from);

  inline CMsgFileLoadDialogResponse& operator=(const CMsgFileLoadDialogResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgFileLoadDialogResponse& default_instance();

  void Swap(CMsgFileLoadDialogResponse* other);

  // implements Message ----------------------------------------------

  CMsgFileLoadDialogResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgFileLoadDialogResponse& from);
  void MergeFrom(const CMsgFileLoadDialogResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // repeated string files = 2;
  inline int files_size() const;
  inline void clear_files();
  static const int kFilesFieldNumber = 2;
  inline const ::std::string& files(int index) const;
  inline ::std::string* mutable_files(int index);
  inline void set_files(int index, const ::std::string& value);
  inline void set_files(int index, const char* value);
  inline void set_files(int index, const char* value, size_t size);
  inline ::std::string* add_files();
  inline void add_files(const ::std::string& value);
  inline void add_files(const char* value);
  inline void add_files(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& files() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_files();

  // @@protoc_insertion_point(class_scope:CMsgFileLoadDialogResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  ::google::protobuf::RepeatedPtrField< ::std::string> files_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgFileLoadDialogResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgShowToolTip : public ::google::protobuf::Message {
 public:
  CMsgShowToolTip();
  virtual ~CMsgShowToolTip();

  CMsgShowToolTip(const CMsgShowToolTip& from);

  inline CMsgShowToolTip& operator=(const CMsgShowToolTip& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgShowToolTip& default_instance();

  void Swap(CMsgShowToolTip* other);

  // implements Message ----------------------------------------------

  CMsgShowToolTip* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgShowToolTip& from);
  void MergeFrom(const CMsgShowToolTip& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // optional string text = 2;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 2;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();

  // @@protoc_insertion_point(class_scope:CMsgShowToolTip)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  ::std::string* text_;
  static const ::std::string _default_text_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgShowToolTip* default_instance_;
};
// -------------------------------------------------------------------

class CMsgUpdateToolTip : public ::google::protobuf::Message {
 public:
  CMsgUpdateToolTip();
  virtual ~CMsgUpdateToolTip();

  CMsgUpdateToolTip(const CMsgUpdateToolTip& from);

  inline CMsgUpdateToolTip& operator=(const CMsgUpdateToolTip& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgUpdateToolTip& default_instance();

  void Swap(CMsgUpdateToolTip* other);

  // implements Message ----------------------------------------------

  CMsgUpdateToolTip* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgUpdateToolTip& from);
  void MergeFrom(const CMsgUpdateToolTip& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // optional string text = 2;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 2;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();

  // @@protoc_insertion_point(class_scope:CMsgUpdateToolTip)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  ::std::string* text_;
  static const ::std::string _default_text_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgUpdateToolTip* default_instance_;
};
// -------------------------------------------------------------------

class CMsgHideToolTip : public ::google::protobuf::Message {
 public:
  CMsgHideToolTip();
  virtual ~CMsgHideToolTip();

  CMsgHideToolTip(const CMsgHideToolTip& from);

  inline CMsgHideToolTip& operator=(const CMsgHideToolTip& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgHideToolTip& default_instance();

  void Swap(CMsgHideToolTip* other);

  // implements Message ----------------------------------------------

  CMsgHideToolTip* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgHideToolTip& from);
  void MergeFrom(const CMsgHideToolTip& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgHideToolTip)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgHideToolTip* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSearchResults : public ::google::protobuf::Message {
 public:
  CMsgSearchResults();
  virtual ~CMsgSearchResults();

  CMsgSearchResults(const CMsgSearchResults& from);

  inline CMsgSearchResults& operator=(const CMsgSearchResults& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSearchResults& default_instance();

  void Swap(CMsgSearchResults* other);

  // implements Message ----------------------------------------------

  CMsgSearchResults* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSearchResults& from);
  void MergeFrom(const CMsgSearchResults& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // optional int32 activeMatch = 2;
  inline bool has_activematch() const;
  inline void clear_activematch();
  static const int kActiveMatchFieldNumber = 2;
  inline ::google::protobuf::int32 activematch() const;
  inline void set_activematch(::google::protobuf::int32 value);

  // optional int32 results = 3;
  inline bool has_results() const;
  inline void clear_results();
  static const int kResultsFieldNumber = 3;
  inline ::google::protobuf::int32 results() const;
  inline void set_results(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CMsgSearchResults)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  ::google::protobuf::int32 activematch_;
  ::google::protobuf::int32 results_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgSearchResults* default_instance_;
};
// -------------------------------------------------------------------

class CMsgClose : public ::google::protobuf::Message {
 public:
  CMsgClose();
  virtual ~CMsgClose();

  CMsgClose(const CMsgClose& from);

  inline CMsgClose& operator=(const CMsgClose& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClose& default_instance();

  void Swap(CMsgClose* other);

  // implements Message ----------------------------------------------

  CMsgClose* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgClose& from);
  void MergeFrom(const CMsgClose& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgClose)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgClose* default_instance_;
};
// -------------------------------------------------------------------

class CMsgNeedsPaint : public ::google::protobuf::Message {
 public:
  CMsgNeedsPaint();
  virtual ~CMsgNeedsPaint();

  CMsgNeedsPaint(const CMsgNeedsPaint& from);

  inline CMsgNeedsPaint& operator=(const CMsgNeedsPaint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgNeedsPaint& default_instance();

  void Swap(CMsgNeedsPaint* other);

  // implements Message ----------------------------------------------

  CMsgNeedsPaint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgNeedsPaint& from);
  void MergeFrom(const CMsgNeedsPaint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // optional uint64 rgba = 2;
  inline bool has_rgba() const;
  inline void clear_rgba();
  static const int kRgbaFieldNumber = 2;
  inline ::google::protobuf::uint64 rgba() const;
  inline void set_rgba(::google::protobuf::uint64 value);

  // optional uint32 wide = 3;
  inline bool has_wide() const;
  inline void clear_wide();
  static const int kWideFieldNumber = 3;
  inline ::google::protobuf::uint32 wide() const;
  inline void set_wide(::google::protobuf::uint32 value);

  // optional uint32 tall = 4;
  inline bool has_tall() const;
  inline void clear_tall();
  static const int kTallFieldNumber = 4;
  inline ::google::protobuf::uint32 tall() const;
  inline void set_tall(::google::protobuf::uint32 value);

  // optional uint32 textureid = 5;
  inline bool has_textureid() const;
  inline void clear_textureid();
  static const int kTextureidFieldNumber = 5;
  inline ::google::protobuf::uint32 textureid() const;
  inline void set_textureid(::google::protobuf::uint32 value);

  // optional uint32 updatex = 6;
  inline bool has_updatex() const;
  inline void clear_updatex();
  static const int kUpdatexFieldNumber = 6;
  inline ::google::protobuf::uint32 updatex() const;
  inline void set_updatex(::google::protobuf::uint32 value);

  // optional uint32 updatey = 7;
  inline bool has_updatey() const;
  inline void clear_updatey();
  static const int kUpdateyFieldNumber = 7;
  inline ::google::protobuf::uint32 updatey() const;
  inline void set_updatey(::google::protobuf::uint32 value);

  // optional uint32 updatewide = 8;
  inline bool has_updatewide() const;
  inline void clear_updatewide();
  static const int kUpdatewideFieldNumber = 8;
  inline ::google::protobuf::uint32 updatewide() const;
  inline void set_updatewide(::google::protobuf::uint32 value);

  // optional uint32 updatetall = 9;
  inline bool has_updatetall() const;
  inline void clear_updatetall();
  static const int kUpdatetallFieldNumber = 9;
  inline ::google::protobuf::uint32 updatetall() const;
  inline void set_updatetall(::google::protobuf::uint32 value);

  // optional uint32 scrollx = 10;
  inline bool has_scrollx() const;
  inline void clear_scrollx();
  static const int kScrollxFieldNumber = 10;
  inline ::google::protobuf::uint32 scrollx() const;
  inline void set_scrollx(::google::protobuf::uint32 value);

  // optional uint32 scrolly = 11;
  inline bool has_scrolly() const;
  inline void clear_scrolly();
  static const int kScrollyFieldNumber = 11;
  inline ::google::protobuf::uint32 scrolly() const;
  inline void set_scrolly(::google::protobuf::uint32 value);

  // optional uint64 combobox_rgba = 12 [default = 0];
  inline bool has_combobox_rgba() const;
  inline void clear_combobox_rgba();
  static const int kComboboxRgbaFieldNumber = 12;
  inline ::google::protobuf::uint64 combobox_rgba() const;
  inline void set_combobox_rgba(::google::protobuf::uint64 value);

  // optional uint32 combobox_wide = 13 [default = 0];
  inline bool has_combobox_wide() const;
  inline void clear_combobox_wide();
  static const int kComboboxWideFieldNumber = 13;
  inline ::google::protobuf::uint32 combobox_wide() const;
  inline void set_combobox_wide(::google::protobuf::uint32 value);

  // optional uint32 combobox_tall = 14 [default = 0];
  inline bool has_combobox_tall() const;
  inline void clear_combobox_tall();
  static const int kComboboxTallFieldNumber = 14;
  inline ::google::protobuf::uint32 combobox_tall() const;
  inline void set_combobox_tall(::google::protobuf::uint32 value);

  // optional uint32 pageserial = 15;
  inline bool has_pageserial() const;
  inline void clear_pageserial();
  static const int kPageserialFieldNumber = 15;
  inline ::google::protobuf::uint32 pageserial() const;
  inline void set_pageserial(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgNeedsPaint)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  ::google::protobuf::uint64 rgba_;
  ::google::protobuf::uint32 wide_;
  ::google::protobuf::uint32 tall_;
  ::google::protobuf::uint32 textureid_;
  ::google::protobuf::uint32 updatex_;
  ::google::protobuf::uint32 updatey_;
  ::google::protobuf::uint32 updatewide_;
  ::google::protobuf::uint32 updatetall_;
  ::google::protobuf::uint32 scrollx_;
  ::google::protobuf::uint32 scrolly_;
  ::google::protobuf::uint64 combobox_rgba_;
  ::google::protobuf::uint32 combobox_wide_;
  ::google::protobuf::uint32 combobox_tall_;
  ::google::protobuf::uint32 pageserial_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgNeedsPaint* default_instance_;
};
// -------------------------------------------------------------------

class CMsgNeedsPaintResponse : public ::google::protobuf::Message {
 public:
  CMsgNeedsPaintResponse();
  virtual ~CMsgNeedsPaintResponse();

  CMsgNeedsPaintResponse(const CMsgNeedsPaintResponse& from);

  inline CMsgNeedsPaintResponse& operator=(const CMsgNeedsPaintResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgNeedsPaintResponse& default_instance();

  void Swap(CMsgNeedsPaintResponse* other);

  // implements Message ----------------------------------------------

  CMsgNeedsPaintResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgNeedsPaintResponse& from);
  void MergeFrom(const CMsgNeedsPaintResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // optional uint32 textureid = 2;
  inline bool has_textureid() const;
  inline void clear_textureid();
  static const int kTextureidFieldNumber = 2;
  inline ::google::protobuf::uint32 textureid() const;
  inline void set_textureid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgNeedsPaintResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  ::google::protobuf::uint32 textureid_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgNeedsPaintResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGetZoom : public ::google::protobuf::Message {
 public:
  CMsgGetZoom();
  virtual ~CMsgGetZoom();

  CMsgGetZoom(const CMsgGetZoom& from);

  inline CMsgGetZoom& operator=(const CMsgGetZoom& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGetZoom& default_instance();

  void Swap(CMsgGetZoom* other);

  // implements Message ----------------------------------------------

  CMsgGetZoom* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGetZoom& from);
  void MergeFrom(const CMsgGetZoom& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgGetZoom)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgGetZoom* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGetZoomResponse : public ::google::protobuf::Message {
 public:
  CMsgGetZoomResponse();
  virtual ~CMsgGetZoomResponse();

  CMsgGetZoomResponse(const CMsgGetZoomResponse& from);

  inline CMsgGetZoomResponse& operator=(const CMsgGetZoomResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGetZoomResponse& default_instance();

  void Swap(CMsgGetZoomResponse* other);

  // implements Message ----------------------------------------------

  CMsgGetZoomResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGetZoomResponse& from);
  void MergeFrom(const CMsgGetZoomResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // optional float zoom = 2;
  inline bool has_zoom() const;
  inline void clear_zoom();
  static const int kZoomFieldNumber = 2;
  inline float zoom() const;
  inline void set_zoom(float value);

  // @@protoc_insertion_point(class_scope:CMsgGetZoomResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  float zoom_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgGetZoomResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgLinkAtPosition : public ::google::protobuf::Message {
 public:
  CMsgLinkAtPosition();
  virtual ~CMsgLinkAtPosition();

  CMsgLinkAtPosition(const CMsgLinkAtPosition& from);

  inline CMsgLinkAtPosition& operator=(const CMsgLinkAtPosition& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgLinkAtPosition& default_instance();

  void Swap(CMsgLinkAtPosition* other);

  // implements Message ----------------------------------------------

  CMsgLinkAtPosition* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgLinkAtPosition& from);
  void MergeFrom(const CMsgLinkAtPosition& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // optional uint32 x = 2;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 2;
  inline ::google::protobuf::uint32 x() const;
  inline void set_x(::google::protobuf::uint32 value);

  // optional uint32 y = 3;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 3;
  inline ::google::protobuf::uint32 y() const;
  inline void set_y(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgLinkAtPosition)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  ::google::protobuf::uint32 x_;
  ::google::protobuf::uint32 y_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgLinkAtPosition* default_instance_;
};
// -------------------------------------------------------------------

class CMsgLinkAtPositionResponse : public ::google::protobuf::Message {
 public:
  CMsgLinkAtPositionResponse();
  virtual ~CMsgLinkAtPositionResponse();

  CMsgLinkAtPositionResponse(const CMsgLinkAtPositionResponse& from);

  inline CMsgLinkAtPositionResponse& operator=(const CMsgLinkAtPositionResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgLinkAtPositionResponse& default_instance();

  void Swap(CMsgLinkAtPositionResponse* other);

  // implements Message ----------------------------------------------

  CMsgLinkAtPositionResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgLinkAtPositionResponse& from);
  void MergeFrom(const CMsgLinkAtPositionResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // optional uint32 x = 2;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 2;
  inline ::google::protobuf::uint32 x() const;
  inline void set_x(::google::protobuf::uint32 value);

  // optional uint32 y = 3;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 3;
  inline ::google::protobuf::uint32 y() const;
  inline void set_y(::google::protobuf::uint32 value);

  // optional string url = 4;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 4;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();

  // optional bool blivelink = 5;
  inline bool has_blivelink() const;
  inline void clear_blivelink();
  static const int kBlivelinkFieldNumber = 5;
  inline bool blivelink() const;
  inline void set_blivelink(bool value);

  // optional bool binput = 6;
  inline bool has_binput() const;
  inline void clear_binput();
  static const int kBinputFieldNumber = 6;
  inline bool binput() const;
  inline void set_binput(bool value);

  // @@protoc_insertion_point(class_scope:CMsgLinkAtPositionResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  ::google::protobuf::uint32 x_;
  ::google::protobuf::uint32 y_;
  ::std::string* url_;
  static const ::std::string _default_url_;
  bool blivelink_;
  bool binput_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgLinkAtPositionResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgZoomToElementAtPosition : public ::google::protobuf::Message {
 public:
  CMsgZoomToElementAtPosition();
  virtual ~CMsgZoomToElementAtPosition();

  CMsgZoomToElementAtPosition(const CMsgZoomToElementAtPosition& from);

  inline CMsgZoomToElementAtPosition& operator=(const CMsgZoomToElementAtPosition& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgZoomToElementAtPosition& default_instance();

  void Swap(CMsgZoomToElementAtPosition* other);

  // implements Message ----------------------------------------------

  CMsgZoomToElementAtPosition* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgZoomToElementAtPosition& from);
  void MergeFrom(const CMsgZoomToElementAtPosition& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // optional uint32 x = 2;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 2;
  inline ::google::protobuf::uint32 x() const;
  inline void set_x(::google::protobuf::uint32 value);

  // optional uint32 y = 3;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 3;
  inline ::google::protobuf::uint32 y() const;
  inline void set_y(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgZoomToElementAtPosition)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  ::google::protobuf::uint32 x_;
  ::google::protobuf::uint32 y_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgZoomToElementAtPosition* default_instance_;
};
// -------------------------------------------------------------------

class CMsgZoomToElementAtPositionResponse : public ::google::protobuf::Message {
 public:
  CMsgZoomToElementAtPositionResponse();
  virtual ~CMsgZoomToElementAtPositionResponse();

  CMsgZoomToElementAtPositionResponse(const CMsgZoomToElementAtPositionResponse& from);

  inline CMsgZoomToElementAtPositionResponse& operator=(const CMsgZoomToElementAtPositionResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgZoomToElementAtPositionResponse& default_instance();

  void Swap(CMsgZoomToElementAtPositionResponse* other);

  // implements Message ----------------------------------------------

  CMsgZoomToElementAtPositionResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgZoomToElementAtPositionResponse& from);
  void MergeFrom(const CMsgZoomToElementAtPositionResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // optional sint32 initial_x = 2;
  inline bool has_initial_x() const;
  inline void clear_initial_x();
  static const int kInitialXFieldNumber = 2;
  inline ::google::protobuf::int32 initial_x() const;
  inline void set_initial_x(::google::protobuf::int32 value);

  // optional sint32 initial_y = 3;
  inline bool has_initial_y() const;
  inline void clear_initial_y();
  static const int kInitialYFieldNumber = 3;
  inline ::google::protobuf::int32 initial_y() const;
  inline void set_initial_y(::google::protobuf::int32 value);

  // optional uint32 initial_width = 4;
  inline bool has_initial_width() const;
  inline void clear_initial_width();
  static const int kInitialWidthFieldNumber = 4;
  inline ::google::protobuf::uint32 initial_width() const;
  inline void set_initial_width(::google::protobuf::uint32 value);

  // optional uint32 initial_height = 5;
  inline bool has_initial_height() const;
  inline void clear_initial_height();
  static const int kInitialHeightFieldNumber = 5;
  inline ::google::protobuf::uint32 initial_height() const;
  inline void set_initial_height(::google::protobuf::uint32 value);

  // optional sint32 final_x = 6;
  inline bool has_final_x() const;
  inline void clear_final_x();
  static const int kFinalXFieldNumber = 6;
  inline ::google::protobuf::int32 final_x() const;
  inline void set_final_x(::google::protobuf::int32 value);

  // optional sint32 final_y = 7;
  inline bool has_final_y() const;
  inline void clear_final_y();
  static const int kFinalYFieldNumber = 7;
  inline ::google::protobuf::int32 final_y() const;
  inline void set_final_y(::google::protobuf::int32 value);

  // optional uint32 final_width = 8;
  inline bool has_final_width() const;
  inline void clear_final_width();
  static const int kFinalWidthFieldNumber = 8;
  inline ::google::protobuf::uint32 final_width() const;
  inline void set_final_width(::google::protobuf::uint32 value);

  // optional uint32 final_height = 9;
  inline bool has_final_height() const;
  inline void clear_final_height();
  static const int kFinalHeightFieldNumber = 9;
  inline ::google::protobuf::uint32 final_height() const;
  inline void set_final_height(::google::protobuf::uint32 value);

  // optional float zoom = 10;
  inline bool has_zoom() const;
  inline void clear_zoom();
  static const int kZoomFieldNumber = 10;
  inline float zoom() const;
  inline void set_zoom(float value);

  // @@protoc_insertion_point(class_scope:CMsgZoomToElementAtPositionResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  ::google::protobuf::int32 initial_x_;
  ::google::protobuf::int32 initial_y_;
  ::google::protobuf::uint32 initial_width_;
  ::google::protobuf::uint32 initial_height_;
  ::google::protobuf::int32 final_x_;
  ::google::protobuf::int32 final_y_;
  ::google::protobuf::uint32 final_width_;
  ::google::protobuf::uint32 final_height_;
  float zoom_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgZoomToElementAtPositionResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgScalePageToValue : public ::google::protobuf::Message {
 public:
  CMsgScalePageToValue();
  virtual ~CMsgScalePageToValue();

  CMsgScalePageToValue(const CMsgScalePageToValue& from);

  inline CMsgScalePageToValue& operator=(const CMsgScalePageToValue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgScalePageToValue& default_instance();

  void Swap(CMsgScalePageToValue* other);

  // implements Message ----------------------------------------------

  CMsgScalePageToValue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgScalePageToValue& from);
  void MergeFrom(const CMsgScalePageToValue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // optional float scale = 2;
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 2;
  inline float scale() const;
  inline void set_scale(float value);

  // optional float x = 3;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 3;
  inline float x() const;
  inline void set_x(float value);

  // optional float y = 4;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 4;
  inline float y() const;
  inline void set_y(float value);

  // @@protoc_insertion_point(class_scope:CMsgScalePageToValue)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  float scale_;
  float x_;
  float y_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgScalePageToValue* default_instance_;
};
// -------------------------------------------------------------------

class CMsgScalePageToValueResponse : public ::google::protobuf::Message {
 public:
  CMsgScalePageToValueResponse();
  virtual ~CMsgScalePageToValueResponse();

  CMsgScalePageToValueResponse(const CMsgScalePageToValueResponse& from);

  inline CMsgScalePageToValueResponse& operator=(const CMsgScalePageToValueResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgScalePageToValueResponse& default_instance();

  void Swap(CMsgScalePageToValueResponse* other);

  // implements Message ----------------------------------------------

  CMsgScalePageToValueResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgScalePageToValueResponse& from);
  void MergeFrom(const CMsgScalePageToValueResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // optional float zoom = 2;
  inline bool has_zoom() const;
  inline void clear_zoom();
  static const int kZoomFieldNumber = 2;
  inline float zoom() const;
  inline void set_zoom(float value);

  // optional int32 width_delta = 3;
  inline bool has_width_delta() const;
  inline void clear_width_delta();
  static const int kWidthDeltaFieldNumber = 3;
  inline ::google::protobuf::int32 width_delta() const;
  inline void set_width_delta(::google::protobuf::int32 value);

  // optional int32 height_delta = 4;
  inline bool has_height_delta() const;
  inline void clear_height_delta();
  static const int kHeightDeltaFieldNumber = 4;
  inline ::google::protobuf::int32 height_delta() const;
  inline void set_height_delta(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CMsgScalePageToValueResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  float zoom_;
  ::google::protobuf::int32 width_delta_;
  ::google::protobuf::int32 height_delta_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgScalePageToValueResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSavePageToJPEG : public ::google::protobuf::Message {
 public:
  CMsgSavePageToJPEG();
  virtual ~CMsgSavePageToJPEG();

  CMsgSavePageToJPEG(const CMsgSavePageToJPEG& from);

  inline CMsgSavePageToJPEG& operator=(const CMsgSavePageToJPEG& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSavePageToJPEG& default_instance();

  void Swap(CMsgSavePageToJPEG* other);

  // implements Message ----------------------------------------------

  CMsgSavePageToJPEG* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSavePageToJPEG& from);
  void MergeFrom(const CMsgSavePageToJPEG& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // optional string url = 2;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 2;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();

  // optional string filename = 3;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFilenameFieldNumber = 3;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();

  // optional uint32 width = 4;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 4;
  inline ::google::protobuf::uint32 width() const;
  inline void set_width(::google::protobuf::uint32 value);

  // optional uint32 height = 5;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 5;
  inline ::google::protobuf::uint32 height() const;
  inline void set_height(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgSavePageToJPEG)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  ::std::string* url_;
  static const ::std::string _default_url_;
  ::std::string* filename_;
  static const ::std::string _default_filename_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgSavePageToJPEG* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSavePageToJPEGResponse : public ::google::protobuf::Message {
 public:
  CMsgSavePageToJPEGResponse();
  virtual ~CMsgSavePageToJPEGResponse();

  CMsgSavePageToJPEGResponse(const CMsgSavePageToJPEGResponse& from);

  inline CMsgSavePageToJPEGResponse& operator=(const CMsgSavePageToJPEGResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSavePageToJPEGResponse& default_instance();

  void Swap(CMsgSavePageToJPEGResponse* other);

  // implements Message ----------------------------------------------

  CMsgSavePageToJPEGResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSavePageToJPEGResponse& from);
  void MergeFrom(const CMsgSavePageToJPEGResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // optional string url = 2;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 2;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();

  // optional string filename = 3;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFilenameFieldNumber = 3;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();

  // @@protoc_insertion_point(class_scope:CMsgSavePageToJPEGResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  ::std::string* url_;
  static const ::std::string _default_url_;
  ::std::string* filename_;
  static const ::std::string _default_filename_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgSavePageToJPEGResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgJSAlert : public ::google::protobuf::Message {
 public:
  CMsgJSAlert();
  virtual ~CMsgJSAlert();

  CMsgJSAlert(const CMsgJSAlert& from);

  inline CMsgJSAlert& operator=(const CMsgJSAlert& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgJSAlert& default_instance();

  void Swap(CMsgJSAlert* other);

  // implements Message ----------------------------------------------

  CMsgJSAlert* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgJSAlert& from);
  void MergeFrom(const CMsgJSAlert& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // optional string message = 2;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 2;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();

  // @@protoc_insertion_point(class_scope:CMsgJSAlert)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  ::std::string* message_;
  static const ::std::string _default_message_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgJSAlert* default_instance_;
};
// -------------------------------------------------------------------

class CMsgJSConfirm : public ::google::protobuf::Message {
 public:
  CMsgJSConfirm();
  virtual ~CMsgJSConfirm();

  CMsgJSConfirm(const CMsgJSConfirm& from);

  inline CMsgJSConfirm& operator=(const CMsgJSConfirm& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgJSConfirm& default_instance();

  void Swap(CMsgJSConfirm* other);

  // implements Message ----------------------------------------------

  CMsgJSConfirm* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgJSConfirm& from);
  void MergeFrom(const CMsgJSConfirm& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // optional string message = 2;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 2;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();

  // @@protoc_insertion_point(class_scope:CMsgJSConfirm)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  ::std::string* message_;
  static const ::std::string _default_message_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgJSConfirm* default_instance_;
};
// -------------------------------------------------------------------

class CMsgJSDialogResponse : public ::google::protobuf::Message {
 public:
  CMsgJSDialogResponse();
  virtual ~CMsgJSDialogResponse();

  CMsgJSDialogResponse(const CMsgJSDialogResponse& from);

  inline CMsgJSDialogResponse& operator=(const CMsgJSDialogResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgJSDialogResponse& default_instance();

  void Swap(CMsgJSDialogResponse* other);

  // implements Message ----------------------------------------------

  CMsgJSDialogResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgJSDialogResponse& from);
  void MergeFrom(const CMsgJSDialogResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // optional bool result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline bool result() const;
  inline void set_result(bool value);

  // @@protoc_insertion_point(class_scope:CMsgJSDialogResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  bool result_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgJSDialogResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgCanGoBackAndForward : public ::google::protobuf::Message {
 public:
  CMsgCanGoBackAndForward();
  virtual ~CMsgCanGoBackAndForward();

  CMsgCanGoBackAndForward(const CMsgCanGoBackAndForward& from);

  inline CMsgCanGoBackAndForward& operator=(const CMsgCanGoBackAndForward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgCanGoBackAndForward& default_instance();

  void Swap(CMsgCanGoBackAndForward* other);

  // implements Message ----------------------------------------------

  CMsgCanGoBackAndForward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgCanGoBackAndForward& from);
  void MergeFrom(const CMsgCanGoBackAndForward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // optional bool bgoback = 2;
  inline bool has_bgoback() const;
  inline void clear_bgoback();
  static const int kBgobackFieldNumber = 2;
  inline bool bgoback() const;
  inline void set_bgoback(bool value);

  // optional bool bgoforward = 3;
  inline bool has_bgoforward() const;
  inline void clear_bgoforward();
  static const int kBgoforwardFieldNumber = 3;
  inline bool bgoforward() const;
  inline void set_bgoforward(bool value);

  // @@protoc_insertion_point(class_scope:CMsgCanGoBackAndForward)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  bool bgoback_;
  bool bgoforward_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgCanGoBackAndForward* default_instance_;
};
// -------------------------------------------------------------------

class CMsgOpenSteamURL : public ::google::protobuf::Message {
 public:
  CMsgOpenSteamURL();
  virtual ~CMsgOpenSteamURL();

  CMsgOpenSteamURL(const CMsgOpenSteamURL& from);

  inline CMsgOpenSteamURL& operator=(const CMsgOpenSteamURL& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgOpenSteamURL& default_instance();

  void Swap(CMsgOpenSteamURL* other);

  // implements Message ----------------------------------------------

  CMsgOpenSteamURL* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgOpenSteamURL& from);
  void MergeFrom(const CMsgOpenSteamURL& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // optional string url = 2;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 2;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();

  // @@protoc_insertion_point(class_scope:CMsgOpenSteamURL)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  ::std::string* url_;
  static const ::std::string _default_url_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgOpenSteamURL* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSetCookie : public ::google::protobuf::Message {
 public:
  CMsgSetCookie();
  virtual ~CMsgSetCookie();

  CMsgSetCookie(const CMsgSetCookie& from);

  inline CMsgSetCookie& operator=(const CMsgSetCookie& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSetCookie& default_instance();

  void Swap(CMsgSetCookie* other);

  // implements Message ----------------------------------------------

  CMsgSetCookie* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSetCookie& from);
  void MergeFrom(const CMsgSetCookie& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();

  // optional string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();

  // optional string path = 3;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 3;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();

  // optional string host = 4;
  inline bool has_host() const;
  inline void clear_host();
  static const int kHostFieldNumber = 4;
  inline const ::std::string& host() const;
  inline void set_host(const ::std::string& value);
  inline void set_host(const char* value);
  inline void set_host(const char* value, size_t size);
  inline ::std::string* mutable_host();

  // optional uint32 expires = 5;
  inline bool has_expires() const;
  inline void clear_expires();
  static const int kExpiresFieldNumber = 5;
  inline ::google::protobuf::uint32 expires() const;
  inline void set_expires(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgSetCookie)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::std::string* key_;
  static const ::std::string _default_key_;
  ::std::string* value_;
  static const ::std::string _default_value_;
  ::std::string* path_;
  static const ::std::string _default_path_;
  ::std::string* host_;
  static const ::std::string _default_host_;
  ::google::protobuf::uint32 expires_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgSetCookie* default_instance_;
};
// -------------------------------------------------------------------

class CMsgSetTargetFrameRate : public ::google::protobuf::Message {
 public:
  CMsgSetTargetFrameRate();
  virtual ~CMsgSetTargetFrameRate();

  CMsgSetTargetFrameRate(const CMsgSetTargetFrameRate& from);

  inline CMsgSetTargetFrameRate& operator=(const CMsgSetTargetFrameRate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSetTargetFrameRate& default_instance();

  void Swap(CMsgSetTargetFrameRate* other);

  // implements Message ----------------------------------------------

  CMsgSetTargetFrameRate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgSetTargetFrameRate& from);
  void MergeFrom(const CMsgSetTargetFrameRate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 nTargetFrameRate = 1;
  inline bool has_ntargetframerate() const;
  inline void clear_ntargetframerate();
  static const int kNTargetFrameRateFieldNumber = 1;
  inline ::google::protobuf::uint32 ntargetframerate() const;
  inline void set_ntargetframerate(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgSetTargetFrameRate)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 ntargetframerate_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgSetTargetFrameRate* default_instance_;
};
// -------------------------------------------------------------------

class CMsgFullRepaint : public ::google::protobuf::Message {
 public:
  CMsgFullRepaint();
  virtual ~CMsgFullRepaint();

  CMsgFullRepaint(const CMsgFullRepaint& from);

  inline CMsgFullRepaint& operator=(const CMsgFullRepaint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgFullRepaint& default_instance();

  void Swap(CMsgFullRepaint* other);

  // implements Message ----------------------------------------------

  CMsgFullRepaint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgFullRepaint& from);
  void MergeFrom(const CMsgFullRepaint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgFullRepaint)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgFullRepaint* default_instance_;
};
// -------------------------------------------------------------------

class CMsgRequestFullScreen : public ::google::protobuf::Message {
 public:
  CMsgRequestFullScreen();
  virtual ~CMsgRequestFullScreen();

  CMsgRequestFullScreen(const CMsgRequestFullScreen& from);

  inline CMsgRequestFullScreen& operator=(const CMsgRequestFullScreen& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgRequestFullScreen& default_instance();

  void Swap(CMsgRequestFullScreen* other);

  // implements Message ----------------------------------------------

  CMsgRequestFullScreen* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgRequestFullScreen& from);
  void MergeFrom(const CMsgRequestFullScreen& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgRequestFullScreen)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgRequestFullScreen* default_instance_;
};
// -------------------------------------------------------------------

class CMsgRequestFullScreenResponse : public ::google::protobuf::Message {
 public:
  CMsgRequestFullScreenResponse();
  virtual ~CMsgRequestFullScreenResponse();

  CMsgRequestFullScreenResponse(const CMsgRequestFullScreenResponse& from);

  inline CMsgRequestFullScreenResponse& operator=(const CMsgRequestFullScreenResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgRequestFullScreenResponse& default_instance();

  void Swap(CMsgRequestFullScreenResponse* other);

  // implements Message ----------------------------------------------

  CMsgRequestFullScreenResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgRequestFullScreenResponse& from);
  void MergeFrom(const CMsgRequestFullScreenResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // optional bool ballow = 2;
  inline bool has_ballow() const;
  inline void clear_ballow();
  static const int kBallowFieldNumber = 2;
  inline bool ballow() const;
  inline void set_ballow(bool value);

  // @@protoc_insertion_point(class_scope:CMsgRequestFullScreenResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  bool ballow_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgRequestFullScreenResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgExitFullScreen : public ::google::protobuf::Message {
 public:
  CMsgExitFullScreen();
  virtual ~CMsgExitFullScreen();

  CMsgExitFullScreen(const CMsgExitFullScreen& from);

  inline CMsgExitFullScreen& operator=(const CMsgExitFullScreen& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgExitFullScreen& default_instance();

  void Swap(CMsgExitFullScreen* other);

  // implements Message ----------------------------------------------

  CMsgExitFullScreen* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgExitFullScreen& from);
  void MergeFrom(const CMsgExitFullScreen& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgExitFullScreen)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgExitFullScreen* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGetCookiesForURL : public ::google::protobuf::Message {
 public:
  CMsgGetCookiesForURL();
  virtual ~CMsgGetCookiesForURL();

  CMsgGetCookiesForURL(const CMsgGetCookiesForURL& from);

  inline CMsgGetCookiesForURL& operator=(const CMsgGetCookiesForURL& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGetCookiesForURL& default_instance();

  void Swap(CMsgGetCookiesForURL* other);

  // implements Message ----------------------------------------------

  CMsgGetCookiesForURL* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGetCookiesForURL& from);
  void MergeFrom(const CMsgGetCookiesForURL& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // optional string url = 2;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 2;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();

  // @@protoc_insertion_point(class_scope:CMsgGetCookiesForURL)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  ::std::string* url_;
  static const ::std::string _default_url_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgGetCookiesForURL* default_instance_;
};
// -------------------------------------------------------------------

class CCookie : public ::google::protobuf::Message {
 public:
  CCookie();
  virtual ~CCookie();

  CCookie(const CCookie& from);

  inline CCookie& operator=(const CCookie& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CCookie& default_instance();

  void Swap(CCookie* other);

  // implements Message ----------------------------------------------

  CCookie* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CCookie& from);
  void MergeFrom(const CCookie& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();

  // optional string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();

  // optional string domain = 3;
  inline bool has_domain() const;
  inline void clear_domain();
  static const int kDomainFieldNumber = 3;
  inline const ::std::string& domain() const;
  inline void set_domain(const ::std::string& value);
  inline void set_domain(const char* value);
  inline void set_domain(const char* value, size_t size);
  inline ::std::string* mutable_domain();

  // optional string path = 4;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 4;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();

  // @@protoc_insertion_point(class_scope:CCookie)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::std::string* name_;
  static const ::std::string _default_name_;
  ::std::string* value_;
  static const ::std::string _default_value_;
  ::std::string* domain_;
  static const ::std::string _default_domain_;
  ::std::string* path_;
  static const ::std::string _default_path_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CCookie* default_instance_;
};
// -------------------------------------------------------------------

class CMsgGetCookiesForURLResponse : public ::google::protobuf::Message {
 public:
  CMsgGetCookiesForURLResponse();
  virtual ~CMsgGetCookiesForURLResponse();

  CMsgGetCookiesForURLResponse(const CMsgGetCookiesForURLResponse& from);

  inline CMsgGetCookiesForURLResponse& operator=(const CMsgGetCookiesForURLResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGetCookiesForURLResponse& default_instance();

  void Swap(CMsgGetCookiesForURLResponse* other);

  // implements Message ----------------------------------------------

  CMsgGetCookiesForURLResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgGetCookiesForURLResponse& from);
  void MergeFrom(const CMsgGetCookiesForURLResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // optional string url = 2;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 2;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();

  // repeated .CCookie cookies = 3;
  inline int cookies_size() const;
  inline void clear_cookies();
  static const int kCookiesFieldNumber = 3;
  inline const ::CCookie& cookies(int index) const;
  inline ::CCookie* mutable_cookies(int index);
  inline ::CCookie* add_cookies();
  inline const ::google::protobuf::RepeatedPtrField< ::CCookie >&
      cookies() const;
  inline ::google::protobuf::RepeatedPtrField< ::CCookie >*
      mutable_cookies();

  // @@protoc_insertion_point(class_scope:CMsgGetCookiesForURLResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  ::std::string* url_;
  static const ::std::string _default_url_;
  ::google::protobuf::RepeatedPtrField< ::CCookie > cookies_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgGetCookiesForURLResponse* default_instance_;
};
// -------------------------------------------------------------------

class CMsgNodeHasFocus : public ::google::protobuf::Message {
 public:
  CMsgNodeHasFocus();
  virtual ~CMsgNodeHasFocus();

  CMsgNodeHasFocus(const CMsgNodeHasFocus& from);

  inline CMsgNodeHasFocus& operator=(const CMsgNodeHasFocus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgNodeHasFocus& default_instance();

  void Swap(CMsgNodeHasFocus* other);

  // implements Message ----------------------------------------------

  CMsgNodeHasFocus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgNodeHasFocus& from);
  void MergeFrom(const CMsgNodeHasFocus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // optional bool bInput = 2;
  inline bool has_binput() const;
  inline void clear_binput();
  static const int kBInputFieldNumber = 2;
  inline bool binput() const;
  inline void set_binput(bool value);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();

  // optional string elementtagname = 4;
  inline bool has_elementtagname() const;
  inline void clear_elementtagname();
  static const int kElementtagnameFieldNumber = 4;
  inline const ::std::string& elementtagname() const;
  inline void set_elementtagname(const ::std::string& value);
  inline void set_elementtagname(const char* value);
  inline void set_elementtagname(const char* value, size_t size);
  inline ::std::string* mutable_elementtagname();

  // optional string searchbuttontext = 5;
  inline bool has_searchbuttontext() const;
  inline void clear_searchbuttontext();
  static const int kSearchbuttontextFieldNumber = 5;
  inline const ::std::string& searchbuttontext() const;
  inline void set_searchbuttontext(const ::std::string& value);
  inline void set_searchbuttontext(const char* value);
  inline void set_searchbuttontext(const char* value, size_t size);
  inline ::std::string* mutable_searchbuttontext();

  // optional bool bHasMultipleInputs = 6;
  inline bool has_bhasmultipleinputs() const;
  inline void clear_bhasmultipleinputs();
  static const int kBHasMultipleInputsFieldNumber = 6;
  inline bool bhasmultipleinputs() const;
  inline void set_bhasmultipleinputs(bool value);

  // optional string input_type = 7;
  inline bool has_input_type() const;
  inline void clear_input_type();
  static const int kInputTypeFieldNumber = 7;
  inline const ::std::string& input_type() const;
  inline void set_input_type(const ::std::string& value);
  inline void set_input_type(const char* value);
  inline void set_input_type(const char* value, size_t size);
  inline ::std::string* mutable_input_type();

  // @@protoc_insertion_point(class_scope:CMsgNodeHasFocus)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  bool binput_;
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::std::string* elementtagname_;
  static const ::std::string _default_elementtagname_;
  ::std::string* searchbuttontext_;
  static const ::std::string _default_searchbuttontext_;
  bool bhasmultipleinputs_;
  ::std::string* input_type_;
  static const ::std::string _default_input_type_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgNodeHasFocus* default_instance_;
};
// -------------------------------------------------------------------

class CMsgZoomToFocusedElement : public ::google::protobuf::Message {
 public:
  CMsgZoomToFocusedElement();
  virtual ~CMsgZoomToFocusedElement();

  CMsgZoomToFocusedElement(const CMsgZoomToFocusedElement& from);

  inline CMsgZoomToFocusedElement& operator=(const CMsgZoomToFocusedElement& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgZoomToFocusedElement& default_instance();

  void Swap(CMsgZoomToFocusedElement* other);

  // implements Message ----------------------------------------------

  CMsgZoomToFocusedElement* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgZoomToFocusedElement& from);
  void MergeFrom(const CMsgZoomToFocusedElement& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // optional uint32 leftoffset = 2 [default = 0];
  inline bool has_leftoffset() const;
  inline void clear_leftoffset();
  static const int kLeftoffsetFieldNumber = 2;
  inline ::google::protobuf::uint32 leftoffset() const;
  inline void set_leftoffset(::google::protobuf::uint32 value);

  // optional uint32 topoffset = 3 [default = 0];
  inline bool has_topoffset() const;
  inline void clear_topoffset();
  static const int kTopoffsetFieldNumber = 3;
  inline ::google::protobuf::uint32 topoffset() const;
  inline void set_topoffset(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgZoomToFocusedElement)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  ::google::protobuf::uint32 leftoffset_;
  ::google::protobuf::uint32 topoffset_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgZoomToFocusedElement* default_instance_;
};
// -------------------------------------------------------------------

class CMsgCloseFullScreenFlashIfOpen : public ::google::protobuf::Message {
 public:
  CMsgCloseFullScreenFlashIfOpen();
  virtual ~CMsgCloseFullScreenFlashIfOpen();

  CMsgCloseFullScreenFlashIfOpen(const CMsgCloseFullScreenFlashIfOpen& from);

  inline CMsgCloseFullScreenFlashIfOpen& operator=(const CMsgCloseFullScreenFlashIfOpen& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgCloseFullScreenFlashIfOpen& default_instance();

  void Swap(CMsgCloseFullScreenFlashIfOpen* other);

  // implements Message ----------------------------------------------

  CMsgCloseFullScreenFlashIfOpen* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgCloseFullScreenFlashIfOpen& from);
  void MergeFrom(const CMsgCloseFullScreenFlashIfOpen& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgCloseFullScreenFlashIfOpen)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgCloseFullScreenFlashIfOpen* default_instance_;
};
// -------------------------------------------------------------------

class CMsgPauseFullScreenFlashMovieIfOpen : public ::google::protobuf::Message {
 public:
  CMsgPauseFullScreenFlashMovieIfOpen();
  virtual ~CMsgPauseFullScreenFlashMovieIfOpen();

  CMsgPauseFullScreenFlashMovieIfOpen(const CMsgPauseFullScreenFlashMovieIfOpen& from);

  inline CMsgPauseFullScreenFlashMovieIfOpen& operator=(const CMsgPauseFullScreenFlashMovieIfOpen& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgPauseFullScreenFlashMovieIfOpen& default_instance();

  void Swap(CMsgPauseFullScreenFlashMovieIfOpen* other);

  // implements Message ----------------------------------------------

  CMsgPauseFullScreenFlashMovieIfOpen* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgPauseFullScreenFlashMovieIfOpen& from);
  void MergeFrom(const CMsgPauseFullScreenFlashMovieIfOpen& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgPauseFullScreenFlashMovieIfOpen)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgPauseFullScreenFlashMovieIfOpen* default_instance_;
};
// -------------------------------------------------------------------

class CMsgFocusedNodeText : public ::google::protobuf::Message {
 public:
  CMsgFocusedNodeText();
  virtual ~CMsgFocusedNodeText();

  CMsgFocusedNodeText(const CMsgFocusedNodeText& from);

  inline CMsgFocusedNodeText& operator=(const CMsgFocusedNodeText& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgFocusedNodeText& default_instance();

  void Swap(CMsgFocusedNodeText* other);

  // implements Message ----------------------------------------------

  CMsgFocusedNodeText* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgFocusedNodeText& from);
  void MergeFrom(const CMsgFocusedNodeText& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgFocusedNodeText)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgFocusedNodeText* default_instance_;
};
// -------------------------------------------------------------------

class CMsgFocusedNodeTextResponse : public ::google::protobuf::Message {
 public:
  CMsgFocusedNodeTextResponse();
  virtual ~CMsgFocusedNodeTextResponse();

  CMsgFocusedNodeTextResponse(const CMsgFocusedNodeTextResponse& from);

  inline CMsgFocusedNodeTextResponse& operator=(const CMsgFocusedNodeTextResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgFocusedNodeTextResponse& default_instance();

  void Swap(CMsgFocusedNodeTextResponse* other);

  // implements Message ----------------------------------------------

  CMsgFocusedNodeTextResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgFocusedNodeTextResponse& from);
  void MergeFrom(const CMsgFocusedNodeTextResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 browser_handle = 1;
  inline bool has_browser_handle() const;
  inline void clear_browser_handle();
  static const int kBrowserHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 browser_handle() const;
  inline void set_browser_handle(::google::protobuf::uint32 value);

  // optional string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();

  // @@protoc_insertion_point(class_scope:CMsgFocusedNodeTextResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;

  ::google::protobuf::uint32 browser_handle_;
  ::std::string* value_;
  static const ::std::string _default_value_;
  friend void  protobuf_AddDesc_htmlmessages_2eproto();
  friend void protobuf_AssignDesc_htmlmessages_2eproto();
  friend void protobuf_ShutdownFile_htmlmessages_2eproto();

  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }

  void InitAsDefaultInstance();
  static CMsgFocusedNodeTextResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// CMsgKeyUp

// optional uint32 browser_handle = 1;
inline bool CMsgKeyUp::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgKeyUp::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgKeyUp::browser_handle() const {
  return browser_handle_;
}
inline void CMsgKeyUp::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// optional uint32 keyCode = 2;
inline bool CMsgKeyUp::has_keycode() const {
  return _has_bit(1);
}
inline void CMsgKeyUp::clear_keycode() {
  keycode_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMsgKeyUp::keycode() const {
  return keycode_;
}
inline void CMsgKeyUp::set_keycode(::google::protobuf::uint32 value) {
  _set_bit(1);
  keycode_ = value;
}

// optional uint32 modifiers = 3;
inline bool CMsgKeyUp::has_modifiers() const {
  return _has_bit(2);
}
inline void CMsgKeyUp::clear_modifiers() {
  modifiers_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMsgKeyUp::modifiers() const {
  return modifiers_;
}
inline void CMsgKeyUp::set_modifiers(::google::protobuf::uint32 value) {
  _set_bit(2);
  modifiers_ = value;
}

// -------------------------------------------------------------------

// CMsgKeyDown

// optional uint32 browser_handle = 1;
inline bool CMsgKeyDown::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgKeyDown::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgKeyDown::browser_handle() const {
  return browser_handle_;
}
inline void CMsgKeyDown::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// optional uint32 keyCode = 2;
inline bool CMsgKeyDown::has_keycode() const {
  return _has_bit(1);
}
inline void CMsgKeyDown::clear_keycode() {
  keycode_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMsgKeyDown::keycode() const {
  return keycode_;
}
inline void CMsgKeyDown::set_keycode(::google::protobuf::uint32 value) {
  _set_bit(1);
  keycode_ = value;
}

// optional uint32 modifiers = 3;
inline bool CMsgKeyDown::has_modifiers() const {
  return _has_bit(2);
}
inline void CMsgKeyDown::clear_modifiers() {
  modifiers_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMsgKeyDown::modifiers() const {
  return modifiers_;
}
inline void CMsgKeyDown::set_modifiers(::google::protobuf::uint32 value) {
  _set_bit(2);
  modifiers_ = value;
}

// -------------------------------------------------------------------

// CMsgKeyChar

// optional uint32 browser_handle = 1;
inline bool CMsgKeyChar::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgKeyChar::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgKeyChar::browser_handle() const {
  return browser_handle_;
}
inline void CMsgKeyChar::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// optional uint32 unichar = 2;
inline bool CMsgKeyChar::has_unichar() const {
  return _has_bit(1);
}
inline void CMsgKeyChar::clear_unichar() {
  unichar_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMsgKeyChar::unichar() const {
  return unichar_;
}
inline void CMsgKeyChar::set_unichar(::google::protobuf::uint32 value) {
  _set_bit(1);
  unichar_ = value;
}

// -------------------------------------------------------------------

// CMsgMouseDown

// optional uint32 browser_handle = 1;
inline bool CMsgMouseDown::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgMouseDown::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgMouseDown::browser_handle() const {
  return browser_handle_;
}
inline void CMsgMouseDown::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// optional uint32 mouse_button = 2;
inline bool CMsgMouseDown::has_mouse_button() const {
  return _has_bit(1);
}
inline void CMsgMouseDown::clear_mouse_button() {
  mouse_button_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMsgMouseDown::mouse_button() const {
  return mouse_button_;
}
inline void CMsgMouseDown::set_mouse_button(::google::protobuf::uint32 value) {
  _set_bit(1);
  mouse_button_ = value;
}

// -------------------------------------------------------------------

// CMsgMouseUp

// optional uint32 browser_handle = 1;
inline bool CMsgMouseUp::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgMouseUp::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgMouseUp::browser_handle() const {
  return browser_handle_;
}
inline void CMsgMouseUp::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// optional uint32 mouse_button = 2;
inline bool CMsgMouseUp::has_mouse_button() const {
  return _has_bit(1);
}
inline void CMsgMouseUp::clear_mouse_button() {
  mouse_button_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMsgMouseUp::mouse_button() const {
  return mouse_button_;
}
inline void CMsgMouseUp::set_mouse_button(::google::protobuf::uint32 value) {
  _set_bit(1);
  mouse_button_ = value;
}

// -------------------------------------------------------------------

// CMsgMouseDblClick

// optional uint32 browser_handle = 1;
inline bool CMsgMouseDblClick::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgMouseDblClick::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgMouseDblClick::browser_handle() const {
  return browser_handle_;
}
inline void CMsgMouseDblClick::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// optional uint32 mouse_button = 2;
inline bool CMsgMouseDblClick::has_mouse_button() const {
  return _has_bit(1);
}
inline void CMsgMouseDblClick::clear_mouse_button() {
  mouse_button_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMsgMouseDblClick::mouse_button() const {
  return mouse_button_;
}
inline void CMsgMouseDblClick::set_mouse_button(::google::protobuf::uint32 value) {
  _set_bit(1);
  mouse_button_ = value;
}

// -------------------------------------------------------------------

// CMsgMouseWheel

// optional uint32 browser_handle = 1;
inline bool CMsgMouseWheel::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgMouseWheel::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgMouseWheel::browser_handle() const {
  return browser_handle_;
}
inline void CMsgMouseWheel::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// optional int32 delta = 2;
inline bool CMsgMouseWheel::has_delta() const {
  return _has_bit(1);
}
inline void CMsgMouseWheel::clear_delta() {
  delta_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 CMsgMouseWheel::delta() const {
  return delta_;
}
inline void CMsgMouseWheel::set_delta(::google::protobuf::int32 value) {
  _set_bit(1);
  delta_ = value;
}

// -------------------------------------------------------------------

// CMsgMouseMove

// optional uint32 browser_handle = 1;
inline bool CMsgMouseMove::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgMouseMove::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgMouseMove::browser_handle() const {
  return browser_handle_;
}
inline void CMsgMouseMove::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// optional int32 x = 2;
inline bool CMsgMouseMove::has_x() const {
  return _has_bit(1);
}
inline void CMsgMouseMove::clear_x() {
  x_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 CMsgMouseMove::x() const {
  return x_;
}
inline void CMsgMouseMove::set_x(::google::protobuf::int32 value) {
  _set_bit(1);
  x_ = value;
}

// optional int32 y = 3;
inline bool CMsgMouseMove::has_y() const {
  return _has_bit(2);
}
inline void CMsgMouseMove::clear_y() {
  y_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 CMsgMouseMove::y() const {
  return y_;
}
inline void CMsgMouseMove::set_y(::google::protobuf::int32 value) {
  _set_bit(2);
  y_ = value;
}

// -------------------------------------------------------------------

// CMsgMouseLeave

// optional uint32 browser_handle = 1;
inline bool CMsgMouseLeave::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgMouseLeave::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgMouseLeave::browser_handle() const {
  return browser_handle_;
}
inline void CMsgMouseLeave::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// -------------------------------------------------------------------

// CMsgBrowserCreate

// optional uint32 request_id = 1;
inline bool CMsgBrowserCreate::has_request_id() const {
  return _has_bit(0);
}
inline void CMsgBrowserCreate::clear_request_id() {
  request_id_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgBrowserCreate::request_id() const {
  return request_id_;
}
inline void CMsgBrowserCreate::set_request_id(::google::protobuf::uint32 value) {
  _set_bit(0);
  request_id_ = value;
}

// optional bool popup = 2 [default = false];
inline bool CMsgBrowserCreate::has_popup() const {
  return _has_bit(1);
}
inline void CMsgBrowserCreate::clear_popup() {
  popup_ = false;
  _clear_bit(1);
}
inline bool CMsgBrowserCreate::popup() const {
  return popup_;
}
inline void CMsgBrowserCreate::set_popup(bool value) {
  _set_bit(1);
  popup_ = value;
}

// optional string useragent = 3;
inline bool CMsgBrowserCreate::has_useragent() const {
  return _has_bit(2);
}
inline void CMsgBrowserCreate::clear_useragent() {
  if (useragent_ != &_default_useragent_) {
    useragent_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& CMsgBrowserCreate::useragent() const {
  return *useragent_;
}
inline void CMsgBrowserCreate::set_useragent(const ::std::string& value) {
  _set_bit(2);
  if (useragent_ == &_default_useragent_) {
    useragent_ = new ::std::string;
  }
  useragent_->assign(value);
}
inline void CMsgBrowserCreate::set_useragent(const char* value) {
  _set_bit(2);
  if (useragent_ == &_default_useragent_) {
    useragent_ = new ::std::string;
  }
  useragent_->assign(value);
}
inline void CMsgBrowserCreate::set_useragent(const char* value, size_t size) {
  _set_bit(2);
  if (useragent_ == &_default_useragent_) {
    useragent_ = new ::std::string;
  }
  useragent_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgBrowserCreate::mutable_useragent() {
  _set_bit(2);
  if (useragent_ == &_default_useragent_) {
    useragent_ = new ::std::string;
  }
  return useragent_;
}

// -------------------------------------------------------------------

// CMsgBrowserCreateResponse

// optional uint32 browser_handle = 1;
inline bool CMsgBrowserCreateResponse::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgBrowserCreateResponse::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgBrowserCreateResponse::browser_handle() const {
  return browser_handle_;
}
inline void CMsgBrowserCreateResponse::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// optional uint32 request_id = 2;
inline bool CMsgBrowserCreateResponse::has_request_id() const {
  return _has_bit(1);
}
inline void CMsgBrowserCreateResponse::clear_request_id() {
  request_id_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMsgBrowserCreateResponse::request_id() const {
  return request_id_;
}
inline void CMsgBrowserCreateResponse::set_request_id(::google::protobuf::uint32 value) {
  _set_bit(1);
  request_id_ = value;
}

// -------------------------------------------------------------------

// CMsgBrowserRemove

// optional uint32 browser_handle = 1;
inline bool CMsgBrowserRemove::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgBrowserRemove::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgBrowserRemove::browser_handle() const {
  return browser_handle_;
}
inline void CMsgBrowserRemove::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// -------------------------------------------------------------------

// CMsgBrowserErrorStrings

// optional uint32 browser_handle = 1;
inline bool CMsgBrowserErrorStrings::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgBrowserErrorStrings::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgBrowserErrorStrings::browser_handle() const {
  return browser_handle_;
}
inline void CMsgBrowserErrorStrings::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// optional string title = 2;
inline bool CMsgBrowserErrorStrings::has_title() const {
  return _has_bit(1);
}
inline void CMsgBrowserErrorStrings::clear_title() {
  if (title_ != &_default_title_) {
    title_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& CMsgBrowserErrorStrings::title() const {
  return *title_;
}
inline void CMsgBrowserErrorStrings::set_title(const ::std::string& value) {
  _set_bit(1);
  if (title_ == &_default_title_) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void CMsgBrowserErrorStrings::set_title(const char* value) {
  _set_bit(1);
  if (title_ == &_default_title_) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void CMsgBrowserErrorStrings::set_title(const char* value, size_t size) {
  _set_bit(1);
  if (title_ == &_default_title_) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgBrowserErrorStrings::mutable_title() {
  _set_bit(1);
  if (title_ == &_default_title_) {
    title_ = new ::std::string;
  }
  return title_;
}

// optional string header = 3;
inline bool CMsgBrowserErrorStrings::has_header() const {
  return _has_bit(2);
}
inline void CMsgBrowserErrorStrings::clear_header() {
  if (header_ != &_default_header_) {
    header_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& CMsgBrowserErrorStrings::header() const {
  return *header_;
}
inline void CMsgBrowserErrorStrings::set_header(const ::std::string& value) {
  _set_bit(2);
  if (header_ == &_default_header_) {
    header_ = new ::std::string;
  }
  header_->assign(value);
}
inline void CMsgBrowserErrorStrings::set_header(const char* value) {
  _set_bit(2);
  if (header_ == &_default_header_) {
    header_ = new ::std::string;
  }
  header_->assign(value);
}
inline void CMsgBrowserErrorStrings::set_header(const char* value, size_t size) {
  _set_bit(2);
  if (header_ == &_default_header_) {
    header_ = new ::std::string;
  }
  header_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgBrowserErrorStrings::mutable_header() {
  _set_bit(2);
  if (header_ == &_default_header_) {
    header_ = new ::std::string;
  }
  return header_;
}

// optional string cache_miss = 4;
inline bool CMsgBrowserErrorStrings::has_cache_miss() const {
  return _has_bit(3);
}
inline void CMsgBrowserErrorStrings::clear_cache_miss() {
  if (cache_miss_ != &_default_cache_miss_) {
    cache_miss_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& CMsgBrowserErrorStrings::cache_miss() const {
  return *cache_miss_;
}
inline void CMsgBrowserErrorStrings::set_cache_miss(const ::std::string& value) {
  _set_bit(3);
  if (cache_miss_ == &_default_cache_miss_) {
    cache_miss_ = new ::std::string;
  }
  cache_miss_->assign(value);
}
inline void CMsgBrowserErrorStrings::set_cache_miss(const char* value) {
  _set_bit(3);
  if (cache_miss_ == &_default_cache_miss_) {
    cache_miss_ = new ::std::string;
  }
  cache_miss_->assign(value);
}
inline void CMsgBrowserErrorStrings::set_cache_miss(const char* value, size_t size) {
  _set_bit(3);
  if (cache_miss_ == &_default_cache_miss_) {
    cache_miss_ = new ::std::string;
  }
  cache_miss_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgBrowserErrorStrings::mutable_cache_miss() {
  _set_bit(3);
  if (cache_miss_ == &_default_cache_miss_) {
    cache_miss_ = new ::std::string;
  }
  return cache_miss_;
}

// optional string bad_url = 5;
inline bool CMsgBrowserErrorStrings::has_bad_url() const {
  return _has_bit(4);
}
inline void CMsgBrowserErrorStrings::clear_bad_url() {
  if (bad_url_ != &_default_bad_url_) {
    bad_url_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& CMsgBrowserErrorStrings::bad_url() const {
  return *bad_url_;
}
inline void CMsgBrowserErrorStrings::set_bad_url(const ::std::string& value) {
  _set_bit(4);
  if (bad_url_ == &_default_bad_url_) {
    bad_url_ = new ::std::string;
  }
  bad_url_->assign(value);
}
inline void CMsgBrowserErrorStrings::set_bad_url(const char* value) {
  _set_bit(4);
  if (bad_url_ == &_default_bad_url_) {
    bad_url_ = new ::std::string;
  }
  bad_url_->assign(value);
}
inline void CMsgBrowserErrorStrings::set_bad_url(const char* value, size_t size) {
  _set_bit(4);
  if (bad_url_ == &_default_bad_url_) {
    bad_url_ = new ::std::string;
  }
  bad_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgBrowserErrorStrings::mutable_bad_url() {
  _set_bit(4);
  if (bad_url_ == &_default_bad_url_) {
    bad_url_ = new ::std::string;
  }
  return bad_url_;
}

// optional string connection_problem = 6;
inline bool CMsgBrowserErrorStrings::has_connection_problem() const {
  return _has_bit(5);
}
inline void CMsgBrowserErrorStrings::clear_connection_problem() {
  if (connection_problem_ != &_default_connection_problem_) {
    connection_problem_->clear();
  }
  _clear_bit(5);
}
inline const ::std::string& CMsgBrowserErrorStrings::connection_problem() const {
  return *connection_problem_;
}
inline void CMsgBrowserErrorStrings::set_connection_problem(const ::std::string& value) {
  _set_bit(5);
  if (connection_problem_ == &_default_connection_problem_) {
    connection_problem_ = new ::std::string;
  }
  connection_problem_->assign(value);
}
inline void CMsgBrowserErrorStrings::set_connection_problem(const char* value) {
  _set_bit(5);
  if (connection_problem_ == &_default_connection_problem_) {
    connection_problem_ = new ::std::string;
  }
  connection_problem_->assign(value);
}
inline void CMsgBrowserErrorStrings::set_connection_problem(const char* value, size_t size) {
  _set_bit(5);
  if (connection_problem_ == &_default_connection_problem_) {
    connection_problem_ = new ::std::string;
  }
  connection_problem_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgBrowserErrorStrings::mutable_connection_problem() {
  _set_bit(5);
  if (connection_problem_ == &_default_connection_problem_) {
    connection_problem_ = new ::std::string;
  }
  return connection_problem_;
}

// optional string proxy_problem = 7;
inline bool CMsgBrowserErrorStrings::has_proxy_problem() const {
  return _has_bit(6);
}
inline void CMsgBrowserErrorStrings::clear_proxy_problem() {
  if (proxy_problem_ != &_default_proxy_problem_) {
    proxy_problem_->clear();
  }
  _clear_bit(6);
}
inline const ::std::string& CMsgBrowserErrorStrings::proxy_problem() const {
  return *proxy_problem_;
}
inline void CMsgBrowserErrorStrings::set_proxy_problem(const ::std::string& value) {
  _set_bit(6);
  if (proxy_problem_ == &_default_proxy_problem_) {
    proxy_problem_ = new ::std::string;
  }
  proxy_problem_->assign(value);
}
inline void CMsgBrowserErrorStrings::set_proxy_problem(const char* value) {
  _set_bit(6);
  if (proxy_problem_ == &_default_proxy_problem_) {
    proxy_problem_ = new ::std::string;
  }
  proxy_problem_->assign(value);
}
inline void CMsgBrowserErrorStrings::set_proxy_problem(const char* value, size_t size) {
  _set_bit(6);
  if (proxy_problem_ == &_default_proxy_problem_) {
    proxy_problem_ = new ::std::string;
  }
  proxy_problem_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgBrowserErrorStrings::mutable_proxy_problem() {
  _set_bit(6);
  if (proxy_problem_ == &_default_proxy_problem_) {
    proxy_problem_ = new ::std::string;
  }
  return proxy_problem_;
}

// optional string unknown = 8;
inline bool CMsgBrowserErrorStrings::has_unknown() const {
  return _has_bit(7);
}
inline void CMsgBrowserErrorStrings::clear_unknown() {
  if (unknown_ != &_default_unknown_) {
    unknown_->clear();
  }
  _clear_bit(7);
}
inline const ::std::string& CMsgBrowserErrorStrings::unknown() const {
  return *unknown_;
}
inline void CMsgBrowserErrorStrings::set_unknown(const ::std::string& value) {
  _set_bit(7);
  if (unknown_ == &_default_unknown_) {
    unknown_ = new ::std::string;
  }
  unknown_->assign(value);
}
inline void CMsgBrowserErrorStrings::set_unknown(const char* value) {
  _set_bit(7);
  if (unknown_ == &_default_unknown_) {
    unknown_ = new ::std::string;
  }
  unknown_->assign(value);
}
inline void CMsgBrowserErrorStrings::set_unknown(const char* value, size_t size) {
  _set_bit(7);
  if (unknown_ == &_default_unknown_) {
    unknown_ = new ::std::string;
  }
  unknown_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgBrowserErrorStrings::mutable_unknown() {
  _set_bit(7);
  if (unknown_ == &_default_unknown_) {
    unknown_ = new ::std::string;
  }
  return unknown_;
}

// -------------------------------------------------------------------

// CMsgBrowserSize

// optional uint32 browser_handle = 1;
inline bool CMsgBrowserSize::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgBrowserSize::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgBrowserSize::browser_handle() const {
  return browser_handle_;
}
inline void CMsgBrowserSize::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// optional uint32 width = 2;
inline bool CMsgBrowserSize::has_width() const {
  return _has_bit(1);
}
inline void CMsgBrowserSize::clear_width() {
  width_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMsgBrowserSize::width() const {
  return width_;
}
inline void CMsgBrowserSize::set_width(::google::protobuf::uint32 value) {
  _set_bit(1);
  width_ = value;
}

// optional uint32 height = 3;
inline bool CMsgBrowserSize::has_height() const {
  return _has_bit(2);
}
inline void CMsgBrowserSize::clear_height() {
  height_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMsgBrowserSize::height() const {
  return height_;
}
inline void CMsgBrowserSize::set_height(::google::protobuf::uint32 value) {
  _set_bit(2);
  height_ = value;
}

// -------------------------------------------------------------------

// CMsgBrowserPosition

// optional uint32 browser_handle = 1;
inline bool CMsgBrowserPosition::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgBrowserPosition::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgBrowserPosition::browser_handle() const {
  return browser_handle_;
}
inline void CMsgBrowserPosition::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// optional uint32 x = 2;
inline bool CMsgBrowserPosition::has_x() const {
  return _has_bit(1);
}
inline void CMsgBrowserPosition::clear_x() {
  x_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMsgBrowserPosition::x() const {
  return x_;
}
inline void CMsgBrowserPosition::set_x(::google::protobuf::uint32 value) {
  _set_bit(1);
  x_ = value;
}

// optional uint32 y = 3;
inline bool CMsgBrowserPosition::has_y() const {
  return _has_bit(2);
}
inline void CMsgBrowserPosition::clear_y() {
  y_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMsgBrowserPosition::y() const {
  return y_;
}
inline void CMsgBrowserPosition::set_y(::google::protobuf::uint32 value) {
  _set_bit(2);
  y_ = value;
}

// -------------------------------------------------------------------

// CMsgPostURL

// optional uint32 browser_handle = 1;
inline bool CMsgPostURL::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgPostURL::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgPostURL::browser_handle() const {
  return browser_handle_;
}
inline void CMsgPostURL::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// optional string url = 2;
inline bool CMsgPostURL::has_url() const {
  return _has_bit(1);
}
inline void CMsgPostURL::clear_url() {
  if (url_ != &_default_url_) {
    url_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& CMsgPostURL::url() const {
  return *url_;
}
inline void CMsgPostURL::set_url(const ::std::string& value) {
  _set_bit(1);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void CMsgPostURL::set_url(const char* value) {
  _set_bit(1);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void CMsgPostURL::set_url(const char* value, size_t size) {
  _set_bit(1);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgPostURL::mutable_url() {
  _set_bit(1);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  return url_;
}

// optional string post = 3;
inline bool CMsgPostURL::has_post() const {
  return _has_bit(2);
}
inline void CMsgPostURL::clear_post() {
  if (post_ != &_default_post_) {
    post_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& CMsgPostURL::post() const {
  return *post_;
}
inline void CMsgPostURL::set_post(const ::std::string& value) {
  _set_bit(2);
  if (post_ == &_default_post_) {
    post_ = new ::std::string;
  }
  post_->assign(value);
}
inline void CMsgPostURL::set_post(const char* value) {
  _set_bit(2);
  if (post_ == &_default_post_) {
    post_ = new ::std::string;
  }
  post_->assign(value);
}
inline void CMsgPostURL::set_post(const char* value, size_t size) {
  _set_bit(2);
  if (post_ == &_default_post_) {
    post_ = new ::std::string;
  }
  post_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgPostURL::mutable_post() {
  _set_bit(2);
  if (post_ == &_default_post_) {
    post_ = new ::std::string;
  }
  return post_;
}

// optional uint32 pageserial = 4;
inline bool CMsgPostURL::has_pageserial() const {
  return _has_bit(3);
}
inline void CMsgPostURL::clear_pageserial() {
  pageserial_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 CMsgPostURL::pageserial() const {
  return pageserial_;
}
inline void CMsgPostURL::set_pageserial(::google::protobuf::uint32 value) {
  _set_bit(3);
  pageserial_ = value;
}

// -------------------------------------------------------------------

// CMsgAddHeader

// optional uint32 browser_handle = 1;
inline bool CMsgAddHeader::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgAddHeader::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgAddHeader::browser_handle() const {
  return browser_handle_;
}
inline void CMsgAddHeader::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// optional string key = 2;
inline bool CMsgAddHeader::has_key() const {
  return _has_bit(1);
}
inline void CMsgAddHeader::clear_key() {
  if (key_ != &_default_key_) {
    key_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& CMsgAddHeader::key() const {
  return *key_;
}
inline void CMsgAddHeader::set_key(const ::std::string& value) {
  _set_bit(1);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void CMsgAddHeader::set_key(const char* value) {
  _set_bit(1);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void CMsgAddHeader::set_key(const char* value, size_t size) {
  _set_bit(1);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgAddHeader::mutable_key() {
  _set_bit(1);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  return key_;
}

// optional string value = 3;
inline bool CMsgAddHeader::has_value() const {
  return _has_bit(2);
}
inline void CMsgAddHeader::clear_value() {
  if (value_ != &_default_value_) {
    value_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& CMsgAddHeader::value() const {
  return *value_;
}
inline void CMsgAddHeader::set_value(const ::std::string& value) {
  _set_bit(2);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void CMsgAddHeader::set_value(const char* value) {
  _set_bit(2);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void CMsgAddHeader::set_value(const char* value, size_t size) {
  _set_bit(2);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgAddHeader::mutable_value() {
  _set_bit(2);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  return value_;
}

// -------------------------------------------------------------------

// CMsgStopLoad

// optional uint32 browser_handle = 1;
inline bool CMsgStopLoad::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgStopLoad::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgStopLoad::browser_handle() const {
  return browser_handle_;
}
inline void CMsgStopLoad::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// -------------------------------------------------------------------

// CMsgReload

// optional uint32 browser_handle = 1;
inline bool CMsgReload::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgReload::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgReload::browser_handle() const {
  return browser_handle_;
}
inline void CMsgReload::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// -------------------------------------------------------------------

// CMsgGoForward

// optional uint32 browser_handle = 1;
inline bool CMsgGoForward::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgGoForward::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgGoForward::browser_handle() const {
  return browser_handle_;
}
inline void CMsgGoForward::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// -------------------------------------------------------------------

// CMsgGoBack

// optional uint32 browser_handle = 1;
inline bool CMsgGoBack::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgGoBack::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgGoBack::browser_handle() const {
  return browser_handle_;
}
inline void CMsgGoBack::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// -------------------------------------------------------------------

// CMsgCopy

// optional uint32 browser_handle = 1;
inline bool CMsgCopy::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgCopy::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgCopy::browser_handle() const {
  return browser_handle_;
}
inline void CMsgCopy::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// -------------------------------------------------------------------

// CMsgPaste

// optional uint32 browser_handle = 1;
inline bool CMsgPaste::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgPaste::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgPaste::browser_handle() const {
  return browser_handle_;
}
inline void CMsgPaste::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// -------------------------------------------------------------------

// CMsgExecuteJavaScript

// optional uint32 browser_handle = 1;
inline bool CMsgExecuteJavaScript::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgExecuteJavaScript::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgExecuteJavaScript::browser_handle() const {
  return browser_handle_;
}
inline void CMsgExecuteJavaScript::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// optional string script = 2;
inline bool CMsgExecuteJavaScript::has_script() const {
  return _has_bit(1);
}
inline void CMsgExecuteJavaScript::clear_script() {
  if (script_ != &_default_script_) {
    script_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& CMsgExecuteJavaScript::script() const {
  return *script_;
}
inline void CMsgExecuteJavaScript::set_script(const ::std::string& value) {
  _set_bit(1);
  if (script_ == &_default_script_) {
    script_ = new ::std::string;
  }
  script_->assign(value);
}
inline void CMsgExecuteJavaScript::set_script(const char* value) {
  _set_bit(1);
  if (script_ == &_default_script_) {
    script_ = new ::std::string;
  }
  script_->assign(value);
}
inline void CMsgExecuteJavaScript::set_script(const char* value, size_t size) {
  _set_bit(1);
  if (script_ == &_default_script_) {
    script_ = new ::std::string;
  }
  script_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgExecuteJavaScript::mutable_script() {
  _set_bit(1);
  if (script_ == &_default_script_) {
    script_ = new ::std::string;
  }
  return script_;
}

// -------------------------------------------------------------------

// CMsgSetFocus

// optional uint32 browser_handle = 1;
inline bool CMsgSetFocus::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgSetFocus::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgSetFocus::browser_handle() const {
  return browser_handle_;
}
inline void CMsgSetFocus::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// optional bool focus = 2;
inline bool CMsgSetFocus::has_focus() const {
  return _has_bit(1);
}
inline void CMsgSetFocus::clear_focus() {
  focus_ = false;
  _clear_bit(1);
}
inline bool CMsgSetFocus::focus() const {
  return focus_;
}
inline void CMsgSetFocus::set_focus(bool value) {
  _set_bit(1);
  focus_ = value;
}

// -------------------------------------------------------------------

// CMsgHorizontalScrollBarSize

// optional uint32 browser_handle = 1;
inline bool CMsgHorizontalScrollBarSize::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgHorizontalScrollBarSize::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgHorizontalScrollBarSize::browser_handle() const {
  return browser_handle_;
}
inline void CMsgHorizontalScrollBarSize::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// -------------------------------------------------------------------

// CMsgHorizontalScrollBarSizeResponse

// optional uint32 browser_handle = 1;
inline bool CMsgHorizontalScrollBarSizeResponse::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgHorizontalScrollBarSizeResponse::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgHorizontalScrollBarSizeResponse::browser_handle() const {
  return browser_handle_;
}
inline void CMsgHorizontalScrollBarSizeResponse::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// optional uint32 x = 2;
inline bool CMsgHorizontalScrollBarSizeResponse::has_x() const {
  return _has_bit(1);
}
inline void CMsgHorizontalScrollBarSizeResponse::clear_x() {
  x_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMsgHorizontalScrollBarSizeResponse::x() const {
  return x_;
}
inline void CMsgHorizontalScrollBarSizeResponse::set_x(::google::protobuf::uint32 value) {
  _set_bit(1);
  x_ = value;
}

// optional uint32 y = 3;
inline bool CMsgHorizontalScrollBarSizeResponse::has_y() const {
  return _has_bit(2);
}
inline void CMsgHorizontalScrollBarSizeResponse::clear_y() {
  y_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMsgHorizontalScrollBarSizeResponse::y() const {
  return y_;
}
inline void CMsgHorizontalScrollBarSizeResponse::set_y(::google::protobuf::uint32 value) {
  _set_bit(2);
  y_ = value;
}

// optional uint32 wide = 4;
inline bool CMsgHorizontalScrollBarSizeResponse::has_wide() const {
  return _has_bit(3);
}
inline void CMsgHorizontalScrollBarSizeResponse::clear_wide() {
  wide_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 CMsgHorizontalScrollBarSizeResponse::wide() const {
  return wide_;
}
inline void CMsgHorizontalScrollBarSizeResponse::set_wide(::google::protobuf::uint32 value) {
  _set_bit(3);
  wide_ = value;
}

// optional uint32 tall = 5;
inline bool CMsgHorizontalScrollBarSizeResponse::has_tall() const {
  return _has_bit(4);
}
inline void CMsgHorizontalScrollBarSizeResponse::clear_tall() {
  tall_ = 0u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 CMsgHorizontalScrollBarSizeResponse::tall() const {
  return tall_;
}
inline void CMsgHorizontalScrollBarSizeResponse::set_tall(::google::protobuf::uint32 value) {
  _set_bit(4);
  tall_ = value;
}

// optional uint32 scroll_max = 6;
inline bool CMsgHorizontalScrollBarSizeResponse::has_scroll_max() const {
  return _has_bit(5);
}
inline void CMsgHorizontalScrollBarSizeResponse::clear_scroll_max() {
  scroll_max_ = 0u;
  _clear_bit(5);
}
inline ::google::protobuf::uint32 CMsgHorizontalScrollBarSizeResponse::scroll_max() const {
  return scroll_max_;
}
inline void CMsgHorizontalScrollBarSizeResponse::set_scroll_max(::google::protobuf::uint32 value) {
  _set_bit(5);
  scroll_max_ = value;
}

// optional uint32 scroll = 7;
inline bool CMsgHorizontalScrollBarSizeResponse::has_scroll() const {
  return _has_bit(6);
}
inline void CMsgHorizontalScrollBarSizeResponse::clear_scroll() {
  scroll_ = 0u;
  _clear_bit(6);
}
inline ::google::protobuf::uint32 CMsgHorizontalScrollBarSizeResponse::scroll() const {
  return scroll_;
}
inline void CMsgHorizontalScrollBarSizeResponse::set_scroll(::google::protobuf::uint32 value) {
  _set_bit(6);
  scroll_ = value;
}

// optional float zoom = 8;
inline bool CMsgHorizontalScrollBarSizeResponse::has_zoom() const {
  return _has_bit(7);
}
inline void CMsgHorizontalScrollBarSizeResponse::clear_zoom() {
  zoom_ = 0;
  _clear_bit(7);
}
inline float CMsgHorizontalScrollBarSizeResponse::zoom() const {
  return zoom_;
}
inline void CMsgHorizontalScrollBarSizeResponse::set_zoom(float value) {
  _set_bit(7);
  zoom_ = value;
}

// optional bool visible = 9;
inline bool CMsgHorizontalScrollBarSizeResponse::has_visible() const {
  return _has_bit(8);
}
inline void CMsgHorizontalScrollBarSizeResponse::clear_visible() {
  visible_ = false;
  _clear_bit(8);
}
inline bool CMsgHorizontalScrollBarSizeResponse::visible() const {
  return visible_;
}
inline void CMsgHorizontalScrollBarSizeResponse::set_visible(bool value) {
  _set_bit(8);
  visible_ = value;
}

// -------------------------------------------------------------------

// CMsgVerticalScrollBarSize

// optional uint32 browser_handle = 1;
inline bool CMsgVerticalScrollBarSize::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgVerticalScrollBarSize::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgVerticalScrollBarSize::browser_handle() const {
  return browser_handle_;
}
inline void CMsgVerticalScrollBarSize::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// -------------------------------------------------------------------

// CMsgVerticalScrollBarSizeResponse

// optional uint32 browser_handle = 1;
inline bool CMsgVerticalScrollBarSizeResponse::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgVerticalScrollBarSizeResponse::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgVerticalScrollBarSizeResponse::browser_handle() const {
  return browser_handle_;
}
inline void CMsgVerticalScrollBarSizeResponse::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// optional uint32 x = 2;
inline bool CMsgVerticalScrollBarSizeResponse::has_x() const {
  return _has_bit(1);
}
inline void CMsgVerticalScrollBarSizeResponse::clear_x() {
  x_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMsgVerticalScrollBarSizeResponse::x() const {
  return x_;
}
inline void CMsgVerticalScrollBarSizeResponse::set_x(::google::protobuf::uint32 value) {
  _set_bit(1);
  x_ = value;
}

// optional uint32 y = 3;
inline bool CMsgVerticalScrollBarSizeResponse::has_y() const {
  return _has_bit(2);
}
inline void CMsgVerticalScrollBarSizeResponse::clear_y() {
  y_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMsgVerticalScrollBarSizeResponse::y() const {
  return y_;
}
inline void CMsgVerticalScrollBarSizeResponse::set_y(::google::protobuf::uint32 value) {
  _set_bit(2);
  y_ = value;
}

// optional uint32 wide = 4;
inline bool CMsgVerticalScrollBarSizeResponse::has_wide() const {
  return _has_bit(3);
}
inline void CMsgVerticalScrollBarSizeResponse::clear_wide() {
  wide_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 CMsgVerticalScrollBarSizeResponse::wide() const {
  return wide_;
}
inline void CMsgVerticalScrollBarSizeResponse::set_wide(::google::protobuf::uint32 value) {
  _set_bit(3);
  wide_ = value;
}

// optional uint32 tall = 5;
inline bool CMsgVerticalScrollBarSizeResponse::has_tall() const {
  return _has_bit(4);
}
inline void CMsgVerticalScrollBarSizeResponse::clear_tall() {
  tall_ = 0u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 CMsgVerticalScrollBarSizeResponse::tall() const {
  return tall_;
}
inline void CMsgVerticalScrollBarSizeResponse::set_tall(::google::protobuf::uint32 value) {
  _set_bit(4);
  tall_ = value;
}

// optional uint32 scroll_max = 6;
inline bool CMsgVerticalScrollBarSizeResponse::has_scroll_max() const {
  return _has_bit(5);
}
inline void CMsgVerticalScrollBarSizeResponse::clear_scroll_max() {
  scroll_max_ = 0u;
  _clear_bit(5);
}
inline ::google::protobuf::uint32 CMsgVerticalScrollBarSizeResponse::scroll_max() const {
  return scroll_max_;
}
inline void CMsgVerticalScrollBarSizeResponse::set_scroll_max(::google::protobuf::uint32 value) {
  _set_bit(5);
  scroll_max_ = value;
}

// optional uint32 scroll = 7;
inline bool CMsgVerticalScrollBarSizeResponse::has_scroll() const {
  return _has_bit(6);
}
inline void CMsgVerticalScrollBarSizeResponse::clear_scroll() {
  scroll_ = 0u;
  _clear_bit(6);
}
inline ::google::protobuf::uint32 CMsgVerticalScrollBarSizeResponse::scroll() const {
  return scroll_;
}
inline void CMsgVerticalScrollBarSizeResponse::set_scroll(::google::protobuf::uint32 value) {
  _set_bit(6);
  scroll_ = value;
}

// optional float zoom = 8;
inline bool CMsgVerticalScrollBarSizeResponse::has_zoom() const {
  return _has_bit(7);
}
inline void CMsgVerticalScrollBarSizeResponse::clear_zoom() {
  zoom_ = 0;
  _clear_bit(7);
}
inline float CMsgVerticalScrollBarSizeResponse::zoom() const {
  return zoom_;
}
inline void CMsgVerticalScrollBarSizeResponse::set_zoom(float value) {
  _set_bit(7);
  zoom_ = value;
}

// optional bool visible = 9;
inline bool CMsgVerticalScrollBarSizeResponse::has_visible() const {
  return _has_bit(8);
}
inline void CMsgVerticalScrollBarSizeResponse::clear_visible() {
  visible_ = false;
  _clear_bit(8);
}
inline bool CMsgVerticalScrollBarSizeResponse::visible() const {
  return visible_;
}
inline void CMsgVerticalScrollBarSizeResponse::set_visible(bool value) {
  _set_bit(8);
  visible_ = value;
}

// -------------------------------------------------------------------

// CMsgFind

// optional uint32 browser_handle = 1;
inline bool CMsgFind::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgFind::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgFind::browser_handle() const {
  return browser_handle_;
}
inline void CMsgFind::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// optional string find = 2;
inline bool CMsgFind::has_find() const {
  return _has_bit(1);
}
inline void CMsgFind::clear_find() {
  if (find_ != &_default_find_) {
    find_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& CMsgFind::find() const {
  return *find_;
}
inline void CMsgFind::set_find(const ::std::string& value) {
  _set_bit(1);
  if (find_ == &_default_find_) {
    find_ = new ::std::string;
  }
  find_->assign(value);
}
inline void CMsgFind::set_find(const char* value) {
  _set_bit(1);
  if (find_ == &_default_find_) {
    find_ = new ::std::string;
  }
  find_->assign(value);
}
inline void CMsgFind::set_find(const char* value, size_t size) {
  _set_bit(1);
  if (find_ == &_default_find_) {
    find_ = new ::std::string;
  }
  find_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgFind::mutable_find() {
  _set_bit(1);
  if (find_ == &_default_find_) {
    find_ = new ::std::string;
  }
  return find_;
}

// optional bool infind = 3;
inline bool CMsgFind::has_infind() const {
  return _has_bit(2);
}
inline void CMsgFind::clear_infind() {
  infind_ = false;
  _clear_bit(2);
}
inline bool CMsgFind::infind() const {
  return infind_;
}
inline void CMsgFind::set_infind(bool value) {
  _set_bit(2);
  infind_ = value;
}

// optional bool reverse = 4 [default = false];
inline bool CMsgFind::has_reverse() const {
  return _has_bit(3);
}
inline void CMsgFind::clear_reverse() {
  reverse_ = false;
  _clear_bit(3);
}
inline bool CMsgFind::reverse() const {
  return reverse_;
}
inline void CMsgFind::set_reverse(bool value) {
  _set_bit(3);
  reverse_ = value;
}

// -------------------------------------------------------------------

// CMsgStopFind

// optional uint32 browser_handle = 1;
inline bool CMsgStopFind::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgStopFind::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgStopFind::browser_handle() const {
  return browser_handle_;
}
inline void CMsgStopFind::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// -------------------------------------------------------------------

// CMsgSetHorizontalScroll

// optional uint32 browser_handle = 1;
inline bool CMsgSetHorizontalScroll::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgSetHorizontalScroll::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgSetHorizontalScroll::browser_handle() const {
  return browser_handle_;
}
inline void CMsgSetHorizontalScroll::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// optional uint32 scroll = 2;
inline bool CMsgSetHorizontalScroll::has_scroll() const {
  return _has_bit(1);
}
inline void CMsgSetHorizontalScroll::clear_scroll() {
  scroll_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMsgSetHorizontalScroll::scroll() const {
  return scroll_;
}
inline void CMsgSetHorizontalScroll::set_scroll(::google::protobuf::uint32 value) {
  _set_bit(1);
  scroll_ = value;
}

// -------------------------------------------------------------------

// CMsgSetVerticalScroll

// optional uint32 browser_handle = 1;
inline bool CMsgSetVerticalScroll::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgSetVerticalScroll::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgSetVerticalScroll::browser_handle() const {
  return browser_handle_;
}
inline void CMsgSetVerticalScroll::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// optional uint32 scroll = 2;
inline bool CMsgSetVerticalScroll::has_scroll() const {
  return _has_bit(1);
}
inline void CMsgSetVerticalScroll::clear_scroll() {
  scroll_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMsgSetVerticalScroll::scroll() const {
  return scroll_;
}
inline void CMsgSetVerticalScroll::set_scroll(::google::protobuf::uint32 value) {
  _set_bit(1);
  scroll_ = value;
}

// -------------------------------------------------------------------

// CMsgSetZoomLevel

// optional uint32 browser_handle = 1;
inline bool CMsgSetZoomLevel::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgSetZoomLevel::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgSetZoomLevel::browser_handle() const {
  return browser_handle_;
}
inline void CMsgSetZoomLevel::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// optional uint32 zoom = 2;
inline bool CMsgSetZoomLevel::has_zoom() const {
  return _has_bit(1);
}
inline void CMsgSetZoomLevel::clear_zoom() {
  zoom_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMsgSetZoomLevel::zoom() const {
  return zoom_;
}
inline void CMsgSetZoomLevel::set_zoom(::google::protobuf::uint32 value) {
  _set_bit(1);
  zoom_ = value;
}

// -------------------------------------------------------------------

// CMsgViewSource

// optional uint32 browser_handle = 1;
inline bool CMsgViewSource::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgViewSource::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgViewSource::browser_handle() const {
  return browser_handle_;
}
inline void CMsgViewSource::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// -------------------------------------------------------------------

// CMsgBrowserReady

// optional uint32 browser_handle = 1;
inline bool CMsgBrowserReady::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgBrowserReady::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgBrowserReady::browser_handle() const {
  return browser_handle_;
}
inline void CMsgBrowserReady::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// -------------------------------------------------------------------

// CMsgURLChanged

// optional uint32 browser_handle = 1;
inline bool CMsgURLChanged::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgURLChanged::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgURLChanged::browser_handle() const {
  return browser_handle_;
}
inline void CMsgURLChanged::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// optional string url = 2;
inline bool CMsgURLChanged::has_url() const {
  return _has_bit(1);
}
inline void CMsgURLChanged::clear_url() {
  if (url_ != &_default_url_) {
    url_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& CMsgURLChanged::url() const {
  return *url_;
}
inline void CMsgURLChanged::set_url(const ::std::string& value) {
  _set_bit(1);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void CMsgURLChanged::set_url(const char* value) {
  _set_bit(1);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void CMsgURLChanged::set_url(const char* value, size_t size) {
  _set_bit(1);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgURLChanged::mutable_url() {
  _set_bit(1);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  return url_;
}

// optional string postData = 3;
inline bool CMsgURLChanged::has_postdata() const {
  return _has_bit(2);
}
inline void CMsgURLChanged::clear_postdata() {
  if (postdata_ != &_default_postdata_) {
    postdata_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& CMsgURLChanged::postdata() const {
  return *postdata_;
}
inline void CMsgURLChanged::set_postdata(const ::std::string& value) {
  _set_bit(2);
  if (postdata_ == &_default_postdata_) {
    postdata_ = new ::std::string;
  }
  postdata_->assign(value);
}
inline void CMsgURLChanged::set_postdata(const char* value) {
  _set_bit(2);
  if (postdata_ == &_default_postdata_) {
    postdata_ = new ::std::string;
  }
  postdata_->assign(value);
}
inline void CMsgURLChanged::set_postdata(const char* value, size_t size) {
  _set_bit(2);
  if (postdata_ == &_default_postdata_) {
    postdata_ = new ::std::string;
  }
  postdata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgURLChanged::mutable_postdata() {
  _set_bit(2);
  if (postdata_ == &_default_postdata_) {
    postdata_ = new ::std::string;
  }
  return postdata_;
}

// optional bool bIsRedirect = 4;
inline bool CMsgURLChanged::has_bisredirect() const {
  return _has_bit(3);
}
inline void CMsgURLChanged::clear_bisredirect() {
  bisredirect_ = false;
  _clear_bit(3);
}
inline bool CMsgURLChanged::bisredirect() const {
  return bisredirect_;
}
inline void CMsgURLChanged::set_bisredirect(bool value) {
  _set_bit(3);
  bisredirect_ = value;
}

// optional string pagetitle = 5;
inline bool CMsgURLChanged::has_pagetitle() const {
  return _has_bit(4);
}
inline void CMsgURLChanged::clear_pagetitle() {
  if (pagetitle_ != &_default_pagetitle_) {
    pagetitle_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& CMsgURLChanged::pagetitle() const {
  return *pagetitle_;
}
inline void CMsgURLChanged::set_pagetitle(const ::std::string& value) {
  _set_bit(4);
  if (pagetitle_ == &_default_pagetitle_) {
    pagetitle_ = new ::std::string;
  }
  pagetitle_->assign(value);
}
inline void CMsgURLChanged::set_pagetitle(const char* value) {
  _set_bit(4);
  if (pagetitle_ == &_default_pagetitle_) {
    pagetitle_ = new ::std::string;
  }
  pagetitle_->assign(value);
}
inline void CMsgURLChanged::set_pagetitle(const char* value, size_t size) {
  _set_bit(4);
  if (pagetitle_ == &_default_pagetitle_) {
    pagetitle_ = new ::std::string;
  }
  pagetitle_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgURLChanged::mutable_pagetitle() {
  _set_bit(4);
  if (pagetitle_ == &_default_pagetitle_) {
    pagetitle_ = new ::std::string;
  }
  return pagetitle_;
}

// optional bool bNewNavigation = 6;
inline bool CMsgURLChanged::has_bnewnavigation() const {
  return _has_bit(5);
}
inline void CMsgURLChanged::clear_bnewnavigation() {
  bnewnavigation_ = false;
  _clear_bit(5);
}
inline bool CMsgURLChanged::bnewnavigation() const {
  return bnewnavigation_;
}
inline void CMsgURLChanged::set_bnewnavigation(bool value) {
  _set_bit(5);
  bnewnavigation_ = value;
}

// -------------------------------------------------------------------

// CHTMLHeader

// optional string key = 1;
inline bool CHTMLHeader::has_key() const {
  return _has_bit(0);
}
inline void CHTMLHeader::clear_key() {
  if (key_ != &_default_key_) {
    key_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& CHTMLHeader::key() const {
  return *key_;
}
inline void CHTMLHeader::set_key(const ::std::string& value) {
  _set_bit(0);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void CHTMLHeader::set_key(const char* value) {
  _set_bit(0);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void CHTMLHeader::set_key(const char* value, size_t size) {
  _set_bit(0);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CHTMLHeader::mutable_key() {
  _set_bit(0);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  return key_;
}

// optional string value = 2;
inline bool CHTMLHeader::has_value() const {
  return _has_bit(1);
}
inline void CHTMLHeader::clear_value() {
  if (value_ != &_default_value_) {
    value_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& CHTMLHeader::value() const {
  return *value_;
}
inline void CHTMLHeader::set_value(const ::std::string& value) {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void CHTMLHeader::set_value(const char* value) {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void CHTMLHeader::set_value(const char* value, size_t size) {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CHTMLHeader::mutable_value() {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  return value_;
}

// -------------------------------------------------------------------

// CHTMLPageSecurityInfo

// optional bool bIsSecure = 1 [default = false];
inline bool CHTMLPageSecurityInfo::has_bissecure() const {
  return _has_bit(0);
}
inline void CHTMLPageSecurityInfo::clear_bissecure() {
  bissecure_ = false;
  _clear_bit(0);
}
inline bool CHTMLPageSecurityInfo::bissecure() const {
  return bissecure_;
}
inline void CHTMLPageSecurityInfo::set_bissecure(bool value) {
  _set_bit(0);
  bissecure_ = value;
}

// optional bool bHasCertError = 2 [default = false];
inline bool CHTMLPageSecurityInfo::has_bhascerterror() const {
  return _has_bit(1);
}
inline void CHTMLPageSecurityInfo::clear_bhascerterror() {
  bhascerterror_ = false;
  _clear_bit(1);
}
inline bool CHTMLPageSecurityInfo::bhascerterror() const {
  return bhascerterror_;
}
inline void CHTMLPageSecurityInfo::set_bhascerterror(bool value) {
  _set_bit(1);
  bhascerterror_ = value;
}

// optional string issuerName = 3 [default = ""];
inline bool CHTMLPageSecurityInfo::has_issuername() const {
  return _has_bit(2);
}
inline void CHTMLPageSecurityInfo::clear_issuername() {
  if (issuername_ != &_default_issuername_) {
    issuername_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& CHTMLPageSecurityInfo::issuername() const {
  return *issuername_;
}
inline void CHTMLPageSecurityInfo::set_issuername(const ::std::string& value) {
  _set_bit(2);
  if (issuername_ == &_default_issuername_) {
    issuername_ = new ::std::string;
  }
  issuername_->assign(value);
}
inline void CHTMLPageSecurityInfo::set_issuername(const char* value) {
  _set_bit(2);
  if (issuername_ == &_default_issuername_) {
    issuername_ = new ::std::string;
  }
  issuername_->assign(value);
}
inline void CHTMLPageSecurityInfo::set_issuername(const char* value, size_t size) {
  _set_bit(2);
  if (issuername_ == &_default_issuername_) {
    issuername_ = new ::std::string;
  }
  issuername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CHTMLPageSecurityInfo::mutable_issuername() {
  _set_bit(2);
  if (issuername_ == &_default_issuername_) {
    issuername_ = new ::std::string;
  }
  return issuername_;
}

// optional string certName = 4 [default = ""];
inline bool CHTMLPageSecurityInfo::has_certname() const {
  return _has_bit(3);
}
inline void CHTMLPageSecurityInfo::clear_certname() {
  if (certname_ != &_default_certname_) {
    certname_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& CHTMLPageSecurityInfo::certname() const {
  return *certname_;
}
inline void CHTMLPageSecurityInfo::set_certname(const ::std::string& value) {
  _set_bit(3);
  if (certname_ == &_default_certname_) {
    certname_ = new ::std::string;
  }
  certname_->assign(value);
}
inline void CHTMLPageSecurityInfo::set_certname(const char* value) {
  _set_bit(3);
  if (certname_ == &_default_certname_) {
    certname_ = new ::std::string;
  }
  certname_->assign(value);
}
inline void CHTMLPageSecurityInfo::set_certname(const char* value, size_t size) {
  _set_bit(3);
  if (certname_ == &_default_certname_) {
    certname_ = new ::std::string;
  }
  certname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CHTMLPageSecurityInfo::mutable_certname() {
  _set_bit(3);
  if (certname_ == &_default_certname_) {
    certname_ = new ::std::string;
  }
  return certname_;
}

// optional int32 certExpiry = 5 [default = 0];
inline bool CHTMLPageSecurityInfo::has_certexpiry() const {
  return _has_bit(4);
}
inline void CHTMLPageSecurityInfo::clear_certexpiry() {
  certexpiry_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 CHTMLPageSecurityInfo::certexpiry() const {
  return certexpiry_;
}
inline void CHTMLPageSecurityInfo::set_certexpiry(::google::protobuf::int32 value) {
  _set_bit(4);
  certexpiry_ = value;
}

// optional int32 nCertBits = 6 [default = 0];
inline bool CHTMLPageSecurityInfo::has_ncertbits() const {
  return _has_bit(5);
}
inline void CHTMLPageSecurityInfo::clear_ncertbits() {
  ncertbits_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 CHTMLPageSecurityInfo::ncertbits() const {
  return ncertbits_;
}
inline void CHTMLPageSecurityInfo::set_ncertbits(::google::protobuf::int32 value) {
  _set_bit(5);
  ncertbits_ = value;
}

// optional bool bIsEVCert = 7 [default = false];
inline bool CHTMLPageSecurityInfo::has_bisevcert() const {
  return _has_bit(6);
}
inline void CHTMLPageSecurityInfo::clear_bisevcert() {
  bisevcert_ = false;
  _clear_bit(6);
}
inline bool CHTMLPageSecurityInfo::bisevcert() const {
  return bisevcert_;
}
inline void CHTMLPageSecurityInfo::set_bisevcert(bool value) {
  _set_bit(6);
  bisevcert_ = value;
}

// -------------------------------------------------------------------

// CMsgFinishedRequest

// optional uint32 browser_handle = 1;
inline bool CMsgFinishedRequest::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgFinishedRequest::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgFinishedRequest::browser_handle() const {
  return browser_handle_;
}
inline void CMsgFinishedRequest::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// optional string url = 2;
inline bool CMsgFinishedRequest::has_url() const {
  return _has_bit(1);
}
inline void CMsgFinishedRequest::clear_url() {
  if (url_ != &_default_url_) {
    url_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& CMsgFinishedRequest::url() const {
  return *url_;
}
inline void CMsgFinishedRequest::set_url(const ::std::string& value) {
  _set_bit(1);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void CMsgFinishedRequest::set_url(const char* value) {
  _set_bit(1);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void CMsgFinishedRequest::set_url(const char* value, size_t size) {
  _set_bit(1);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgFinishedRequest::mutable_url() {
  _set_bit(1);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  return url_;
}

// optional string pageTitle = 3;
inline bool CMsgFinishedRequest::has_pagetitle() const {
  return _has_bit(2);
}
inline void CMsgFinishedRequest::clear_pagetitle() {
  if (pagetitle_ != &_default_pagetitle_) {
    pagetitle_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& CMsgFinishedRequest::pagetitle() const {
  return *pagetitle_;
}
inline void CMsgFinishedRequest::set_pagetitle(const ::std::string& value) {
  _set_bit(2);
  if (pagetitle_ == &_default_pagetitle_) {
    pagetitle_ = new ::std::string;
  }
  pagetitle_->assign(value);
}
inline void CMsgFinishedRequest::set_pagetitle(const char* value) {
  _set_bit(2);
  if (pagetitle_ == &_default_pagetitle_) {
    pagetitle_ = new ::std::string;
  }
  pagetitle_->assign(value);
}
inline void CMsgFinishedRequest::set_pagetitle(const char* value, size_t size) {
  _set_bit(2);
  if (pagetitle_ == &_default_pagetitle_) {
    pagetitle_ = new ::std::string;
  }
  pagetitle_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgFinishedRequest::mutable_pagetitle() {
  _set_bit(2);
  if (pagetitle_ == &_default_pagetitle_) {
    pagetitle_ = new ::std::string;
  }
  return pagetitle_;
}

// optional .CHTMLPageSecurityInfo security_info = 4;
inline bool CMsgFinishedRequest::has_security_info() const {
  return _has_bit(3);
}
inline void CMsgFinishedRequest::clear_security_info() {
  if (security_info_ != NULL) security_info_->::CHTMLPageSecurityInfo::Clear();
  _clear_bit(3);
}
inline const ::CHTMLPageSecurityInfo& CMsgFinishedRequest::security_info() const {
  return security_info_ != NULL ? *security_info_ : *default_instance_->security_info_;
}
inline ::CHTMLPageSecurityInfo* CMsgFinishedRequest::mutable_security_info() {
  _set_bit(3);
  if (security_info_ == NULL) security_info_ = new ::CHTMLPageSecurityInfo;
  return security_info_;
}

// repeated .CHTMLHeader headers = 5;
inline int CMsgFinishedRequest::headers_size() const {
  return headers_.size();
}
inline void CMsgFinishedRequest::clear_headers() {
  headers_.Clear();
}
inline const ::CHTMLHeader& CMsgFinishedRequest::headers(int index) const {
  return headers_.Get(index);
}
inline ::CHTMLHeader* CMsgFinishedRequest::mutable_headers(int index) {
  return headers_.Mutable(index);
}
inline ::CHTMLHeader* CMsgFinishedRequest::add_headers() {
  return headers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CHTMLHeader >&
CMsgFinishedRequest::headers() const {
  return headers_;
}
inline ::google::protobuf::RepeatedPtrField< ::CHTMLHeader >*
CMsgFinishedRequest::mutable_headers() {
  return &headers_;
}

// -------------------------------------------------------------------

// CMsgStartRequest

// optional uint32 browser_handle = 1;
inline bool CMsgStartRequest::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgStartRequest::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgStartRequest::browser_handle() const {
  return browser_handle_;
}
inline void CMsgStartRequest::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// optional string url = 2;
inline bool CMsgStartRequest::has_url() const {
  return _has_bit(1);
}
inline void CMsgStartRequest::clear_url() {
  if (url_ != &_default_url_) {
    url_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& CMsgStartRequest::url() const {
  return *url_;
}
inline void CMsgStartRequest::set_url(const ::std::string& value) {
  _set_bit(1);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void CMsgStartRequest::set_url(const char* value) {
  _set_bit(1);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void CMsgStartRequest::set_url(const char* value, size_t size) {
  _set_bit(1);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgStartRequest::mutable_url() {
  _set_bit(1);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  return url_;
}

// optional string target = 3;
inline bool CMsgStartRequest::has_target() const {
  return _has_bit(2);
}
inline void CMsgStartRequest::clear_target() {
  if (target_ != &_default_target_) {
    target_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& CMsgStartRequest::target() const {
  return *target_;
}
inline void CMsgStartRequest::set_target(const ::std::string& value) {
  _set_bit(2);
  if (target_ == &_default_target_) {
    target_ = new ::std::string;
  }
  target_->assign(value);
}
inline void CMsgStartRequest::set_target(const char* value) {
  _set_bit(2);
  if (target_ == &_default_target_) {
    target_ = new ::std::string;
  }
  target_->assign(value);
}
inline void CMsgStartRequest::set_target(const char* value, size_t size) {
  _set_bit(2);
  if (target_ == &_default_target_) {
    target_ = new ::std::string;
  }
  target_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgStartRequest::mutable_target() {
  _set_bit(2);
  if (target_ == &_default_target_) {
    target_ = new ::std::string;
  }
  return target_;
}

// optional string postData = 4;
inline bool CMsgStartRequest::has_postdata() const {
  return _has_bit(3);
}
inline void CMsgStartRequest::clear_postdata() {
  if (postdata_ != &_default_postdata_) {
    postdata_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& CMsgStartRequest::postdata() const {
  return *postdata_;
}
inline void CMsgStartRequest::set_postdata(const ::std::string& value) {
  _set_bit(3);
  if (postdata_ == &_default_postdata_) {
    postdata_ = new ::std::string;
  }
  postdata_->assign(value);
}
inline void CMsgStartRequest::set_postdata(const char* value) {
  _set_bit(3);
  if (postdata_ == &_default_postdata_) {
    postdata_ = new ::std::string;
  }
  postdata_->assign(value);
}
inline void CMsgStartRequest::set_postdata(const char* value, size_t size) {
  _set_bit(3);
  if (postdata_ == &_default_postdata_) {
    postdata_ = new ::std::string;
  }
  postdata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgStartRequest::mutable_postdata() {
  _set_bit(3);
  if (postdata_ == &_default_postdata_) {
    postdata_ = new ::std::string;
  }
  return postdata_;
}

// optional bool bIsRedirect = 5;
inline bool CMsgStartRequest::has_bisredirect() const {
  return _has_bit(4);
}
inline void CMsgStartRequest::clear_bisredirect() {
  bisredirect_ = false;
  _clear_bit(4);
}
inline bool CMsgStartRequest::bisredirect() const {
  return bisredirect_;
}
inline void CMsgStartRequest::set_bisredirect(bool value) {
  _set_bit(4);
  bisredirect_ = value;
}

// -------------------------------------------------------------------

// CMsgStartRequestResponse

// optional uint32 browser_handle = 1;
inline bool CMsgStartRequestResponse::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgStartRequestResponse::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgStartRequestResponse::browser_handle() const {
  return browser_handle_;
}
inline void CMsgStartRequestResponse::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// optional bool bAllow = 2;
inline bool CMsgStartRequestResponse::has_ballow() const {
  return _has_bit(1);
}
inline void CMsgStartRequestResponse::clear_ballow() {
  ballow_ = false;
  _clear_bit(1);
}
inline bool CMsgStartRequestResponse::ballow() const {
  return ballow_;
}
inline void CMsgStartRequestResponse::set_ballow(bool value) {
  _set_bit(1);
  ballow_ = value;
}

// -------------------------------------------------------------------

// CMsgShowPopup

// optional uint32 browser_handle = 1;
inline bool CMsgShowPopup::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgShowPopup::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgShowPopup::browser_handle() const {
  return browser_handle_;
}
inline void CMsgShowPopup::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// -------------------------------------------------------------------

// CMsgHidePopup

// optional uint32 browser_handle = 1;
inline bool CMsgHidePopup::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgHidePopup::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgHidePopup::browser_handle() const {
  return browser_handle_;
}
inline void CMsgHidePopup::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// -------------------------------------------------------------------

// CMsgSizePopup

// optional uint32 browser_handle = 1;
inline bool CMsgSizePopup::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgSizePopup::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgSizePopup::browser_handle() const {
  return browser_handle_;
}
inline void CMsgSizePopup::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// optional uint32 x = 2;
inline bool CMsgSizePopup::has_x() const {
  return _has_bit(1);
}
inline void CMsgSizePopup::clear_x() {
  x_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMsgSizePopup::x() const {
  return x_;
}
inline void CMsgSizePopup::set_x(::google::protobuf::uint32 value) {
  _set_bit(1);
  x_ = value;
}

// optional uint32 y = 3;
inline bool CMsgSizePopup::has_y() const {
  return _has_bit(2);
}
inline void CMsgSizePopup::clear_y() {
  y_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMsgSizePopup::y() const {
  return y_;
}
inline void CMsgSizePopup::set_y(::google::protobuf::uint32 value) {
  _set_bit(2);
  y_ = value;
}

// optional uint32 wide = 4;
inline bool CMsgSizePopup::has_wide() const {
  return _has_bit(3);
}
inline void CMsgSizePopup::clear_wide() {
  wide_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 CMsgSizePopup::wide() const {
  return wide_;
}
inline void CMsgSizePopup::set_wide(::google::protobuf::uint32 value) {
  _set_bit(3);
  wide_ = value;
}

// optional uint32 tall = 5;
inline bool CMsgSizePopup::has_tall() const {
  return _has_bit(4);
}
inline void CMsgSizePopup::clear_tall() {
  tall_ = 0u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 CMsgSizePopup::tall() const {
  return tall_;
}
inline void CMsgSizePopup::set_tall(::google::protobuf::uint32 value) {
  _set_bit(4);
  tall_ = value;
}

// -------------------------------------------------------------------

// CMsgOpenNewTab

// optional uint32 browser_handle = 1;
inline bool CMsgOpenNewTab::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgOpenNewTab::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgOpenNewTab::browser_handle() const {
  return browser_handle_;
}
inline void CMsgOpenNewTab::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// optional string url = 2;
inline bool CMsgOpenNewTab::has_url() const {
  return _has_bit(1);
}
inline void CMsgOpenNewTab::clear_url() {
  if (url_ != &_default_url_) {
    url_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& CMsgOpenNewTab::url() const {
  return *url_;
}
inline void CMsgOpenNewTab::set_url(const ::std::string& value) {
  _set_bit(1);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void CMsgOpenNewTab::set_url(const char* value) {
  _set_bit(1);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void CMsgOpenNewTab::set_url(const char* value, size_t size) {
  _set_bit(1);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgOpenNewTab::mutable_url() {
  _set_bit(1);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  return url_;
}

// optional bool bForeground = 3;
inline bool CMsgOpenNewTab::has_bforeground() const {
  return _has_bit(2);
}
inline void CMsgOpenNewTab::clear_bforeground() {
  bforeground_ = false;
  _clear_bit(2);
}
inline bool CMsgOpenNewTab::bforeground() const {
  return bforeground_;
}
inline void CMsgOpenNewTab::set_bforeground(bool value) {
  _set_bit(2);
  bforeground_ = value;
}

// -------------------------------------------------------------------

// CMsgOpenNewTabResponse

// optional uint32 browser_handle = 1;
inline bool CMsgOpenNewTabResponse::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgOpenNewTabResponse::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgOpenNewTabResponse::browser_handle() const {
  return browser_handle_;
}
inline void CMsgOpenNewTabResponse::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// optional bool bAllow = 2;
inline bool CMsgOpenNewTabResponse::has_ballow() const {
  return _has_bit(1);
}
inline void CMsgOpenNewTabResponse::clear_ballow() {
  ballow_ = false;
  _clear_bit(1);
}
inline bool CMsgOpenNewTabResponse::ballow() const {
  return ballow_;
}
inline void CMsgOpenNewTabResponse::set_ballow(bool value) {
  _set_bit(1);
  ballow_ = value;
}

// -------------------------------------------------------------------

// CMsgPopupHTMLWindow

// optional uint32 browser_handle = 1;
inline bool CMsgPopupHTMLWindow::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgPopupHTMLWindow::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgPopupHTMLWindow::browser_handle() const {
  return browser_handle_;
}
inline void CMsgPopupHTMLWindow::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// optional string url = 2;
inline bool CMsgPopupHTMLWindow::has_url() const {
  return _has_bit(1);
}
inline void CMsgPopupHTMLWindow::clear_url() {
  if (url_ != &_default_url_) {
    url_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& CMsgPopupHTMLWindow::url() const {
  return *url_;
}
inline void CMsgPopupHTMLWindow::set_url(const ::std::string& value) {
  _set_bit(1);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void CMsgPopupHTMLWindow::set_url(const char* value) {
  _set_bit(1);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void CMsgPopupHTMLWindow::set_url(const char* value, size_t size) {
  _set_bit(1);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgPopupHTMLWindow::mutable_url() {
  _set_bit(1);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  return url_;
}

// optional uint32 x = 3;
inline bool CMsgPopupHTMLWindow::has_x() const {
  return _has_bit(2);
}
inline void CMsgPopupHTMLWindow::clear_x() {
  x_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMsgPopupHTMLWindow::x() const {
  return x_;
}
inline void CMsgPopupHTMLWindow::set_x(::google::protobuf::uint32 value) {
  _set_bit(2);
  x_ = value;
}

// optional uint32 y = 4;
inline bool CMsgPopupHTMLWindow::has_y() const {
  return _has_bit(3);
}
inline void CMsgPopupHTMLWindow::clear_y() {
  y_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 CMsgPopupHTMLWindow::y() const {
  return y_;
}
inline void CMsgPopupHTMLWindow::set_y(::google::protobuf::uint32 value) {
  _set_bit(3);
  y_ = value;
}

// optional uint32 wide = 5;
inline bool CMsgPopupHTMLWindow::has_wide() const {
  return _has_bit(4);
}
inline void CMsgPopupHTMLWindow::clear_wide() {
  wide_ = 0u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 CMsgPopupHTMLWindow::wide() const {
  return wide_;
}
inline void CMsgPopupHTMLWindow::set_wide(::google::protobuf::uint32 value) {
  _set_bit(4);
  wide_ = value;
}

// optional uint32 tall = 6;
inline bool CMsgPopupHTMLWindow::has_tall() const {
  return _has_bit(5);
}
inline void CMsgPopupHTMLWindow::clear_tall() {
  tall_ = 0u;
  _clear_bit(5);
}
inline ::google::protobuf::uint32 CMsgPopupHTMLWindow::tall() const {
  return tall_;
}
inline void CMsgPopupHTMLWindow::set_tall(::google::protobuf::uint32 value) {
  _set_bit(5);
  tall_ = value;
}

// -------------------------------------------------------------------

// CMsgPopupHTMLWindowResponse

// optional uint32 browser_handle = 1;
inline bool CMsgPopupHTMLWindowResponse::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgPopupHTMLWindowResponse::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgPopupHTMLWindowResponse::browser_handle() const {
  return browser_handle_;
}
inline void CMsgPopupHTMLWindowResponse::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// optional bool bAllow = 2;
inline bool CMsgPopupHTMLWindowResponse::has_ballow() const {
  return _has_bit(1);
}
inline void CMsgPopupHTMLWindowResponse::clear_ballow() {
  ballow_ = false;
  _clear_bit(1);
}
inline bool CMsgPopupHTMLWindowResponse::ballow() const {
  return ballow_;
}
inline void CMsgPopupHTMLWindowResponse::set_ballow(bool value) {
  _set_bit(1);
  ballow_ = value;
}

// -------------------------------------------------------------------

// CMsgSetHTMLTitle

// optional uint32 browser_handle = 1;
inline bool CMsgSetHTMLTitle::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgSetHTMLTitle::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgSetHTMLTitle::browser_handle() const {
  return browser_handle_;
}
inline void CMsgSetHTMLTitle::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// optional string title = 2;
inline bool CMsgSetHTMLTitle::has_title() const {
  return _has_bit(1);
}
inline void CMsgSetHTMLTitle::clear_title() {
  if (title_ != &_default_title_) {
    title_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& CMsgSetHTMLTitle::title() const {
  return *title_;
}
inline void CMsgSetHTMLTitle::set_title(const ::std::string& value) {
  _set_bit(1);
  if (title_ == &_default_title_) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void CMsgSetHTMLTitle::set_title(const char* value) {
  _set_bit(1);
  if (title_ == &_default_title_) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void CMsgSetHTMLTitle::set_title(const char* value, size_t size) {
  _set_bit(1);
  if (title_ == &_default_title_) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgSetHTMLTitle::mutable_title() {
  _set_bit(1);
  if (title_ == &_default_title_) {
    title_ = new ::std::string;
  }
  return title_;
}

// -------------------------------------------------------------------

// CMsgLoadingResource

// optional uint32 browser_handle = 1;
inline bool CMsgLoadingResource::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgLoadingResource::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgLoadingResource::browser_handle() const {
  return browser_handle_;
}
inline void CMsgLoadingResource::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// optional string url = 2;
inline bool CMsgLoadingResource::has_url() const {
  return _has_bit(1);
}
inline void CMsgLoadingResource::clear_url() {
  if (url_ != &_default_url_) {
    url_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& CMsgLoadingResource::url() const {
  return *url_;
}
inline void CMsgLoadingResource::set_url(const ::std::string& value) {
  _set_bit(1);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void CMsgLoadingResource::set_url(const char* value) {
  _set_bit(1);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void CMsgLoadingResource::set_url(const char* value, size_t size) {
  _set_bit(1);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgLoadingResource::mutable_url() {
  _set_bit(1);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  return url_;
}

// -------------------------------------------------------------------

// CMsgStatusText

// optional uint32 browser_handle = 1;
inline bool CMsgStatusText::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgStatusText::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgStatusText::browser_handle() const {
  return browser_handle_;
}
inline void CMsgStatusText::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// optional string text = 2;
inline bool CMsgStatusText::has_text() const {
  return _has_bit(1);
}
inline void CMsgStatusText::clear_text() {
  if (text_ != &_default_text_) {
    text_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& CMsgStatusText::text() const {
  return *text_;
}
inline void CMsgStatusText::set_text(const ::std::string& value) {
  _set_bit(1);
  if (text_ == &_default_text_) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void CMsgStatusText::set_text(const char* value) {
  _set_bit(1);
  if (text_ == &_default_text_) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void CMsgStatusText::set_text(const char* value, size_t size) {
  _set_bit(1);
  if (text_ == &_default_text_) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgStatusText::mutable_text() {
  _set_bit(1);
  if (text_ == &_default_text_) {
    text_ = new ::std::string;
  }
  return text_;
}

// -------------------------------------------------------------------

// CMsgSetCursor

// optional uint32 browser_handle = 1;
inline bool CMsgSetCursor::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgSetCursor::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgSetCursor::browser_handle() const {
  return browser_handle_;
}
inline void CMsgSetCursor::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// optional uint32 cursor = 2;
inline bool CMsgSetCursor::has_cursor() const {
  return _has_bit(1);
}
inline void CMsgSetCursor::clear_cursor() {
  cursor_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMsgSetCursor::cursor() const {
  return cursor_;
}
inline void CMsgSetCursor::set_cursor(::google::protobuf::uint32 value) {
  _set_bit(1);
  cursor_ = value;
}

// optional uint32 data = 3;
inline bool CMsgSetCursor::has_data() const {
  return _has_bit(2);
}
inline void CMsgSetCursor::clear_data() {
  data_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMsgSetCursor::data() const {
  return data_;
}
inline void CMsgSetCursor::set_data(::google::protobuf::uint32 value) {
  _set_bit(2);
  data_ = value;
}

// optional uint32 wide = 4;
inline bool CMsgSetCursor::has_wide() const {
  return _has_bit(3);
}
inline void CMsgSetCursor::clear_wide() {
  wide_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 CMsgSetCursor::wide() const {
  return wide_;
}
inline void CMsgSetCursor::set_wide(::google::protobuf::uint32 value) {
  _set_bit(3);
  wide_ = value;
}

// optional uint32 tall = 5;
inline bool CMsgSetCursor::has_tall() const {
  return _has_bit(4);
}
inline void CMsgSetCursor::clear_tall() {
  tall_ = 0u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 CMsgSetCursor::tall() const {
  return tall_;
}
inline void CMsgSetCursor::set_tall(::google::protobuf::uint32 value) {
  _set_bit(4);
  tall_ = value;
}

// optional uint32 xhotspot = 6;
inline bool CMsgSetCursor::has_xhotspot() const {
  return _has_bit(5);
}
inline void CMsgSetCursor::clear_xhotspot() {
  xhotspot_ = 0u;
  _clear_bit(5);
}
inline ::google::protobuf::uint32 CMsgSetCursor::xhotspot() const {
  return xhotspot_;
}
inline void CMsgSetCursor::set_xhotspot(::google::protobuf::uint32 value) {
  _set_bit(5);
  xhotspot_ = value;
}

// optional uint32 yhotspot = 7;
inline bool CMsgSetCursor::has_yhotspot() const {
  return _has_bit(6);
}
inline void CMsgSetCursor::clear_yhotspot() {
  yhotspot_ = 0u;
  _clear_bit(6);
}
inline ::google::protobuf::uint32 CMsgSetCursor::yhotspot() const {
  return yhotspot_;
}
inline void CMsgSetCursor::set_yhotspot(::google::protobuf::uint32 value) {
  _set_bit(6);
  yhotspot_ = value;
}

// -------------------------------------------------------------------

// CMsgFileLoadDialog

// optional uint32 browser_handle = 1;
inline bool CMsgFileLoadDialog::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgFileLoadDialog::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgFileLoadDialog::browser_handle() const {
  return browser_handle_;
}
inline void CMsgFileLoadDialog::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// optional string title = 2;
inline bool CMsgFileLoadDialog::has_title() const {
  return _has_bit(1);
}
inline void CMsgFileLoadDialog::clear_title() {
  if (title_ != &_default_title_) {
    title_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& CMsgFileLoadDialog::title() const {
  return *title_;
}
inline void CMsgFileLoadDialog::set_title(const ::std::string& value) {
  _set_bit(1);
  if (title_ == &_default_title_) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void CMsgFileLoadDialog::set_title(const char* value) {
  _set_bit(1);
  if (title_ == &_default_title_) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void CMsgFileLoadDialog::set_title(const char* value, size_t size) {
  _set_bit(1);
  if (title_ == &_default_title_) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgFileLoadDialog::mutable_title() {
  _set_bit(1);
  if (title_ == &_default_title_) {
    title_ = new ::std::string;
  }
  return title_;
}

// optional string initialFile = 3;
inline bool CMsgFileLoadDialog::has_initialfile() const {
  return _has_bit(2);
}
inline void CMsgFileLoadDialog::clear_initialfile() {
  if (initialfile_ != &_default_initialfile_) {
    initialfile_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& CMsgFileLoadDialog::initialfile() const {
  return *initialfile_;
}
inline void CMsgFileLoadDialog::set_initialfile(const ::std::string& value) {
  _set_bit(2);
  if (initialfile_ == &_default_initialfile_) {
    initialfile_ = new ::std::string;
  }
  initialfile_->assign(value);
}
inline void CMsgFileLoadDialog::set_initialfile(const char* value) {
  _set_bit(2);
  if (initialfile_ == &_default_initialfile_) {
    initialfile_ = new ::std::string;
  }
  initialfile_->assign(value);
}
inline void CMsgFileLoadDialog::set_initialfile(const char* value, size_t size) {
  _set_bit(2);
  if (initialfile_ == &_default_initialfile_) {
    initialfile_ = new ::std::string;
  }
  initialfile_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgFileLoadDialog::mutable_initialfile() {
  _set_bit(2);
  if (initialfile_ == &_default_initialfile_) {
    initialfile_ = new ::std::string;
  }
  return initialfile_;
}

// -------------------------------------------------------------------

// CMsgFileLoadDialogResponse

// optional uint32 browser_handle = 1;
inline bool CMsgFileLoadDialogResponse::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgFileLoadDialogResponse::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgFileLoadDialogResponse::browser_handle() const {
  return browser_handle_;
}
inline void CMsgFileLoadDialogResponse::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// repeated string files = 2;
inline int CMsgFileLoadDialogResponse::files_size() const {
  return files_.size();
}
inline void CMsgFileLoadDialogResponse::clear_files() {
  files_.Clear();
}
inline const ::std::string& CMsgFileLoadDialogResponse::files(int index) const {
  return files_.Get(index);
}
inline ::std::string* CMsgFileLoadDialogResponse::mutable_files(int index) {
  return files_.Mutable(index);
}
inline void CMsgFileLoadDialogResponse::set_files(int index, const ::std::string& value) {
  files_.Mutable(index)->assign(value);
}
inline void CMsgFileLoadDialogResponse::set_files(int index, const char* value) {
  files_.Mutable(index)->assign(value);
}
inline void CMsgFileLoadDialogResponse::set_files(int index, const char* value, size_t size) {
  files_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgFileLoadDialogResponse::add_files() {
  return files_.Add();
}
inline void CMsgFileLoadDialogResponse::add_files(const ::std::string& value) {
  files_.Add()->assign(value);
}
inline void CMsgFileLoadDialogResponse::add_files(const char* value) {
  files_.Add()->assign(value);
}
inline void CMsgFileLoadDialogResponse::add_files(const char* value, size_t size) {
  files_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CMsgFileLoadDialogResponse::files() const {
  return files_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CMsgFileLoadDialogResponse::mutable_files() {
  return &files_;
}

// -------------------------------------------------------------------

// CMsgShowToolTip

// optional uint32 browser_handle = 1;
inline bool CMsgShowToolTip::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgShowToolTip::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgShowToolTip::browser_handle() const {
  return browser_handle_;
}
inline void CMsgShowToolTip::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// optional string text = 2;
inline bool CMsgShowToolTip::has_text() const {
  return _has_bit(1);
}
inline void CMsgShowToolTip::clear_text() {
  if (text_ != &_default_text_) {
    text_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& CMsgShowToolTip::text() const {
  return *text_;
}
inline void CMsgShowToolTip::set_text(const ::std::string& value) {
  _set_bit(1);
  if (text_ == &_default_text_) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void CMsgShowToolTip::set_text(const char* value) {
  _set_bit(1);
  if (text_ == &_default_text_) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void CMsgShowToolTip::set_text(const char* value, size_t size) {
  _set_bit(1);
  if (text_ == &_default_text_) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgShowToolTip::mutable_text() {
  _set_bit(1);
  if (text_ == &_default_text_) {
    text_ = new ::std::string;
  }
  return text_;
}

// -------------------------------------------------------------------

// CMsgUpdateToolTip

// optional uint32 browser_handle = 1;
inline bool CMsgUpdateToolTip::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgUpdateToolTip::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgUpdateToolTip::browser_handle() const {
  return browser_handle_;
}
inline void CMsgUpdateToolTip::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// optional string text = 2;
inline bool CMsgUpdateToolTip::has_text() const {
  return _has_bit(1);
}
inline void CMsgUpdateToolTip::clear_text() {
  if (text_ != &_default_text_) {
    text_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& CMsgUpdateToolTip::text() const {
  return *text_;
}
inline void CMsgUpdateToolTip::set_text(const ::std::string& value) {
  _set_bit(1);
  if (text_ == &_default_text_) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void CMsgUpdateToolTip::set_text(const char* value) {
  _set_bit(1);
  if (text_ == &_default_text_) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void CMsgUpdateToolTip::set_text(const char* value, size_t size) {
  _set_bit(1);
  if (text_ == &_default_text_) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgUpdateToolTip::mutable_text() {
  _set_bit(1);
  if (text_ == &_default_text_) {
    text_ = new ::std::string;
  }
  return text_;
}

// -------------------------------------------------------------------

// CMsgHideToolTip

// optional uint32 browser_handle = 1;
inline bool CMsgHideToolTip::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgHideToolTip::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgHideToolTip::browser_handle() const {
  return browser_handle_;
}
inline void CMsgHideToolTip::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// -------------------------------------------------------------------

// CMsgSearchResults

// optional uint32 browser_handle = 1;
inline bool CMsgSearchResults::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgSearchResults::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgSearchResults::browser_handle() const {
  return browser_handle_;
}
inline void CMsgSearchResults::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// optional int32 activeMatch = 2;
inline bool CMsgSearchResults::has_activematch() const {
  return _has_bit(1);
}
inline void CMsgSearchResults::clear_activematch() {
  activematch_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 CMsgSearchResults::activematch() const {
  return activematch_;
}
inline void CMsgSearchResults::set_activematch(::google::protobuf::int32 value) {
  _set_bit(1);
  activematch_ = value;
}

// optional int32 results = 3;
inline bool CMsgSearchResults::has_results() const {
  return _has_bit(2);
}
inline void CMsgSearchResults::clear_results() {
  results_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 CMsgSearchResults::results() const {
  return results_;
}
inline void CMsgSearchResults::set_results(::google::protobuf::int32 value) {
  _set_bit(2);
  results_ = value;
}

// -------------------------------------------------------------------

// CMsgClose

// optional uint32 browser_handle = 1;
inline bool CMsgClose::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgClose::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgClose::browser_handle() const {
  return browser_handle_;
}
inline void CMsgClose::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// -------------------------------------------------------------------

// CMsgNeedsPaint

// optional uint32 browser_handle = 1;
inline bool CMsgNeedsPaint::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgNeedsPaint::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgNeedsPaint::browser_handle() const {
  return browser_handle_;
}
inline void CMsgNeedsPaint::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// optional uint64 rgba = 2;
inline bool CMsgNeedsPaint::has_rgba() const {
  return _has_bit(1);
}
inline void CMsgNeedsPaint::clear_rgba() {
  rgba_ = GOOGLE_ULONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::uint64 CMsgNeedsPaint::rgba() const {
  return rgba_;
}
inline void CMsgNeedsPaint::set_rgba(::google::protobuf::uint64 value) {
  _set_bit(1);
  rgba_ = value;
}

// optional uint32 wide = 3;
inline bool CMsgNeedsPaint::has_wide() const {
  return _has_bit(2);
}
inline void CMsgNeedsPaint::clear_wide() {
  wide_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMsgNeedsPaint::wide() const {
  return wide_;
}
inline void CMsgNeedsPaint::set_wide(::google::protobuf::uint32 value) {
  _set_bit(2);
  wide_ = value;
}

// optional uint32 tall = 4;
inline bool CMsgNeedsPaint::has_tall() const {
  return _has_bit(3);
}
inline void CMsgNeedsPaint::clear_tall() {
  tall_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 CMsgNeedsPaint::tall() const {
  return tall_;
}
inline void CMsgNeedsPaint::set_tall(::google::protobuf::uint32 value) {
  _set_bit(3);
  tall_ = value;
}

// optional uint32 textureid = 5;
inline bool CMsgNeedsPaint::has_textureid() const {
  return _has_bit(4);
}
inline void CMsgNeedsPaint::clear_textureid() {
  textureid_ = 0u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 CMsgNeedsPaint::textureid() const {
  return textureid_;
}
inline void CMsgNeedsPaint::set_textureid(::google::protobuf::uint32 value) {
  _set_bit(4);
  textureid_ = value;
}

// optional uint32 updatex = 6;
inline bool CMsgNeedsPaint::has_updatex() const {
  return _has_bit(5);
}
inline void CMsgNeedsPaint::clear_updatex() {
  updatex_ = 0u;
  _clear_bit(5);
}
inline ::google::protobuf::uint32 CMsgNeedsPaint::updatex() const {
  return updatex_;
}
inline void CMsgNeedsPaint::set_updatex(::google::protobuf::uint32 value) {
  _set_bit(5);
  updatex_ = value;
}

// optional uint32 updatey = 7;
inline bool CMsgNeedsPaint::has_updatey() const {
  return _has_bit(6);
}
inline void CMsgNeedsPaint::clear_updatey() {
  updatey_ = 0u;
  _clear_bit(6);
}
inline ::google::protobuf::uint32 CMsgNeedsPaint::updatey() const {
  return updatey_;
}
inline void CMsgNeedsPaint::set_updatey(::google::protobuf::uint32 value) {
  _set_bit(6);
  updatey_ = value;
}

// optional uint32 updatewide = 8;
inline bool CMsgNeedsPaint::has_updatewide() const {
  return _has_bit(7);
}
inline void CMsgNeedsPaint::clear_updatewide() {
  updatewide_ = 0u;
  _clear_bit(7);
}
inline ::google::protobuf::uint32 CMsgNeedsPaint::updatewide() const {
  return updatewide_;
}
inline void CMsgNeedsPaint::set_updatewide(::google::protobuf::uint32 value) {
  _set_bit(7);
  updatewide_ = value;
}

// optional uint32 updatetall = 9;
inline bool CMsgNeedsPaint::has_updatetall() const {
  return _has_bit(8);
}
inline void CMsgNeedsPaint::clear_updatetall() {
  updatetall_ = 0u;
  _clear_bit(8);
}
inline ::google::protobuf::uint32 CMsgNeedsPaint::updatetall() const {
  return updatetall_;
}
inline void CMsgNeedsPaint::set_updatetall(::google::protobuf::uint32 value) {
  _set_bit(8);
  updatetall_ = value;
}

// optional uint32 scrollx = 10;
inline bool CMsgNeedsPaint::has_scrollx() const {
  return _has_bit(9);
}
inline void CMsgNeedsPaint::clear_scrollx() {
  scrollx_ = 0u;
  _clear_bit(9);
}
inline ::google::protobuf::uint32 CMsgNeedsPaint::scrollx() const {
  return scrollx_;
}
inline void CMsgNeedsPaint::set_scrollx(::google::protobuf::uint32 value) {
  _set_bit(9);
  scrollx_ = value;
}

// optional uint32 scrolly = 11;
inline bool CMsgNeedsPaint::has_scrolly() const {
  return _has_bit(10);
}
inline void CMsgNeedsPaint::clear_scrolly() {
  scrolly_ = 0u;
  _clear_bit(10);
}
inline ::google::protobuf::uint32 CMsgNeedsPaint::scrolly() const {
  return scrolly_;
}
inline void CMsgNeedsPaint::set_scrolly(::google::protobuf::uint32 value) {
  _set_bit(10);
  scrolly_ = value;
}

// optional uint64 combobox_rgba = 12 [default = 0];
inline bool CMsgNeedsPaint::has_combobox_rgba() const {
  return _has_bit(11);
}
inline void CMsgNeedsPaint::clear_combobox_rgba() {
  combobox_rgba_ = GOOGLE_ULONGLONG(0);
  _clear_bit(11);
}
inline ::google::protobuf::uint64 CMsgNeedsPaint::combobox_rgba() const {
  return combobox_rgba_;
}
inline void CMsgNeedsPaint::set_combobox_rgba(::google::protobuf::uint64 value) {
  _set_bit(11);
  combobox_rgba_ = value;
}

// optional uint32 combobox_wide = 13 [default = 0];
inline bool CMsgNeedsPaint::has_combobox_wide() const {
  return _has_bit(12);
}
inline void CMsgNeedsPaint::clear_combobox_wide() {
  combobox_wide_ = 0u;
  _clear_bit(12);
}
inline ::google::protobuf::uint32 CMsgNeedsPaint::combobox_wide() const {
  return combobox_wide_;
}
inline void CMsgNeedsPaint::set_combobox_wide(::google::protobuf::uint32 value) {
  _set_bit(12);
  combobox_wide_ = value;
}

// optional uint32 combobox_tall = 14 [default = 0];
inline bool CMsgNeedsPaint::has_combobox_tall() const {
  return _has_bit(13);
}
inline void CMsgNeedsPaint::clear_combobox_tall() {
  combobox_tall_ = 0u;
  _clear_bit(13);
}
inline ::google::protobuf::uint32 CMsgNeedsPaint::combobox_tall() const {
  return combobox_tall_;
}
inline void CMsgNeedsPaint::set_combobox_tall(::google::protobuf::uint32 value) {
  _set_bit(13);
  combobox_tall_ = value;
}

// optional uint32 pageserial = 15;
inline bool CMsgNeedsPaint::has_pageserial() const {
  return _has_bit(14);
}
inline void CMsgNeedsPaint::clear_pageserial() {
  pageserial_ = 0u;
  _clear_bit(14);
}
inline ::google::protobuf::uint32 CMsgNeedsPaint::pageserial() const {
  return pageserial_;
}
inline void CMsgNeedsPaint::set_pageserial(::google::protobuf::uint32 value) {
  _set_bit(14);
  pageserial_ = value;
}

// -------------------------------------------------------------------

// CMsgNeedsPaintResponse

// optional uint32 browser_handle = 1;
inline bool CMsgNeedsPaintResponse::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgNeedsPaintResponse::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgNeedsPaintResponse::browser_handle() const {
  return browser_handle_;
}
inline void CMsgNeedsPaintResponse::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// optional uint32 textureid = 2;
inline bool CMsgNeedsPaintResponse::has_textureid() const {
  return _has_bit(1);
}
inline void CMsgNeedsPaintResponse::clear_textureid() {
  textureid_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMsgNeedsPaintResponse::textureid() const {
  return textureid_;
}
inline void CMsgNeedsPaintResponse::set_textureid(::google::protobuf::uint32 value) {
  _set_bit(1);
  textureid_ = value;
}

// -------------------------------------------------------------------

// CMsgGetZoom

// optional uint32 browser_handle = 1;
inline bool CMsgGetZoom::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgGetZoom::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgGetZoom::browser_handle() const {
  return browser_handle_;
}
inline void CMsgGetZoom::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// -------------------------------------------------------------------

// CMsgGetZoomResponse

// optional uint32 browser_handle = 1;
inline bool CMsgGetZoomResponse::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgGetZoomResponse::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgGetZoomResponse::browser_handle() const {
  return browser_handle_;
}
inline void CMsgGetZoomResponse::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// optional float zoom = 2;
inline bool CMsgGetZoomResponse::has_zoom() const {
  return _has_bit(1);
}
inline void CMsgGetZoomResponse::clear_zoom() {
  zoom_ = 0;
  _clear_bit(1);
}
inline float CMsgGetZoomResponse::zoom() const {
  return zoom_;
}
inline void CMsgGetZoomResponse::set_zoom(float value) {
  _set_bit(1);
  zoom_ = value;
}

// -------------------------------------------------------------------

// CMsgLinkAtPosition

// optional uint32 browser_handle = 1;
inline bool CMsgLinkAtPosition::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgLinkAtPosition::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgLinkAtPosition::browser_handle() const {
  return browser_handle_;
}
inline void CMsgLinkAtPosition::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// optional uint32 x = 2;
inline bool CMsgLinkAtPosition::has_x() const {
  return _has_bit(1);
}
inline void CMsgLinkAtPosition::clear_x() {
  x_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMsgLinkAtPosition::x() const {
  return x_;
}
inline void CMsgLinkAtPosition::set_x(::google::protobuf::uint32 value) {
  _set_bit(1);
  x_ = value;
}

// optional uint32 y = 3;
inline bool CMsgLinkAtPosition::has_y() const {
  return _has_bit(2);
}
inline void CMsgLinkAtPosition::clear_y() {
  y_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMsgLinkAtPosition::y() const {
  return y_;
}
inline void CMsgLinkAtPosition::set_y(::google::protobuf::uint32 value) {
  _set_bit(2);
  y_ = value;
}

// -------------------------------------------------------------------

// CMsgLinkAtPositionResponse

// optional uint32 browser_handle = 1;
inline bool CMsgLinkAtPositionResponse::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgLinkAtPositionResponse::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgLinkAtPositionResponse::browser_handle() const {
  return browser_handle_;
}
inline void CMsgLinkAtPositionResponse::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// optional uint32 x = 2;
inline bool CMsgLinkAtPositionResponse::has_x() const {
  return _has_bit(1);
}
inline void CMsgLinkAtPositionResponse::clear_x() {
  x_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMsgLinkAtPositionResponse::x() const {
  return x_;
}
inline void CMsgLinkAtPositionResponse::set_x(::google::protobuf::uint32 value) {
  _set_bit(1);
  x_ = value;
}

// optional uint32 y = 3;
inline bool CMsgLinkAtPositionResponse::has_y() const {
  return _has_bit(2);
}
inline void CMsgLinkAtPositionResponse::clear_y() {
  y_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMsgLinkAtPositionResponse::y() const {
  return y_;
}
inline void CMsgLinkAtPositionResponse::set_y(::google::protobuf::uint32 value) {
  _set_bit(2);
  y_ = value;
}

// optional string url = 4;
inline bool CMsgLinkAtPositionResponse::has_url() const {
  return _has_bit(3);
}
inline void CMsgLinkAtPositionResponse::clear_url() {
  if (url_ != &_default_url_) {
    url_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& CMsgLinkAtPositionResponse::url() const {
  return *url_;
}
inline void CMsgLinkAtPositionResponse::set_url(const ::std::string& value) {
  _set_bit(3);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void CMsgLinkAtPositionResponse::set_url(const char* value) {
  _set_bit(3);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void CMsgLinkAtPositionResponse::set_url(const char* value, size_t size) {
  _set_bit(3);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgLinkAtPositionResponse::mutable_url() {
  _set_bit(3);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  return url_;
}

// optional bool blivelink = 5;
inline bool CMsgLinkAtPositionResponse::has_blivelink() const {
  return _has_bit(4);
}
inline void CMsgLinkAtPositionResponse::clear_blivelink() {
  blivelink_ = false;
  _clear_bit(4);
}
inline bool CMsgLinkAtPositionResponse::blivelink() const {
  return blivelink_;
}
inline void CMsgLinkAtPositionResponse::set_blivelink(bool value) {
  _set_bit(4);
  blivelink_ = value;
}

// optional bool binput = 6;
inline bool CMsgLinkAtPositionResponse::has_binput() const {
  return _has_bit(5);
}
inline void CMsgLinkAtPositionResponse::clear_binput() {
  binput_ = false;
  _clear_bit(5);
}
inline bool CMsgLinkAtPositionResponse::binput() const {
  return binput_;
}
inline void CMsgLinkAtPositionResponse::set_binput(bool value) {
  _set_bit(5);
  binput_ = value;
}

// -------------------------------------------------------------------

// CMsgZoomToElementAtPosition

// optional uint32 browser_handle = 1;
inline bool CMsgZoomToElementAtPosition::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgZoomToElementAtPosition::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgZoomToElementAtPosition::browser_handle() const {
  return browser_handle_;
}
inline void CMsgZoomToElementAtPosition::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// optional uint32 x = 2;
inline bool CMsgZoomToElementAtPosition::has_x() const {
  return _has_bit(1);
}
inline void CMsgZoomToElementAtPosition::clear_x() {
  x_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMsgZoomToElementAtPosition::x() const {
  return x_;
}
inline void CMsgZoomToElementAtPosition::set_x(::google::protobuf::uint32 value) {
  _set_bit(1);
  x_ = value;
}

// optional uint32 y = 3;
inline bool CMsgZoomToElementAtPosition::has_y() const {
  return _has_bit(2);
}
inline void CMsgZoomToElementAtPosition::clear_y() {
  y_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMsgZoomToElementAtPosition::y() const {
  return y_;
}
inline void CMsgZoomToElementAtPosition::set_y(::google::protobuf::uint32 value) {
  _set_bit(2);
  y_ = value;
}

// -------------------------------------------------------------------

// CMsgZoomToElementAtPositionResponse

// optional uint32 browser_handle = 1;
inline bool CMsgZoomToElementAtPositionResponse::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgZoomToElementAtPositionResponse::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgZoomToElementAtPositionResponse::browser_handle() const {
  return browser_handle_;
}
inline void CMsgZoomToElementAtPositionResponse::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// optional sint32 initial_x = 2;
inline bool CMsgZoomToElementAtPositionResponse::has_initial_x() const {
  return _has_bit(1);
}
inline void CMsgZoomToElementAtPositionResponse::clear_initial_x() {
  initial_x_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 CMsgZoomToElementAtPositionResponse::initial_x() const {
  return initial_x_;
}
inline void CMsgZoomToElementAtPositionResponse::set_initial_x(::google::protobuf::int32 value) {
  _set_bit(1);
  initial_x_ = value;
}

// optional sint32 initial_y = 3;
inline bool CMsgZoomToElementAtPositionResponse::has_initial_y() const {
  return _has_bit(2);
}
inline void CMsgZoomToElementAtPositionResponse::clear_initial_y() {
  initial_y_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 CMsgZoomToElementAtPositionResponse::initial_y() const {
  return initial_y_;
}
inline void CMsgZoomToElementAtPositionResponse::set_initial_y(::google::protobuf::int32 value) {
  _set_bit(2);
  initial_y_ = value;
}

// optional uint32 initial_width = 4;
inline bool CMsgZoomToElementAtPositionResponse::has_initial_width() const {
  return _has_bit(3);
}
inline void CMsgZoomToElementAtPositionResponse::clear_initial_width() {
  initial_width_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 CMsgZoomToElementAtPositionResponse::initial_width() const {
  return initial_width_;
}
inline void CMsgZoomToElementAtPositionResponse::set_initial_width(::google::protobuf::uint32 value) {
  _set_bit(3);
  initial_width_ = value;
}

// optional uint32 initial_height = 5;
inline bool CMsgZoomToElementAtPositionResponse::has_initial_height() const {
  return _has_bit(4);
}
inline void CMsgZoomToElementAtPositionResponse::clear_initial_height() {
  initial_height_ = 0u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 CMsgZoomToElementAtPositionResponse::initial_height() const {
  return initial_height_;
}
inline void CMsgZoomToElementAtPositionResponse::set_initial_height(::google::protobuf::uint32 value) {
  _set_bit(4);
  initial_height_ = value;
}

// optional sint32 final_x = 6;
inline bool CMsgZoomToElementAtPositionResponse::has_final_x() const {
  return _has_bit(5);
}
inline void CMsgZoomToElementAtPositionResponse::clear_final_x() {
  final_x_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 CMsgZoomToElementAtPositionResponse::final_x() const {
  return final_x_;
}
inline void CMsgZoomToElementAtPositionResponse::set_final_x(::google::protobuf::int32 value) {
  _set_bit(5);
  final_x_ = value;
}

// optional sint32 final_y = 7;
inline bool CMsgZoomToElementAtPositionResponse::has_final_y() const {
  return _has_bit(6);
}
inline void CMsgZoomToElementAtPositionResponse::clear_final_y() {
  final_y_ = 0;
  _clear_bit(6);
}
inline ::google::protobuf::int32 CMsgZoomToElementAtPositionResponse::final_y() const {
  return final_y_;
}
inline void CMsgZoomToElementAtPositionResponse::set_final_y(::google::protobuf::int32 value) {
  _set_bit(6);
  final_y_ = value;
}

// optional uint32 final_width = 8;
inline bool CMsgZoomToElementAtPositionResponse::has_final_width() const {
  return _has_bit(7);
}
inline void CMsgZoomToElementAtPositionResponse::clear_final_width() {
  final_width_ = 0u;
  _clear_bit(7);
}
inline ::google::protobuf::uint32 CMsgZoomToElementAtPositionResponse::final_width() const {
  return final_width_;
}
inline void CMsgZoomToElementAtPositionResponse::set_final_width(::google::protobuf::uint32 value) {
  _set_bit(7);
  final_width_ = value;
}

// optional uint32 final_height = 9;
inline bool CMsgZoomToElementAtPositionResponse::has_final_height() const {
  return _has_bit(8);
}
inline void CMsgZoomToElementAtPositionResponse::clear_final_height() {
  final_height_ = 0u;
  _clear_bit(8);
}
inline ::google::protobuf::uint32 CMsgZoomToElementAtPositionResponse::final_height() const {
  return final_height_;
}
inline void CMsgZoomToElementAtPositionResponse::set_final_height(::google::protobuf::uint32 value) {
  _set_bit(8);
  final_height_ = value;
}

// optional float zoom = 10;
inline bool CMsgZoomToElementAtPositionResponse::has_zoom() const {
  return _has_bit(9);
}
inline void CMsgZoomToElementAtPositionResponse::clear_zoom() {
  zoom_ = 0;
  _clear_bit(9);
}
inline float CMsgZoomToElementAtPositionResponse::zoom() const {
  return zoom_;
}
inline void CMsgZoomToElementAtPositionResponse::set_zoom(float value) {
  _set_bit(9);
  zoom_ = value;
}

// -------------------------------------------------------------------

// CMsgScalePageToValue

// optional uint32 browser_handle = 1;
inline bool CMsgScalePageToValue::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgScalePageToValue::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgScalePageToValue::browser_handle() const {
  return browser_handle_;
}
inline void CMsgScalePageToValue::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// optional float scale = 2;
inline bool CMsgScalePageToValue::has_scale() const {
  return _has_bit(1);
}
inline void CMsgScalePageToValue::clear_scale() {
  scale_ = 0;
  _clear_bit(1);
}
inline float CMsgScalePageToValue::scale() const {
  return scale_;
}
inline void CMsgScalePageToValue::set_scale(float value) {
  _set_bit(1);
  scale_ = value;
}

// optional float x = 3;
inline bool CMsgScalePageToValue::has_x() const {
  return _has_bit(2);
}
inline void CMsgScalePageToValue::clear_x() {
  x_ = 0;
  _clear_bit(2);
}
inline float CMsgScalePageToValue::x() const {
  return x_;
}
inline void CMsgScalePageToValue::set_x(float value) {
  _set_bit(2);
  x_ = value;
}

// optional float y = 4;
inline bool CMsgScalePageToValue::has_y() const {
  return _has_bit(3);
}
inline void CMsgScalePageToValue::clear_y() {
  y_ = 0;
  _clear_bit(3);
}
inline float CMsgScalePageToValue::y() const {
  return y_;
}
inline void CMsgScalePageToValue::set_y(float value) {
  _set_bit(3);
  y_ = value;
}

// -------------------------------------------------------------------

// CMsgScalePageToValueResponse

// optional uint32 browser_handle = 1;
inline bool CMsgScalePageToValueResponse::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgScalePageToValueResponse::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgScalePageToValueResponse::browser_handle() const {
  return browser_handle_;
}
inline void CMsgScalePageToValueResponse::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// optional float zoom = 2;
inline bool CMsgScalePageToValueResponse::has_zoom() const {
  return _has_bit(1);
}
inline void CMsgScalePageToValueResponse::clear_zoom() {
  zoom_ = 0;
  _clear_bit(1);
}
inline float CMsgScalePageToValueResponse::zoom() const {
  return zoom_;
}
inline void CMsgScalePageToValueResponse::set_zoom(float value) {
  _set_bit(1);
  zoom_ = value;
}

// optional int32 width_delta = 3;
inline bool CMsgScalePageToValueResponse::has_width_delta() const {
  return _has_bit(2);
}
inline void CMsgScalePageToValueResponse::clear_width_delta() {
  width_delta_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 CMsgScalePageToValueResponse::width_delta() const {
  return width_delta_;
}
inline void CMsgScalePageToValueResponse::set_width_delta(::google::protobuf::int32 value) {
  _set_bit(2);
  width_delta_ = value;
}

// optional int32 height_delta = 4;
inline bool CMsgScalePageToValueResponse::has_height_delta() const {
  return _has_bit(3);
}
inline void CMsgScalePageToValueResponse::clear_height_delta() {
  height_delta_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 CMsgScalePageToValueResponse::height_delta() const {
  return height_delta_;
}
inline void CMsgScalePageToValueResponse::set_height_delta(::google::protobuf::int32 value) {
  _set_bit(3);
  height_delta_ = value;
}

// -------------------------------------------------------------------

// CMsgSavePageToJPEG

// optional uint32 browser_handle = 1;
inline bool CMsgSavePageToJPEG::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgSavePageToJPEG::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgSavePageToJPEG::browser_handle() const {
  return browser_handle_;
}
inline void CMsgSavePageToJPEG::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// optional string url = 2;
inline bool CMsgSavePageToJPEG::has_url() const {
  return _has_bit(1);
}
inline void CMsgSavePageToJPEG::clear_url() {
  if (url_ != &_default_url_) {
    url_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& CMsgSavePageToJPEG::url() const {
  return *url_;
}
inline void CMsgSavePageToJPEG::set_url(const ::std::string& value) {
  _set_bit(1);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void CMsgSavePageToJPEG::set_url(const char* value) {
  _set_bit(1);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void CMsgSavePageToJPEG::set_url(const char* value, size_t size) {
  _set_bit(1);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgSavePageToJPEG::mutable_url() {
  _set_bit(1);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  return url_;
}

// optional string filename = 3;
inline bool CMsgSavePageToJPEG::has_filename() const {
  return _has_bit(2);
}
inline void CMsgSavePageToJPEG::clear_filename() {
  if (filename_ != &_default_filename_) {
    filename_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& CMsgSavePageToJPEG::filename() const {
  return *filename_;
}
inline void CMsgSavePageToJPEG::set_filename(const ::std::string& value) {
  _set_bit(2);
  if (filename_ == &_default_filename_) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void CMsgSavePageToJPEG::set_filename(const char* value) {
  _set_bit(2);
  if (filename_ == &_default_filename_) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void CMsgSavePageToJPEG::set_filename(const char* value, size_t size) {
  _set_bit(2);
  if (filename_ == &_default_filename_) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgSavePageToJPEG::mutable_filename() {
  _set_bit(2);
  if (filename_ == &_default_filename_) {
    filename_ = new ::std::string;
  }
  return filename_;
}

// optional uint32 width = 4;
inline bool CMsgSavePageToJPEG::has_width() const {
  return _has_bit(3);
}
inline void CMsgSavePageToJPEG::clear_width() {
  width_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 CMsgSavePageToJPEG::width() const {
  return width_;
}
inline void CMsgSavePageToJPEG::set_width(::google::protobuf::uint32 value) {
  _set_bit(3);
  width_ = value;
}

// optional uint32 height = 5;
inline bool CMsgSavePageToJPEG::has_height() const {
  return _has_bit(4);
}
inline void CMsgSavePageToJPEG::clear_height() {
  height_ = 0u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 CMsgSavePageToJPEG::height() const {
  return height_;
}
inline void CMsgSavePageToJPEG::set_height(::google::protobuf::uint32 value) {
  _set_bit(4);
  height_ = value;
}

// -------------------------------------------------------------------

// CMsgSavePageToJPEGResponse

// optional uint32 browser_handle = 1;
inline bool CMsgSavePageToJPEGResponse::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgSavePageToJPEGResponse::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgSavePageToJPEGResponse::browser_handle() const {
  return browser_handle_;
}
inline void CMsgSavePageToJPEGResponse::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// optional string url = 2;
inline bool CMsgSavePageToJPEGResponse::has_url() const {
  return _has_bit(1);
}
inline void CMsgSavePageToJPEGResponse::clear_url() {
  if (url_ != &_default_url_) {
    url_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& CMsgSavePageToJPEGResponse::url() const {
  return *url_;
}
inline void CMsgSavePageToJPEGResponse::set_url(const ::std::string& value) {
  _set_bit(1);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void CMsgSavePageToJPEGResponse::set_url(const char* value) {
  _set_bit(1);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void CMsgSavePageToJPEGResponse::set_url(const char* value, size_t size) {
  _set_bit(1);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgSavePageToJPEGResponse::mutable_url() {
  _set_bit(1);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  return url_;
}

// optional string filename = 3;
inline bool CMsgSavePageToJPEGResponse::has_filename() const {
  return _has_bit(2);
}
inline void CMsgSavePageToJPEGResponse::clear_filename() {
  if (filename_ != &_default_filename_) {
    filename_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& CMsgSavePageToJPEGResponse::filename() const {
  return *filename_;
}
inline void CMsgSavePageToJPEGResponse::set_filename(const ::std::string& value) {
  _set_bit(2);
  if (filename_ == &_default_filename_) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void CMsgSavePageToJPEGResponse::set_filename(const char* value) {
  _set_bit(2);
  if (filename_ == &_default_filename_) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void CMsgSavePageToJPEGResponse::set_filename(const char* value, size_t size) {
  _set_bit(2);
  if (filename_ == &_default_filename_) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgSavePageToJPEGResponse::mutable_filename() {
  _set_bit(2);
  if (filename_ == &_default_filename_) {
    filename_ = new ::std::string;
  }
  return filename_;
}

// -------------------------------------------------------------------

// CMsgJSAlert

// optional uint32 browser_handle = 1;
inline bool CMsgJSAlert::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgJSAlert::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgJSAlert::browser_handle() const {
  return browser_handle_;
}
inline void CMsgJSAlert::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// optional string message = 2;
inline bool CMsgJSAlert::has_message() const {
  return _has_bit(1);
}
inline void CMsgJSAlert::clear_message() {
  if (message_ != &_default_message_) {
    message_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& CMsgJSAlert::message() const {
  return *message_;
}
inline void CMsgJSAlert::set_message(const ::std::string& value) {
  _set_bit(1);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void CMsgJSAlert::set_message(const char* value) {
  _set_bit(1);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void CMsgJSAlert::set_message(const char* value, size_t size) {
  _set_bit(1);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgJSAlert::mutable_message() {
  _set_bit(1);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  return message_;
}

// -------------------------------------------------------------------

// CMsgJSConfirm

// optional uint32 browser_handle = 1;
inline bool CMsgJSConfirm::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgJSConfirm::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgJSConfirm::browser_handle() const {
  return browser_handle_;
}
inline void CMsgJSConfirm::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// optional string message = 2;
inline bool CMsgJSConfirm::has_message() const {
  return _has_bit(1);
}
inline void CMsgJSConfirm::clear_message() {
  if (message_ != &_default_message_) {
    message_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& CMsgJSConfirm::message() const {
  return *message_;
}
inline void CMsgJSConfirm::set_message(const ::std::string& value) {
  _set_bit(1);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void CMsgJSConfirm::set_message(const char* value) {
  _set_bit(1);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void CMsgJSConfirm::set_message(const char* value, size_t size) {
  _set_bit(1);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgJSConfirm::mutable_message() {
  _set_bit(1);
  if (message_ == &_default_message_) {
    message_ = new ::std::string;
  }
  return message_;
}

// -------------------------------------------------------------------

// CMsgJSDialogResponse

// optional uint32 browser_handle = 1;
inline bool CMsgJSDialogResponse::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgJSDialogResponse::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgJSDialogResponse::browser_handle() const {
  return browser_handle_;
}
inline void CMsgJSDialogResponse::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// optional bool result = 2;
inline bool CMsgJSDialogResponse::has_result() const {
  return _has_bit(1);
}
inline void CMsgJSDialogResponse::clear_result() {
  result_ = false;
  _clear_bit(1);
}
inline bool CMsgJSDialogResponse::result() const {
  return result_;
}
inline void CMsgJSDialogResponse::set_result(bool value) {
  _set_bit(1);
  result_ = value;
}

// -------------------------------------------------------------------

// CMsgCanGoBackAndForward

// optional uint32 browser_handle = 1;
inline bool CMsgCanGoBackAndForward::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgCanGoBackAndForward::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgCanGoBackAndForward::browser_handle() const {
  return browser_handle_;
}
inline void CMsgCanGoBackAndForward::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// optional bool bgoback = 2;
inline bool CMsgCanGoBackAndForward::has_bgoback() const {
  return _has_bit(1);
}
inline void CMsgCanGoBackAndForward::clear_bgoback() {
  bgoback_ = false;
  _clear_bit(1);
}
inline bool CMsgCanGoBackAndForward::bgoback() const {
  return bgoback_;
}
inline void CMsgCanGoBackAndForward::set_bgoback(bool value) {
  _set_bit(1);
  bgoback_ = value;
}

// optional bool bgoforward = 3;
inline bool CMsgCanGoBackAndForward::has_bgoforward() const {
  return _has_bit(2);
}
inline void CMsgCanGoBackAndForward::clear_bgoforward() {
  bgoforward_ = false;
  _clear_bit(2);
}
inline bool CMsgCanGoBackAndForward::bgoforward() const {
  return bgoforward_;
}
inline void CMsgCanGoBackAndForward::set_bgoforward(bool value) {
  _set_bit(2);
  bgoforward_ = value;
}

// -------------------------------------------------------------------

// CMsgOpenSteamURL

// optional uint32 browser_handle = 1;
inline bool CMsgOpenSteamURL::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgOpenSteamURL::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgOpenSteamURL::browser_handle() const {
  return browser_handle_;
}
inline void CMsgOpenSteamURL::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// optional string url = 2;
inline bool CMsgOpenSteamURL::has_url() const {
  return _has_bit(1);
}
inline void CMsgOpenSteamURL::clear_url() {
  if (url_ != &_default_url_) {
    url_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& CMsgOpenSteamURL::url() const {
  return *url_;
}
inline void CMsgOpenSteamURL::set_url(const ::std::string& value) {
  _set_bit(1);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void CMsgOpenSteamURL::set_url(const char* value) {
  _set_bit(1);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void CMsgOpenSteamURL::set_url(const char* value, size_t size) {
  _set_bit(1);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgOpenSteamURL::mutable_url() {
  _set_bit(1);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  return url_;
}

// -------------------------------------------------------------------

// CMsgSetCookie

// optional string key = 1;
inline bool CMsgSetCookie::has_key() const {
  return _has_bit(0);
}
inline void CMsgSetCookie::clear_key() {
  if (key_ != &_default_key_) {
    key_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& CMsgSetCookie::key() const {
  return *key_;
}
inline void CMsgSetCookie::set_key(const ::std::string& value) {
  _set_bit(0);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void CMsgSetCookie::set_key(const char* value) {
  _set_bit(0);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void CMsgSetCookie::set_key(const char* value, size_t size) {
  _set_bit(0);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgSetCookie::mutable_key() {
  _set_bit(0);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  return key_;
}

// optional string value = 2;
inline bool CMsgSetCookie::has_value() const {
  return _has_bit(1);
}
inline void CMsgSetCookie::clear_value() {
  if (value_ != &_default_value_) {
    value_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& CMsgSetCookie::value() const {
  return *value_;
}
inline void CMsgSetCookie::set_value(const ::std::string& value) {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void CMsgSetCookie::set_value(const char* value) {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void CMsgSetCookie::set_value(const char* value, size_t size) {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgSetCookie::mutable_value() {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  return value_;
}

// optional string path = 3;
inline bool CMsgSetCookie::has_path() const {
  return _has_bit(2);
}
inline void CMsgSetCookie::clear_path() {
  if (path_ != &_default_path_) {
    path_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& CMsgSetCookie::path() const {
  return *path_;
}
inline void CMsgSetCookie::set_path(const ::std::string& value) {
  _set_bit(2);
  if (path_ == &_default_path_) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void CMsgSetCookie::set_path(const char* value) {
  _set_bit(2);
  if (path_ == &_default_path_) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void CMsgSetCookie::set_path(const char* value, size_t size) {
  _set_bit(2);
  if (path_ == &_default_path_) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgSetCookie::mutable_path() {
  _set_bit(2);
  if (path_ == &_default_path_) {
    path_ = new ::std::string;
  }
  return path_;
}

// optional string host = 4;
inline bool CMsgSetCookie::has_host() const {
  return _has_bit(3);
}
inline void CMsgSetCookie::clear_host() {
  if (host_ != &_default_host_) {
    host_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& CMsgSetCookie::host() const {
  return *host_;
}
inline void CMsgSetCookie::set_host(const ::std::string& value) {
  _set_bit(3);
  if (host_ == &_default_host_) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void CMsgSetCookie::set_host(const char* value) {
  _set_bit(3);
  if (host_ == &_default_host_) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void CMsgSetCookie::set_host(const char* value, size_t size) {
  _set_bit(3);
  if (host_ == &_default_host_) {
    host_ = new ::std::string;
  }
  host_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgSetCookie::mutable_host() {
  _set_bit(3);
  if (host_ == &_default_host_) {
    host_ = new ::std::string;
  }
  return host_;
}

// optional uint32 expires = 5;
inline bool CMsgSetCookie::has_expires() const {
  return _has_bit(4);
}
inline void CMsgSetCookie::clear_expires() {
  expires_ = 0u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 CMsgSetCookie::expires() const {
  return expires_;
}
inline void CMsgSetCookie::set_expires(::google::protobuf::uint32 value) {
  _set_bit(4);
  expires_ = value;
}

// -------------------------------------------------------------------

// CMsgSetTargetFrameRate

// optional uint32 nTargetFrameRate = 1;
inline bool CMsgSetTargetFrameRate::has_ntargetframerate() const {
  return _has_bit(0);
}
inline void CMsgSetTargetFrameRate::clear_ntargetframerate() {
  ntargetframerate_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgSetTargetFrameRate::ntargetframerate() const {
  return ntargetframerate_;
}
inline void CMsgSetTargetFrameRate::set_ntargetframerate(::google::protobuf::uint32 value) {
  _set_bit(0);
  ntargetframerate_ = value;
}

// -------------------------------------------------------------------

// CMsgFullRepaint

// optional uint32 browser_handle = 1;
inline bool CMsgFullRepaint::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgFullRepaint::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgFullRepaint::browser_handle() const {
  return browser_handle_;
}
inline void CMsgFullRepaint::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// -------------------------------------------------------------------

// CMsgRequestFullScreen

// optional uint32 browser_handle = 1;
inline bool CMsgRequestFullScreen::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgRequestFullScreen::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgRequestFullScreen::browser_handle() const {
  return browser_handle_;
}
inline void CMsgRequestFullScreen::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// -------------------------------------------------------------------

// CMsgRequestFullScreenResponse

// optional uint32 browser_handle = 1;
inline bool CMsgRequestFullScreenResponse::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgRequestFullScreenResponse::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgRequestFullScreenResponse::browser_handle() const {
  return browser_handle_;
}
inline void CMsgRequestFullScreenResponse::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// optional bool ballow = 2;
inline bool CMsgRequestFullScreenResponse::has_ballow() const {
  return _has_bit(1);
}
inline void CMsgRequestFullScreenResponse::clear_ballow() {
  ballow_ = false;
  _clear_bit(1);
}
inline bool CMsgRequestFullScreenResponse::ballow() const {
  return ballow_;
}
inline void CMsgRequestFullScreenResponse::set_ballow(bool value) {
  _set_bit(1);
  ballow_ = value;
}

// -------------------------------------------------------------------

// CMsgExitFullScreen

// optional uint32 browser_handle = 1;
inline bool CMsgExitFullScreen::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgExitFullScreen::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgExitFullScreen::browser_handle() const {
  return browser_handle_;
}
inline void CMsgExitFullScreen::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// -------------------------------------------------------------------

// CMsgGetCookiesForURL

// optional uint32 browser_handle = 1;
inline bool CMsgGetCookiesForURL::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgGetCookiesForURL::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgGetCookiesForURL::browser_handle() const {
  return browser_handle_;
}
inline void CMsgGetCookiesForURL::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// optional string url = 2;
inline bool CMsgGetCookiesForURL::has_url() const {
  return _has_bit(1);
}
inline void CMsgGetCookiesForURL::clear_url() {
  if (url_ != &_default_url_) {
    url_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& CMsgGetCookiesForURL::url() const {
  return *url_;
}
inline void CMsgGetCookiesForURL::set_url(const ::std::string& value) {
  _set_bit(1);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void CMsgGetCookiesForURL::set_url(const char* value) {
  _set_bit(1);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void CMsgGetCookiesForURL::set_url(const char* value, size_t size) {
  _set_bit(1);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgGetCookiesForURL::mutable_url() {
  _set_bit(1);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  return url_;
}

// -------------------------------------------------------------------

// CCookie

// optional string name = 1;
inline bool CCookie::has_name() const {
  return _has_bit(0);
}
inline void CCookie::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& CCookie::name() const {
  return *name_;
}
inline void CCookie::set_name(const ::std::string& value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CCookie::set_name(const char* value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CCookie::set_name(const char* value, size_t size) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CCookie::mutable_name() {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// optional string value = 2;
inline bool CCookie::has_value() const {
  return _has_bit(1);
}
inline void CCookie::clear_value() {
  if (value_ != &_default_value_) {
    value_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& CCookie::value() const {
  return *value_;
}
inline void CCookie::set_value(const ::std::string& value) {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void CCookie::set_value(const char* value) {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void CCookie::set_value(const char* value, size_t size) {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CCookie::mutable_value() {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  return value_;
}

// optional string domain = 3;
inline bool CCookie::has_domain() const {
  return _has_bit(2);
}
inline void CCookie::clear_domain() {
  if (domain_ != &_default_domain_) {
    domain_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& CCookie::domain() const {
  return *domain_;
}
inline void CCookie::set_domain(const ::std::string& value) {
  _set_bit(2);
  if (domain_ == &_default_domain_) {
    domain_ = new ::std::string;
  }
  domain_->assign(value);
}
inline void CCookie::set_domain(const char* value) {
  _set_bit(2);
  if (domain_ == &_default_domain_) {
    domain_ = new ::std::string;
  }
  domain_->assign(value);
}
inline void CCookie::set_domain(const char* value, size_t size) {
  _set_bit(2);
  if (domain_ == &_default_domain_) {
    domain_ = new ::std::string;
  }
  domain_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CCookie::mutable_domain() {
  _set_bit(2);
  if (domain_ == &_default_domain_) {
    domain_ = new ::std::string;
  }
  return domain_;
}

// optional string path = 4;
inline bool CCookie::has_path() const {
  return _has_bit(3);
}
inline void CCookie::clear_path() {
  if (path_ != &_default_path_) {
    path_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& CCookie::path() const {
  return *path_;
}
inline void CCookie::set_path(const ::std::string& value) {
  _set_bit(3);
  if (path_ == &_default_path_) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void CCookie::set_path(const char* value) {
  _set_bit(3);
  if (path_ == &_default_path_) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void CCookie::set_path(const char* value, size_t size) {
  _set_bit(3);
  if (path_ == &_default_path_) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CCookie::mutable_path() {
  _set_bit(3);
  if (path_ == &_default_path_) {
    path_ = new ::std::string;
  }
  return path_;
}

// -------------------------------------------------------------------

// CMsgGetCookiesForURLResponse

// optional uint32 browser_handle = 1;
inline bool CMsgGetCookiesForURLResponse::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgGetCookiesForURLResponse::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgGetCookiesForURLResponse::browser_handle() const {
  return browser_handle_;
}
inline void CMsgGetCookiesForURLResponse::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// optional string url = 2;
inline bool CMsgGetCookiesForURLResponse::has_url() const {
  return _has_bit(1);
}
inline void CMsgGetCookiesForURLResponse::clear_url() {
  if (url_ != &_default_url_) {
    url_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& CMsgGetCookiesForURLResponse::url() const {
  return *url_;
}
inline void CMsgGetCookiesForURLResponse::set_url(const ::std::string& value) {
  _set_bit(1);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void CMsgGetCookiesForURLResponse::set_url(const char* value) {
  _set_bit(1);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void CMsgGetCookiesForURLResponse::set_url(const char* value, size_t size) {
  _set_bit(1);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgGetCookiesForURLResponse::mutable_url() {
  _set_bit(1);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  return url_;
}

// repeated .CCookie cookies = 3;
inline int CMsgGetCookiesForURLResponse::cookies_size() const {
  return cookies_.size();
}
inline void CMsgGetCookiesForURLResponse::clear_cookies() {
  cookies_.Clear();
}
inline const ::CCookie& CMsgGetCookiesForURLResponse::cookies(int index) const {
  return cookies_.Get(index);
}
inline ::CCookie* CMsgGetCookiesForURLResponse::mutable_cookies(int index) {
  return cookies_.Mutable(index);
}
inline ::CCookie* CMsgGetCookiesForURLResponse::add_cookies() {
  return cookies_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CCookie >&
CMsgGetCookiesForURLResponse::cookies() const {
  return cookies_;
}
inline ::google::protobuf::RepeatedPtrField< ::CCookie >*
CMsgGetCookiesForURLResponse::mutable_cookies() {
  return &cookies_;
}

// -------------------------------------------------------------------

// CMsgNodeHasFocus

// optional uint32 browser_handle = 1;
inline bool CMsgNodeHasFocus::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgNodeHasFocus::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgNodeHasFocus::browser_handle() const {
  return browser_handle_;
}
inline void CMsgNodeHasFocus::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// optional bool bInput = 2;
inline bool CMsgNodeHasFocus::has_binput() const {
  return _has_bit(1);
}
inline void CMsgNodeHasFocus::clear_binput() {
  binput_ = false;
  _clear_bit(1);
}
inline bool CMsgNodeHasFocus::binput() const {
  return binput_;
}
inline void CMsgNodeHasFocus::set_binput(bool value) {
  _set_bit(1);
  binput_ = value;
}

// optional string name = 3;
inline bool CMsgNodeHasFocus::has_name() const {
  return _has_bit(2);
}
inline void CMsgNodeHasFocus::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& CMsgNodeHasFocus::name() const {
  return *name_;
}
inline void CMsgNodeHasFocus::set_name(const ::std::string& value) {
  _set_bit(2);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CMsgNodeHasFocus::set_name(const char* value) {
  _set_bit(2);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CMsgNodeHasFocus::set_name(const char* value, size_t size) {
  _set_bit(2);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgNodeHasFocus::mutable_name() {
  _set_bit(2);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// optional string elementtagname = 4;
inline bool CMsgNodeHasFocus::has_elementtagname() const {
  return _has_bit(3);
}
inline void CMsgNodeHasFocus::clear_elementtagname() {
  if (elementtagname_ != &_default_elementtagname_) {
    elementtagname_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& CMsgNodeHasFocus::elementtagname() const {
  return *elementtagname_;
}
inline void CMsgNodeHasFocus::set_elementtagname(const ::std::string& value) {
  _set_bit(3);
  if (elementtagname_ == &_default_elementtagname_) {
    elementtagname_ = new ::std::string;
  }
  elementtagname_->assign(value);
}
inline void CMsgNodeHasFocus::set_elementtagname(const char* value) {
  _set_bit(3);
  if (elementtagname_ == &_default_elementtagname_) {
    elementtagname_ = new ::std::string;
  }
  elementtagname_->assign(value);
}
inline void CMsgNodeHasFocus::set_elementtagname(const char* value, size_t size) {
  _set_bit(3);
  if (elementtagname_ == &_default_elementtagname_) {
    elementtagname_ = new ::std::string;
  }
  elementtagname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgNodeHasFocus::mutable_elementtagname() {
  _set_bit(3);
  if (elementtagname_ == &_default_elementtagname_) {
    elementtagname_ = new ::std::string;
  }
  return elementtagname_;
}

// optional string searchbuttontext = 5;
inline bool CMsgNodeHasFocus::has_searchbuttontext() const {
  return _has_bit(4);
}
inline void CMsgNodeHasFocus::clear_searchbuttontext() {
  if (searchbuttontext_ != &_default_searchbuttontext_) {
    searchbuttontext_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& CMsgNodeHasFocus::searchbuttontext() const {
  return *searchbuttontext_;
}
inline void CMsgNodeHasFocus::set_searchbuttontext(const ::std::string& value) {
  _set_bit(4);
  if (searchbuttontext_ == &_default_searchbuttontext_) {
    searchbuttontext_ = new ::std::string;
  }
  searchbuttontext_->assign(value);
}
inline void CMsgNodeHasFocus::set_searchbuttontext(const char* value) {
  _set_bit(4);
  if (searchbuttontext_ == &_default_searchbuttontext_) {
    searchbuttontext_ = new ::std::string;
  }
  searchbuttontext_->assign(value);
}
inline void CMsgNodeHasFocus::set_searchbuttontext(const char* value, size_t size) {
  _set_bit(4);
  if (searchbuttontext_ == &_default_searchbuttontext_) {
    searchbuttontext_ = new ::std::string;
  }
  searchbuttontext_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgNodeHasFocus::mutable_searchbuttontext() {
  _set_bit(4);
  if (searchbuttontext_ == &_default_searchbuttontext_) {
    searchbuttontext_ = new ::std::string;
  }
  return searchbuttontext_;
}

// optional bool bHasMultipleInputs = 6;
inline bool CMsgNodeHasFocus::has_bhasmultipleinputs() const {
  return _has_bit(5);
}
inline void CMsgNodeHasFocus::clear_bhasmultipleinputs() {
  bhasmultipleinputs_ = false;
  _clear_bit(5);
}
inline bool CMsgNodeHasFocus::bhasmultipleinputs() const {
  return bhasmultipleinputs_;
}
inline void CMsgNodeHasFocus::set_bhasmultipleinputs(bool value) {
  _set_bit(5);
  bhasmultipleinputs_ = value;
}

// optional string input_type = 7;
inline bool CMsgNodeHasFocus::has_input_type() const {
  return _has_bit(6);
}
inline void CMsgNodeHasFocus::clear_input_type() {
  if (input_type_ != &_default_input_type_) {
    input_type_->clear();
  }
  _clear_bit(6);
}
inline const ::std::string& CMsgNodeHasFocus::input_type() const {
  return *input_type_;
}
inline void CMsgNodeHasFocus::set_input_type(const ::std::string& value) {
  _set_bit(6);
  if (input_type_ == &_default_input_type_) {
    input_type_ = new ::std::string;
  }
  input_type_->assign(value);
}
inline void CMsgNodeHasFocus::set_input_type(const char* value) {
  _set_bit(6);
  if (input_type_ == &_default_input_type_) {
    input_type_ = new ::std::string;
  }
  input_type_->assign(value);
}
inline void CMsgNodeHasFocus::set_input_type(const char* value, size_t size) {
  _set_bit(6);
  if (input_type_ == &_default_input_type_) {
    input_type_ = new ::std::string;
  }
  input_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgNodeHasFocus::mutable_input_type() {
  _set_bit(6);
  if (input_type_ == &_default_input_type_) {
    input_type_ = new ::std::string;
  }
  return input_type_;
}

// -------------------------------------------------------------------

// CMsgZoomToFocusedElement

// optional uint32 browser_handle = 1;
inline bool CMsgZoomToFocusedElement::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgZoomToFocusedElement::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgZoomToFocusedElement::browser_handle() const {
  return browser_handle_;
}
inline void CMsgZoomToFocusedElement::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// optional uint32 leftoffset = 2 [default = 0];
inline bool CMsgZoomToFocusedElement::has_leftoffset() const {
  return _has_bit(1);
}
inline void CMsgZoomToFocusedElement::clear_leftoffset() {
  leftoffset_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMsgZoomToFocusedElement::leftoffset() const {
  return leftoffset_;
}
inline void CMsgZoomToFocusedElement::set_leftoffset(::google::protobuf::uint32 value) {
  _set_bit(1);
  leftoffset_ = value;
}

// optional uint32 topoffset = 3 [default = 0];
inline bool CMsgZoomToFocusedElement::has_topoffset() const {
  return _has_bit(2);
}
inline void CMsgZoomToFocusedElement::clear_topoffset() {
  topoffset_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMsgZoomToFocusedElement::topoffset() const {
  return topoffset_;
}
inline void CMsgZoomToFocusedElement::set_topoffset(::google::protobuf::uint32 value) {
  _set_bit(2);
  topoffset_ = value;
}

// -------------------------------------------------------------------

// CMsgCloseFullScreenFlashIfOpen

// optional uint32 browser_handle = 1;
inline bool CMsgCloseFullScreenFlashIfOpen::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgCloseFullScreenFlashIfOpen::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgCloseFullScreenFlashIfOpen::browser_handle() const {
  return browser_handle_;
}
inline void CMsgCloseFullScreenFlashIfOpen::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// -------------------------------------------------------------------

// CMsgPauseFullScreenFlashMovieIfOpen

// optional uint32 browser_handle = 1;
inline bool CMsgPauseFullScreenFlashMovieIfOpen::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgPauseFullScreenFlashMovieIfOpen::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgPauseFullScreenFlashMovieIfOpen::browser_handle() const {
  return browser_handle_;
}
inline void CMsgPauseFullScreenFlashMovieIfOpen::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// -------------------------------------------------------------------

// CMsgFocusedNodeText

// optional uint32 browser_handle = 1;
inline bool CMsgFocusedNodeText::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgFocusedNodeText::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgFocusedNodeText::browser_handle() const {
  return browser_handle_;
}
inline void CMsgFocusedNodeText::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// -------------------------------------------------------------------

// CMsgFocusedNodeTextResponse

// optional uint32 browser_handle = 1;
inline bool CMsgFocusedNodeTextResponse::has_browser_handle() const {
  return _has_bit(0);
}
inline void CMsgFocusedNodeTextResponse::clear_browser_handle() {
  browser_handle_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgFocusedNodeTextResponse::browser_handle() const {
  return browser_handle_;
}
inline void CMsgFocusedNodeTextResponse::set_browser_handle(::google::protobuf::uint32 value) {
  _set_bit(0);
  browser_handle_ = value;
}

// optional string value = 2;
inline bool CMsgFocusedNodeTextResponse::has_value() const {
  return _has_bit(1);
}
inline void CMsgFocusedNodeTextResponse::clear_value() {
  if (value_ != &_default_value_) {
    value_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& CMsgFocusedNodeTextResponse::value() const {
  return *value_;
}
inline void CMsgFocusedNodeTextResponse::set_value(const ::std::string& value) {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void CMsgFocusedNodeTextResponse::set_value(const char* value) {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void CMsgFocusedNodeTextResponse::set_value(const char* value, size_t size) {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgFocusedNodeTextResponse::mutable_value() {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  return value_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_htmlmessages_2eproto__INCLUDED
